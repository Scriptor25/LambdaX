type GLenum     = u32
type GLfloat    = f32
type GLint      = i32
type GLsizei    = i32
type GLbitfield = u32
type GLdouble   = f64
type GLuint     = u32
type GLboolean  =  u8
type GLubyte    =  u8

export DEPTH_BUFFER_BIT() => u64        = 0x00000100
export STENCIL_BUFFER_BIT() => u64      = 0x00000400
export COLOR_BUFFER_BIT() => u64        = 0x00004000
export FALSE() => u64                   = 0
export TRUE() => u64                    = 1
export POINTS() => u64                  = 0x0000
export LINES() => u64                   = 0x0001
export LINE_LOOP() => u64               = 0x0002
export LINE_STRIP() => u64              = 0x0003
export TRIANGLES() => u64               = 0x0004
export TRIANGLE_STRIP() => u64          = 0x0005
export TRIANGLE_FAN() => u64            = 0x0006
export QUADS() => u64                   = 0x0007
export NEVER() => u64                   = 0x0200
export LESS() => u64                    = 0x0201
export EQUAL() => u64                   = 0x0202
export LEQUAL() => u64                  = 0x0203
export GREATER() => u64                 = 0x0204
export NOTEQUAL() => u64                = 0x0205
export GEQUAL() => u64                  = 0x0206
export ALWAYS() => u64                  = 0x0207
export ZERO() => u64                    = 0
export ONE() => u64                     = 1
export SRC_COLOR() => u64               = 0x0300
export ONE_MINUS_SRC_COLOR() => u64     = 0x0301
export SRC_ALPHA() => u64               = 0x0302
export ONE_MINUS_SRC_ALPHA() => u64     = 0x0303
export DST_ALPHA() => u64               = 0x0304
export ONE_MINUS_DST_ALPHA() => u64     = 0x0305
export DST_COLOR() => u64               = 0x0306
export ONE_MINUS_DST_COLOR() => u64     = 0x0307
export SRC_ALPHA_SATURATE() => u64      = 0x0308
export NONE() => u64                    = 0
export FRONT_LEFT() => u64              = 0x0400
export FRONT_RIGHT() => u64             = 0x0401
export BACK_LEFT() => u64               = 0x0402
export BACK_RIGHT() => u64              = 0x0403
export FRONT() => u64                   = 0x0404
export BACK() => u64                    = 0x0405
export LEFT() => u64                    = 0x0406
export RIGHT() => u64                   = 0x0407
export FRONT_AND_BACK() => u64          = 0x0408
export NO_ERROR() => u64                = 0
export INVALID_ENUM() => u64            = 0x0500
export INVALID_VALUE() => u64           = 0x0501
export INVALID_OPERATION() => u64       = 0x0502
export OUT_OF_MEMORY() => u64           = 0x0505
export CW() => u64                      = 0x0900
export CCW() => u64                     = 0x0901
export POINT_SIZE() => u64              = 0x0B11
export POINT_SIZE_RANGE() => u64        = 0x0B12
export POINT_SIZE_GRANULARITY() => u64  = 0x0B13
export LINE_SMOOTH() => u64             = 0x0B20
export LINE_WIDTH() => u64              = 0x0B21
export LINE_WIDTH_RANGE() => u64        = 0x0B22
export LINE_WIDTH_GRANULARITY() => u64  = 0x0B23
export POLYGON_MODE() => u64            = 0x0B40
export POLYGON_SMOOTH() => u64          = 0x0B41
export CULL_FACE() => u64               = 0x0B44
export CULL_FACE_MODE() => u64          = 0x0B45
export FRONT_FACE() => u64              = 0x0B46
export DEPTH_RANGE() => u64             = 0x0B70
export DEPTH_TEST() => u64              = 0x0B71
export DEPTH_WRITEMASK() => u64         = 0x0B72
export DEPTH_CLEAR_VALUE() => u64       = 0x0B73
export DEPTH_FUNC() => u64              = 0x0B74
export STENCIL_TEST() => u64            = 0x0B90
export STENCIL_CLEAR_VALUE() => u64     = 0x0B91
export STENCIL_FUNC() => u64            = 0x0B92
export STENCIL_VALUE_MASK() => u64      = 0x0B93
export STENCIL_FAIL() => u64            = 0x0B94
export STENCIL_PASS_DEPTH_FAIL() => u64 = 0x0B95
export STENCIL_PASS_DEPTH_PASS() => u64 = 0x0B96
export STENCIL_REF() => u64             = 0x0B97
export STENCIL_WRITEMASK() => u64       = 0x0B98
export VIEWPORT() => u64                = 0x0BA2
export DITHER() => u64                  = 0x0BD0
export BLEND_DST() => u64               = 0x0BE0
export BLEND_SRC() => u64               = 0x0BE1
export BLEND() => u64                   = 0x0BE2
export LOGIC_OP_MODE() => u64           = 0x0BF0
export DRAW_BUFFER() => u64             = 0x0C01
export READ_BUFFER() => u64             = 0x0C02
export SCISSOR_BOX() => u64             = 0x0C10
export SCISSOR_TEST() => u64            = 0x0C11
export COLOR_CLEAR_VALUE() => u64       = 0x0C22
export COLOR_WRITEMASK() => u64         = 0x0C23
export DOUBLEBUFFER() => u64            = 0x0C32
export STEREO() => u64                  = 0x0C33
export LINE_SMOOTH_HINT() => u64        = 0x0C52
export POLYGON_SMOOTH_HINT() => u64     = 0x0C53
export UNPACK_SWAP_BYTES() => u64       = 0x0CF0
export UNPACK_LSB_FIRST() => u64        = 0x0CF1
export UNPACK_ROW_LENGTH() => u64       = 0x0CF2
export UNPACK_SKIP_ROWS() => u64        = 0x0CF3
export UNPACK_SKIP_PIXELS() => u64      = 0x0CF4
export UNPACK_ALIGNMENT() => u64        = 0x0CF5
export PACK_SWAP_BYTES() => u64         = 0x0D00
export PACK_LSB_FIRST() => u64          = 0x0D01
export PACK_ROW_LENGTH() => u64         = 0x0D02
export PACK_SKIP_ROWS() => u64          = 0x0D03
export PACK_SKIP_PIXELS() => u64        = 0x0D04
export PACK_ALIGNMENT() => u64          = 0x0D05
export MAX_TEXTURE_SIZE() => u64        = 0x0D33
export MAX_VIEWPORT_DIMS() => u64       = 0x0D3A
export SUBPIXEL_BITS() => u64           = 0x0D50
export TEXTURE_1D() => u64              = 0x0DE0
export TEXTURE_2D() => u64              = 0x0DE1
export TEXTURE_WIDTH() => u64           = 0x1000
export TEXTURE_HEIGHT() => u64          = 0x1001
export TEXTURE_BORDER_COLOR() => u64    = 0x1004
export DONT_CARE() => u64               = 0x1100
export FASTEST() => u64                 = 0x1101
export NICEST() => u64                  = 0x1102
export BYTE() => u64                    = 0x1400
export UNSIGNED_BYTE() => u64           = 0x1401
export SHORT() => u64                   = 0x1402
export UNSIGNED_SHORT() => u64          = 0x1403
export INT() => u64                     = 0x1404
export UNSIGNED_INT() => u64            = 0x1405
export FLOAT() => u64                   = 0x1406
export STACK_OVERFLOW() => u64          = 0x0503
export STACK_UNDERFLOW() => u64         = 0x0504
export CLEAR() => u64                   = 0x1500
export AND() => u64                     = 0x1501
export AND_REVERSE() => u64             = 0x1502
export COPY() => u64                    = 0x1503
export AND_INVERTED() => u64            = 0x1504
export NOOP() => u64                    = 0x1505
export XOR() => u64                     = 0x1506
export OR() => u64                      = 0x1507
export NOR() => u64                     = 0x1508
export EQUIV() => u64                   = 0x1509
export INVERT() => u64                  = 0x150A
export OR_REVERSE() => u64              = 0x150B
export COPY_INVERTED() => u64           = 0x150C
export OR_INVERTED() => u64             = 0x150D
export NAND() => u64                    = 0x150E
export SET() => u64                     = 0x150F
export TEXTURE() => u64                 = 0x1702
export COLOR() => u64                   = 0x1800
export DEPTH() => u64                   = 0x1801
export STENCIL() => u64                 = 0x1802
export STENCIL_INDEX() => u64           = 0x1901
export DEPTH_COMPONENT() => u64         = 0x1902
export RED() => u64                     = 0x1903
export GREEN() => u64                   = 0x1904
export BLUE() => u64                    = 0x1905
export ALPHA() => u64                   = 0x1906
export RGB() => u64                     = 0x1907
export RGBA() => u64                    = 0x1908
export POINT() => u64                   = 0x1B00
export LINE() => u64                    = 0x1B01
export FILL() => u64                    = 0x1B02
export KEEP() => u64                    = 0x1E00
export REPLACE() => u64                 = 0x1E01
export INCR() => u64                    = 0x1E02
export DECR() => u64                    = 0x1E03
export VENDOR() => u64                  = 0x1F00
export RENDERER() => u64                = 0x1F01
export VERSION() => u64                 = 0x1F02
export EXTENSIONS() => u64              = 0x1F03
export NEAREST() => u64                 = 0x2600
export LINEAR() => u64                  = 0x2601
export NEAREST_MIPMAP_NEAREST() => u64  = 0x2700
export LINEAR_MIPMAP_NEAREST() => u64   = 0x2701
export NEAREST_MIPMAP_LINEAR() => u64   = 0x2702
export LINEAR_MIPMAP_LINEAR() => u64    = 0x2703
export TEXTURE_MAG_FILTER() => u64      = 0x2800
export TEXTURE_MIN_FILTER() => u64      = 0x2801
export TEXTURE_WRAP_S() => u64          = 0x2802
export TEXTURE_WRAP_T() => u64          = 0x2803
export REPEAT() => u64                  = 0x2901

type PFNGLCULLFACEPROC = [(GLenum mode)]
type PFNGLFRONTFACEPROC = [(GLenum mode)]
type PFNGLHINTPROC = [(GLenum target, GLenum mode)]
type PFNGLLINEWIDTHPROC = [(GLfloat width)]
type PFNGLPOINTSIZEPROC = [(GLfloat size)]
type PFNGLPOLYGONMODEPROC = [(GLenum face, GLenum mode)]
type PFNGLSCISSORPROC = [(GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLTEXPARAMETERFPROC = [(GLenum target, GLenum pname, GLfloat param)]
type PFNGLTEXPARAMETERFVPROC = [(GLenum target, GLenum pname, [GLfloat] params)]
type PFNGLTEXPARAMETERIPROC = [(GLenum target, GLenum pname, GLint param)]
type PFNGLTEXPARAMETERIVPROC = [(GLenum target, GLenum pname, [GLint] params)]
type PFNGLTEXIMAGE1DPROC = [(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, [] pixels)]
type PFNGLTEXIMAGE2DPROC = [(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [] pixels)]
type PFNGLDRAWBUFFERPROC = [(GLenum buf)]
type PFNGLCLEARPROC = [(GLbitfield mask)]
type PFNGLCLEARCOLORPROC = [(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)]
type PFNGLCLEARSTENCILPROC = [(GLint s)]
type PFNGLCLEARDEPTHPROC = [(GLdouble depth)]
type PFNGLSTENCILMASKPROC = [(GLuint mask)]
type PFNGLCOLORMASKPROC = [(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)]
type PFNGLDEPTHMASKPROC = [(GLboolean flag)]
type PFNGLDISABLEPROC = [(GLenum cap)]
type PFNGLENABLEPROC = [(GLenum cap)]
type PFNGLFINISHPROC = [()]
type PFNGLFLUSHPROC = [()]
type PFNGLBLENDFUNCPROC = [(GLenum sfactor, GLenum dfactor)]
type PFNGLLOGICOPPROC = [(GLenum opcode)]
type PFNGLSTENCILFUNCPROC = [(GLenum func, GLint ref, GLuint mask)]
type PFNGLSTENCILOPPROC = [(GLenum fail, GLenum zfail, GLenum zpass)]
type PFNGLDEPTHFUNCPROC = [(GLenum func)]
type PFNGLPIXELSTOREFPROC = [(GLenum pname, GLfloat param)]
type PFNGLPIXELSTOREIPROC = [(GLenum pname, GLint param)]
type PFNGLREADBUFFERPROC = [(GLenum src)]
type PFNGLREADPIXELSPROC = [(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)]
type PFNGLGETBOOLEANVPROC = [(GLenum pname, [GLboolean] data)]
type PFNGLGETDOUBLEVPROC = [(GLenum pname, [GLdouble] data)]
type PFNGLGETERRORPROC = [() => GLenum]
type PFNGLGETFLOATVPROC = [(GLenum pname, [GLfloat] data)]
type PFNGLGETINTEGERVPROC = [(GLenum pname, [GLint] data)]
type PFNGLGETSTRINGPROC = [(GLenum name) => [GLubyte]]
type PFNGLGETTEXIMAGEPROC = [(GLenum target, GLint level, GLenum format, GLenum type, [] pixels)]
type PFNGLGETTEXPARAMETERFVPROC = [(GLenum target, GLenum pname, [GLfloat] params)]
type PFNGLGETTEXPARAMETERIVPROC = [(GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETTEXLEVELPARAMETERFVPROC = [(GLenum target, GLint level, GLenum pname, [GLfloat] params)]
type PFNGLGETTEXLEVELPARAMETERIVPROC = [(GLenum target, GLint level, GLenum pname, [GLint] params)]
type PFNGLISENABLEDPROC = [(GLenum cap) => GLboolean]
type PFNGLDEPTHRANGEPROC = [(GLdouble n, GLdouble f)]
type PFNGLVIEWPORTPROC = [(GLint x, GLint y, GLsizei width, GLsizei height)]

extern glCullFace(GLenum mode)
extern glFrontFace(GLenum mode)
extern glHint(GLenum target, GLenum mode)
extern glLineWidth(GLfloat width)
extern glPointSize(GLfloat size)
extern glPolygonMode(GLenum face, GLenum mode)
extern glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
extern glTexParameterf(GLenum target, GLenum pname, GLfloat param)
extern glTexParameterfv(GLenum target, GLenum pname, [GLfloat] params)
extern glTexParameteri(GLenum target, GLenum pname, GLint param)
extern glTexParameteriv(GLenum target, GLenum pname, [GLint] params)
extern glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, [] pixels)
extern glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [] pixels)
extern glDrawBuffer(GLenum buf)
extern glClear(GLbitfield mask)
extern glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
extern glClearStencil(GLint s)
extern glClearDepth(GLdouble depth)
extern glStencilMask(GLuint mask)
extern glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
extern glDepthMask(GLboolean flag)
extern glDisable(GLenum cap)
extern glEnable(GLenum cap)
extern glFinish()
extern glFlush()
extern glBlendFunc(GLenum sfactor, GLenum dfactor)
extern glLogicOp(GLenum opcode)
extern glStencilFunc(GLenum func, GLint ref, GLuint mask)
extern glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
extern glDepthFunc(GLenum func)
extern glPixelStoref(GLenum pname, GLfloat param)
extern glPixelStorei(GLenum pname, GLint param)
extern glReadBuffer(GLenum src)
extern glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)
extern glGetBooleanv(GLenum pname, [GLboolean] data)
extern glGetDoublev(GLenum pname, [GLdouble] data)
extern glGetError() => GLenum
extern glGetFloatv(GLenum pname, [GLfloat] data)
extern glGetIntegerv(GLenum pname, [GLint] data)
extern glGetString(GLenum name) => [GLubyte]
extern glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, [] pixels)
extern glGetTexParameterfv(GLenum target, GLenum pname, [GLfloat] params)
extern glGetTexParameteriv(GLenum target, GLenum pname, [GLint] params)
extern glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, [GLfloat] params)
extern glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, [GLint] params)
extern glIsEnabled(GLenum cap) => GLboolean
extern glDepthRange(GLdouble n, GLdouble f)
extern glViewport(GLint x, GLint y, GLsizei width, GLsizei height)

type GLclampf = f32
type GLclampd = f64

export COLOR_LOGIC_OP() => u64                 = 0x0BF2
export POLYGON_OFFSET_UNITS() => u64           = 0x2A00
export POLYGON_OFFSET_POINT() => u64           = 0x2A01
export POLYGON_OFFSET_LINE() => u64            = 0x2A02
export POLYGON_OFFSET_FILL() => u64            = 0x8037
export POLYGON_OFFSET_FACTOR() => u64          = 0x8038
export TEXTURE_BINDING_1D() => u64             = 0x8068
export TEXTURE_BINDING_2D() => u64             = 0x8069
export TEXTURE_INTERNAL_FORMAT() => u64        = 0x1003
export TEXTURE_RED_SIZE() => u64               = 0x805C
export TEXTURE_GREEN_SIZE() => u64             = 0x805D
export TEXTURE_BLUE_SIZE() => u64              = 0x805E
export TEXTURE_ALPHA_SIZE() => u64             = 0x805F
export DOUBLE() => u64                         = 0x140A
export PROXY_TEXTURE_1D() => u64               = 0x8063
export PROXY_TEXTURE_2D() => u64               = 0x8064
export R3_G3_B2() => u64                       = 0x2A10
export RGB4() => u64                           = 0x804F
export RGB5() => u64                           = 0x8050
export RGB8() => u64                           = 0x8051
export RGB10() => u64                          = 0x8052
export RGB12() => u64                          = 0x8053
export RGB16() => u64                          = 0x8054
export RGBA2() => u64                          = 0x8055
export RGBA4() => u64                          = 0x8056
export RGB5_A1() => u64                        = 0x8057
export RGBA8() => u64                          = 0x8058
export RGB10_A2() => u64                       = 0x8059
export RGBA12() => u64                         = 0x805A
export RGBA16() => u64                         = 0x805B
export VERTEX_ARRAY() => u64                   = 0x8074

type PFNGLDRAWARRAYSPROC = [(GLenum mode, GLint first, GLsizei count)]
type PFNGLDRAWELEMENTSPROC = [(GLenum mode, GLsizei count, GLenum type, [] indices)]
type PFNGLGETPOINTERVPROC = [(GLenum pname, [[]] params)]
type PFNGLPOLYGONOFFSETPROC = [(GLfloat factor, GLfloat units)]
type PFNGLCOPYTEXIMAGE1DPROC = [(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)]
type PFNGLCOPYTEXIMAGE2DPROC = [(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)]
type PFNGLCOPYTEXSUBIMAGE1DPROC = [(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)]
type PFNGLCOPYTEXSUBIMAGE2DPROC = [(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLTEXSUBIMAGE1DPROC = [(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels)]
type PFNGLTEXSUBIMAGE2DPROC = [(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)]
type PFNGLBINDTEXTUREPROC = [(GLenum target, GLuint texture)]
type PFNGLDELETETEXTURESPROC = [(GLsizei n, [GLuint] textures)]
type PFNGLGENTEXTURESPROC = [(GLsizei n, [GLuint] textures)]
type PFNGLISTEXTUREPROC = [(GLuint texture) => GLboolean]

extern glDrawArrays(GLenum mode, GLint first, GLsizei count)
extern glDrawElements(GLenum mode, GLsizei count, GLenum type, [] indices)
extern glGetPointerv(GLenum pname, [[]] params)
extern glPolygonOffset(GLfloat factor, GLfloat units)
extern glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
extern glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
extern glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
extern glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
extern glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels)
extern glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)
extern glBindTexture(GLenum target, GLuint texture)
extern glDeleteTextures(GLsizei n, [GLuint] textures)
extern glGenTextures(GLsizei n, [GLuint] textures)
extern glIsTexture(GLuint texture) => GLboolean

export UNSIGNED_BYTE_3_3_2() => u64            = 0x8032
export UNSIGNED_SHORT_4_4_4_4() => u64         = 0x8033
export UNSIGNED_SHORT_5_5_5_1() => u64         = 0x8034
export UNSIGNED_INT_8_8_8_8() => u64           = 0x8035
export UNSIGNED_INT_10_10_10_2() => u64        = 0x8036
export TEXTURE_BINDING_3D() => u64             = 0x806A
export PACK_SKIP_IMAGES() => u64               = 0x806B
export PACK_IMAGE_HEIGHT() => u64              = 0x806C
export UNPACK_SKIP_IMAGES() => u64             = 0x806D
export UNPACK_IMAGE_HEIGHT() => u64            = 0x806E
export TEXTURE_3D() => u64                     = 0x806F
export PROXY_TEXTURE_3D() => u64               = 0x8070
export TEXTURE_DEPTH() => u64                  = 0x8071
export TEXTURE_WRAP_R() => u64                 = 0x8072
export MAX_3D_TEXTURE_SIZE() => u64            = 0x8073
export UNSIGNED_BYTE_2_3_3_REV() => u64        = 0x8362
export UNSIGNED_SHORT_5_6_5() => u64           = 0x8363
export UNSIGNED_SHORT_5_6_5_REV() => u64       = 0x8364
export UNSIGNED_SHORT_4_4_4_4_REV() => u64     = 0x8365
export UNSIGNED_SHORT_1_5_5_5_REV() => u64     = 0x8366
export UNSIGNED_INT_8_8_8_8_REV() => u64       = 0x8367
export UNSIGNED_INT_2_10_10_10_REV() => u64    = 0x8368
export BGR() => u64                            = 0x80E0
export BGRA() => u64                           = 0x80E1
export MAX_ELEMENTS_VERTICES() => u64          = 0x80E8
export MAX_ELEMENTS_INDICES() => u64           = 0x80E9
export CLAMP_TO_EDGE() => u64                  = 0x812F
export TEXTURE_MIN_LOD() => u64                = 0x813A
export TEXTURE_MAX_LOD() => u64                = 0x813B
export TEXTURE_BASE_LEVEL() => u64             = 0x813C
export TEXTURE_MAX_LEVEL() => u64              = 0x813D
export SMOOTH_POINT_SIZE_RANGE() => u64        = 0x0B12
export SMOOTH_POINT_SIZE_GRANULARITY() => u64  = 0x0B13
export SMOOTH_LINE_WIDTH_RANGE() => u64        = 0x0B22
export SMOOTH_LINE_WIDTH_GRANULARITY() => u64  = 0x0B23
export ALIASED_LINE_WIDTH_RANGE() => u64       = 0x846E

type PFNGLDRAWRANGEELEMENTSPROC = [(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, [] indices)]
type PFNGLTEXIMAGE3DPROC = [(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [] pixels)]
type PFNGLTEXSUBIMAGE3DPROC = [(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels)]
type PFNGLCOPYTEXSUBIMAGE3DPROC = [(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)]

extern glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, [] indices)
extern glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [] pixels)
extern glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels)
extern glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)

export TEXTURE0() => u64                       = 0x84C0
export TEXTURE1() => u64                       = 0x84C1
export TEXTURE2() => u64                       = 0x84C2
export TEXTURE3() => u64                       = 0x84C3
export TEXTURE4() => u64                       = 0x84C4
export TEXTURE5() => u64                       = 0x84C5
export TEXTURE6() => u64                       = 0x84C6
export TEXTURE7() => u64                       = 0x84C7
export TEXTURE8() => u64                       = 0x84C8
export TEXTURE9() => u64                       = 0x84C9
export TEXTURE10() => u64                      = 0x84CA
export TEXTURE11() => u64                      = 0x84CB
export TEXTURE12() => u64                      = 0x84CC
export TEXTURE13() => u64                      = 0x84CD
export TEXTURE14() => u64                      = 0x84CE
export TEXTURE15() => u64                      = 0x84CF
export TEXTURE16() => u64                      = 0x84D0
export TEXTURE17() => u64                      = 0x84D1
export TEXTURE18() => u64                      = 0x84D2
export TEXTURE19() => u64                      = 0x84D3
export TEXTURE20() => u64                      = 0x84D4
export TEXTURE21() => u64                      = 0x84D5
export TEXTURE22() => u64                      = 0x84D6
export TEXTURE23() => u64                      = 0x84D7
export TEXTURE24() => u64                      = 0x84D8
export TEXTURE25() => u64                      = 0x84D9
export TEXTURE26() => u64                      = 0x84DA
export TEXTURE27() => u64                      = 0x84DB
export TEXTURE28() => u64                      = 0x84DC
export TEXTURE29() => u64                      = 0x84DD
export TEXTURE30() => u64                      = 0x84DE
export TEXTURE31() => u64                      = 0x84DF
export ACTIVE_TEXTURE() => u64                 = 0x84E0
export MULTISAMPLE() => u64                    = 0x809D
export SAMPLE_ALPHA_TO_COVERAGE() => u64       = 0x809E
export SAMPLE_ALPHA_TO_ONE() => u64            = 0x809F
export SAMPLE_COVERAGE() => u64                = 0x80A0
export SAMPLE_BUFFERS() => u64                 = 0x80A8
export SAMPLES() => u64                        = 0x80A9
export SAMPLE_COVERAGE_VALUE() => u64          = 0x80AA
export SAMPLE_COVERAGE_INVERT() => u64         = 0x80AB
export TEXTURE_CUBE_MAP() => u64               = 0x8513
export TEXTURE_BINDING_CUBE_MAP() => u64       = 0x8514
export TEXTURE_CUBE_MAP_POSITIVE_X() => u64    = 0x8515
export TEXTURE_CUBE_MAP_NEGATIVE_X() => u64    = 0x8516
export TEXTURE_CUBE_MAP_POSITIVE_Y() => u64    = 0x8517
export TEXTURE_CUBE_MAP_NEGATIVE_Y() => u64    = 0x8518
export TEXTURE_CUBE_MAP_POSITIVE_Z() => u64    = 0x8519
export TEXTURE_CUBE_MAP_NEGATIVE_Z() => u64    = 0x851A
export PROXY_TEXTURE_CUBE_MAP() => u64         = 0x851B
export MAX_CUBE_MAP_TEXTURE_SIZE() => u64      = 0x851C
export COMPRESSED_RGB() => u64                 = 0x84ED
export COMPRESSED_RGBA() => u64                = 0x84EE
export TEXTURE_COMPRESSION_HINT() => u64       = 0x84EF
export TEXTURE_COMPRESSED_IMAGE_SIZE() => u64  = 0x86A0
export TEXTURE_COMPRESSED() => u64             = 0x86A1
export NUM_COMPRESSED_TEXTURE_FORMATS() => u64 = 0x86A2
export COMPRESSED_TEXTURE_FORMATS() => u64     = 0x86A3
export CLAMP_TO_BORDER() => u64                = 0x812D

type PFNGLACTIVETEXTUREPROC = [(GLenum texture)]
type PFNGLSAMPLECOVERAGEPROC = [(GLfloat value, GLboolean invert)]
type PFNGLCOMPRESSEDTEXIMAGE3DPROC = [(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, [] data)]
type PFNGLCOMPRESSEDTEXIMAGE2DPROC = [(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, [] data)]
type PFNGLCOMPRESSEDTEXIMAGE1DPROC = [(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, [] data)]
type PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = [(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] data)]
type PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = [(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] data)]
type PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = [(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] data)]
type PFNGLGETCOMPRESSEDTEXIMAGEPROC = [(GLenum target, GLint level, [] img)]

extern glActiveTexture(GLenum texture)
extern glSampleCoverage(GLfloat value, GLboolean invert)
extern glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, [] data)
extern glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, [] data)
extern glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, [] data)
extern glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] data)
extern glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] data)
extern glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] data)
extern glGetCompressedTexImage(GLenum target, GLint level, [] img)

export BLEND_DST_RGB() => u64                  = 0x80C8
export BLEND_SRC_RGB() => u64                  = 0x80C9
export BLEND_DST_ALPHA() => u64                = 0x80CA
export BLEND_SRC_ALPHA() => u64                = 0x80CB
export POINT_FADE_THRESHOLD_SIZE() => u64      = 0x8128
export DEPTH_COMPONENT16() => u64              = 0x81A5
export DEPTH_COMPONENT24() => u64              = 0x81A6
export DEPTH_COMPONENT32() => u64              = 0x81A7
export MIRRORED_REPEAT() => u64                = 0x8370
export MAX_TEXTURE_LOD_BIAS() => u64           = 0x84FD
export TEXTURE_LOD_BIAS() => u64               = 0x8501
export INCR_WRAP() => u64                      = 0x8507
export DECR_WRAP() => u64                      = 0x8508
export TEXTURE_DEPTH_SIZE() => u64             = 0x884A
export TEXTURE_COMPARE_MODE() => u64           = 0x884C
export TEXTURE_COMPARE_FUNC() => u64           = 0x884D
export BLEND_COLOR() => u64                    = 0x8005
export BLEND_EQUATION() => u64                 = 0x8009
export CONSTANT_COLOR() => u64                 = 0x8001
export ONE_MINUS_CONSTANT_COLOR() => u64       = 0x8002
export CONSTANT_ALPHA() => u64                 = 0x8003
export ONE_MINUS_CONSTANT_ALPHA() => u64       = 0x8004
export FUNC_ADD() => u64                       = 0x8006
export FUNC_REVERSE_SUBTRACT() => u64          = 0x800B
export FUNC_SUBTRACT() => u64                  = 0x800A
export MIN() => u64                            = 0x8007
export MAX() => u64                            = 0x8008

type PFNGLBLENDFUNCSEPARATEPROC = [(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)]
type PFNGLMULTIDRAWARRAYSPROC = [(GLenum mode, [GLint] first, [GLsizei] count, GLsizei drawcount)]
type PFNGLMULTIDRAWELEMENTSPROC = [(GLenum mode, [GLsizei] count, GLenum type, [[]] indices, GLsizei drawcount)]
type PFNGLPOINTPARAMETERFPROC = [(GLenum pname, GLfloat param)]
type PFNGLPOINTPARAMETERFVPROC = [(GLenum pname, [GLfloat] params)]
type PFNGLPOINTPARAMETERIPROC = [(GLenum pname, GLint param)]
type PFNGLPOINTPARAMETERIVPROC = [(GLenum pname, [GLint] params)]
type PFNGLBLENDCOLORPROC = [(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)]
type PFNGLBLENDEQUATIONPROC = [(GLenum mode)]

extern glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
extern glMultiDrawArrays(GLenum mode, [GLint] first, [GLsizei] count, GLsizei drawcount)
extern glMultiDrawElements(GLenum mode, [GLsizei] count, GLenum type, [[]] indices, GLsizei drawcount)
extern glPointParameterf(GLenum pname, GLfloat param)
extern glPointParameterfv(GLenum pname, [GLfloat] params)
extern glPointParameteri(GLenum pname, GLint param)
extern glPointParameteriv(GLenum pname, [GLint] params)
extern glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
extern glBlendEquation(GLenum mode)

type GLsizeiptr = u64
type GLintptr = u32

export BUFFER_SIZE() => u64                    = 0x8764
export BUFFER_USAGE() => u64                   = 0x8765
export QUERY_COUNTER_BITS() => u64             = 0x8864
export CURRENT_QUERY() => u64                  = 0x8865
export QUERY_RESULT() => u64                   = 0x8866
export QUERY_RESULT_AVAILABLE() => u64         = 0x8867
export ARRAY_BUFFER() => u64                   = 0x8892
export ELEMENT_ARRAY_BUFFER() => u64           = 0x8893
export ARRAY_BUFFER_BINDING() => u64           = 0x8894
export ELEMENT_ARRAY_BUFFER_BINDING() => u64   = 0x8895
export VERTEX_ATTRIB_ARRAY_BUFFER_BINDING() => u64 = 0x889F
export READ_ONLY() => u64                      = 0x88B8
export WRITE_ONLY() => u64                     = 0x88B9
export READ_WRITE() => u64                     = 0x88BA
export BUFFER_ACCESS() => u64                  = 0x88BB
export BUFFER_MAPPED() => u64                  = 0x88BC
export BUFFER_MAP_POINTER() => u64             = 0x88BD
export STREAM_DRAW() => u64                    = 0x88E0
export STREAM_READ() => u64                    = 0x88E1
export STREAM_COPY() => u64                    = 0x88E2
export STATIC_DRAW() => u64                    = 0x88E4
export STATIC_READ() => u64                    = 0x88E5
export STATIC_COPY() => u64                    = 0x88E6
export DYNAMIC_DRAW() => u64                   = 0x88E8
export DYNAMIC_READ() => u64                   = 0x88E9
export DYNAMIC_COPY() => u64                   = 0x88EA
export SAMPLES_PASSED() => u64                 = 0x8914
export SRC1_ALPHA() => u64                     = 0x8589

type PFNGLGENQUERIESPROC = [(GLsizei n, [GLuint] ids)]
type PFNGLDELETEQUERIESPROC = [(GLsizei n, [GLuint] ids)]
type PFNGLISQUERYPROC = [(GLuint id) => GLboolean]
type PFNGLBEGINQUERYPROC = [(GLenum target, GLuint id)]
type PFNGLENDQUERYPROC = [(GLenum target)]
type PFNGLGETQUERYIVPROC = [(GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETQUERYOBJECTIVPROC = [(GLuint id, GLenum pname, [GLint] params)]
type PFNGLGETQUERYOBJECTUIVPROC = [(GLuint id, GLenum pname, [GLuint] params)]
type PFNGLBINDBUFFERPROC = [(GLenum target, GLuint buffer)]
type PFNGLDELETEBUFFERSPROC = [(GLsizei n, [GLuint] buffers)]
type PFNGLGENBUFFERSPROC = [(GLsizei n, [GLuint] buffers)]
type PFNGLISBUFFERPROC = [(GLuint buffer) => GLboolean]
type PFNGLBUFFERDATAPROC = [(GLenum target, GLsizeiptr size, [] data, GLenum usage)]
type PFNGLBUFFERSUBDATAPROC = [(GLenum target, GLintptr offset, GLsizeiptr size, [] data)]
type PFNGLGETBUFFERSUBDATAPROC = [(GLenum target, GLintptr offset, GLsizeiptr size, [] data)]
type PFNGLMAPBUFFERPROC = [(GLenum target, GLenum access) => []]
type PFNGLUNMAPBUFFERPROC = [(GLenum target) => GLboolean]
type PFNGLGETBUFFERPARAMETERIVPROC = [(GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETBUFFERPOINTERVPROC = [(GLenum target, GLenum pname, [[]] params)]

extern glGenQueries(GLsizei n, [GLuint] ids)
extern glDeleteQueries(GLsizei n, [GLuint] ids)
extern glIsQuery(GLuint id) => GLboolean
extern glBeginQuery(GLenum target, GLuint id)
extern glEndQuery(GLenum target)
extern glGetQueryiv(GLenum target, GLenum pname, [GLint] params)
extern glGetQueryObjectiv(GLuint id, GLenum pname, [GLint] params)
extern glGetQueryObjectuiv(GLuint id, GLenum pname, [GLuint] params)
extern glBindBuffer(GLenum target, GLuint buffer)
extern glDeleteBuffers(GLsizei n, [GLuint] buffers)
extern glGenBuffers(GLsizei n, [GLuint] buffers)
extern glIsBuffer(GLuint buffer) => GLboolean
extern glBufferData(GLenum target, GLsizeiptr size, [] data, GLenum usage)
extern glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, [] data)
extern glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, [] data)
extern glMapBuffer(GLenum target, GLenum access) => []
extern glUnmapBuffer(GLenum target) => GLboolean
extern glGetBufferParameteriv(GLenum target, GLenum pname, [GLint] params)
extern glGetBufferPointerv(GLenum target, GLenum pname, [[]] params)

type GLchar = i8
type GLshort = i16
type GLbyte = i8
type GLushort = u16

export BLEND_EQUATION_RGB() => u64             = 0x8009
export VERTEX_ATTRIB_ARRAY_ENABLED() => u64    = 0x8622
export VERTEX_ATTRIB_ARRAY_SIZE() => u64       = 0x8623
export VERTEX_ATTRIB_ARRAY_STRIDE() => u64     = 0x8624
export VERTEX_ATTRIB_ARRAY_TYPE() => u64       = 0x8625
export CURRENT_VERTEX_ATTRIB() => u64          = 0x8626
export VERTEX_PROGRAM_POINT_SIZE() => u64      = 0x8642
export VERTEX_ATTRIB_ARRAY_POINTER() => u64    = 0x8645
export STENCIL_BACK_FUNC() => u64              = 0x8800
export STENCIL_BACK_FAIL() => u64              = 0x8801
export STENCIL_BACK_PASS_DEPTH_FAIL() => u64   = 0x8802
export STENCIL_BACK_PASS_DEPTH_PASS() => u64   = 0x8803
export MAX_DRAW_BUFFERS() => u64               = 0x8824
export DRAW_BUFFER0() => u64                   = 0x8825
export DRAW_BUFFER1() => u64                   = 0x8826
export DRAW_BUFFER2() => u64                   = 0x8827
export DRAW_BUFFER3() => u64                   = 0x8828
export DRAW_BUFFER4() => u64                   = 0x8829
export DRAW_BUFFER5() => u64                   = 0x882A
export DRAW_BUFFER6() => u64                   = 0x882B
export DRAW_BUFFER7() => u64                   = 0x882C
export DRAW_BUFFER8() => u64                   = 0x882D
export DRAW_BUFFER9() => u64                   = 0x882E
export DRAW_BUFFER10() => u64                  = 0x882F
export DRAW_BUFFER11() => u64                  = 0x8830
export DRAW_BUFFER12() => u64                  = 0x8831
export DRAW_BUFFER13() => u64                  = 0x8832
export DRAW_BUFFER14() => u64                  = 0x8833
export DRAW_BUFFER15() => u64                  = 0x8834
export BLEND_EQUATION_ALPHA() => u64           = 0x883D
export MAX_VERTEX_ATTRIBS() => u64             = 0x8869
export VERTEX_ATTRIB_ARRAY_NORMALIZED() => u64 = 0x886A
export MAX_TEXTURE_IMAGE_UNITS() => u64        = 0x8872
export FRAGMENT_SHADER() => u64                = 0x8B30
export VERTEX_SHADER() => u64                  = 0x8B31
export MAX_FRAGMENT_UNIFORM_COMPONENTS() => u64 = 0x8B49
export MAX_VERTEX_UNIFORM_COMPONENTS() => u64  = 0x8B4A
export MAX_VARYING_FLOATS() => u64             = 0x8B4B
export MAX_VERTEX_TEXTURE_IMAGE_UNITS() => u64 = 0x8B4C
export MAX_COMBINED_TEXTURE_IMAGE_UNITS() => u64 = 0x8B4D
export SHADER_TYPE() => u64                    = 0x8B4F
export FLOAT_VEC2() => u64                     = 0x8B50
export FLOAT_VEC3() => u64                     = 0x8B51
export FLOAT_VEC4() => u64                     = 0x8B52
export INT_VEC2() => u64                       = 0x8B53
export INT_VEC3() => u64                       = 0x8B54
export INT_VEC4() => u64                       = 0x8B55
export BOOL() => u64                           = 0x8B56
export BOOL_VEC2() => u64                      = 0x8B57
export BOOL_VEC3() => u64                      = 0x8B58
export BOOL_VEC4() => u64                      = 0x8B59
export FLOAT_MAT2() => u64                     = 0x8B5A
export FLOAT_MAT3() => u64                     = 0x8B5B
export FLOAT_MAT4() => u64                     = 0x8B5C
export SAMPLER_1D() => u64                     = 0x8B5D
export SAMPLER_2D() => u64                     = 0x8B5E
export SAMPLER_3D() => u64                     = 0x8B5F
export SAMPLER_CUBE() => u64                   = 0x8B60
export SAMPLER_1D_SHADOW() => u64              = 0x8B61
export SAMPLER_2D_SHADOW() => u64              = 0x8B62
export DELETE_STATUS() => u64                  = 0x8B80
export COMPILE_STATUS() => u64                 = 0x8B81
export LINK_STATUS() => u64                    = 0x8B82
export VALIDATE_STATUS() => u64                = 0x8B83
export INFO_LOG_LENGTH() => u64                = 0x8B84
export ATTACHED_SHADERS() => u64               = 0x8B85
export ACTIVE_UNIFORMS() => u64                = 0x8B86
export ACTIVE_UNIFORM_MAX_LENGTH() => u64      = 0x8B87
export SHADER_SOURCE_LENGTH() => u64           = 0x8B88
export ACTIVE_ATTRIBUTES() => u64              = 0x8B89
export ACTIVE_ATTRIBUTE_MAX_LENGTH() => u64    = 0x8B8A
export FRAGMENT_SHADER_DERIVATIVE_HINT() => u64 = 0x8B8B
export SHADING_LANGUAGE_VERSION() => u64       = 0x8B8C
export CURRENT_PROGRAM() => u64                = 0x8B8D
export POINT_SPRITE_COORD_ORIGIN() => u64      = 0x8CA0
export LOWER_LEFT() => u64                     = 0x8CA1
export UPPER_LEFT() => u64                     = 0x8CA2
export STENCIL_BACK_REF() => u64               = 0x8CA3
export STENCIL_BACK_VALUE_MASK() => u64        = 0x8CA4
export STENCIL_BACK_WRITEMASK() => u64         = 0x8CA5

type PFNGLBLENDEQUATIONSEPARATEPROC = [(GLenum modeRGB, GLenum modeAlpha)]
type PFNGLDRAWBUFFERSPROC = [(GLsizei n, [GLenum] bufs)]
type PFNGLSTENCILOPSEPARATEPROC = [(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)]
type PFNGLSTENCILFUNCSEPARATEPROC = [(GLenum face, GLenum func, GLint ref, GLuint mask)]
type PFNGLSTENCILMASKSEPARATEPROC = [(GLenum face, GLuint mask)]
type PFNGLATTACHSHADERPROC = [(GLuint program, GLuint shader)]
type PFNGLBINDATTRIBLOCATIONPROC = [(GLuint program, GLuint index, [GLchar] name)]
type PFNGLCOMPILESHADERPROC = [(GLuint shader)]
type PFNGLCREATEPROGRAMPROC = [() => GLuint]
type PFNGLCREATESHADERPROC = [(GLenum type) => GLuint]
type PFNGLDELETEPROGRAMPROC = [(GLuint program)]
type PFNGLDELETESHADERPROC = [(GLuint shader)]
type PFNGLDETACHSHADERPROC = [(GLuint program, GLuint shader)]
type PFNGLDISABLEVERTEXATTRIBARRAYPROC = [(GLuint index)]
type PFNGLENABLEVERTEXATTRIBARRAYPROC = [(GLuint index)]
type PFNGLGETACTIVEATTRIBPROC = [(GLuint program, GLuint index, GLsizei bufSize, [GLsizei] length, [GLint] size, [GLenum] type, [GLchar] name)]
type PFNGLGETACTIVEUNIFORMPROC = [(GLuint program, GLuint index, GLsizei bufSize, [GLsizei] length, [GLint] size, [GLenum] type, [GLchar] name)]
type PFNGLGETATTACHEDSHADERSPROC = [(GLuint program, GLsizei maxCount, [GLsizei] count, [GLuint] shaders)]
type PFNGLGETATTRIBLOCATIONPROC = [(GLuint program, [GLchar] name) => GLint]
type PFNGLGETPROGRAMIVPROC = [(GLuint program, GLenum pname, [GLint] params)]
type PFNGLGETPROGRAMINFOLOGPROC = [(GLuint program, GLsizei bufSize, [GLsizei] length, [GLchar] infoLog)]
type PFNGLGETSHADERIVPROC = [(GLuint shader, GLenum pname, [GLint] params)]
type PFNGLGETSHADERINFOLOGPROC = [(GLuint shader, GLsizei bufSize, [GLsizei] length, [GLchar] infoLog)]
type PFNGLGETSHADERSOURCEPROC = [(GLuint shader, GLsizei bufSize, [GLsizei] length, [GLchar] source)]
type PFNGLGETUNIFORMLOCATIONPROC = [(GLuint program, [GLchar] name) => GLint]
type PFNGLGETUNIFORMFVPROC = [(GLuint program, GLint location, [GLfloat] params)]
type PFNGLGETUNIFORMIVPROC = [(GLuint program, GLint location, [GLint] params)]
type PFNGLGETVERTEXATTRIBDVPROC = [(GLuint index, GLenum pname, [GLdouble] params)]
type PFNGLGETVERTEXATTRIBFVPROC = [(GLuint index, GLenum pname, [GLfloat] params)]
type PFNGLGETVERTEXATTRIBIVPROC = [(GLuint index, GLenum pname, [GLint] params)]
type PFNGLGETVERTEXATTRIBPOINTERVPROC = [(GLuint index, GLenum pname, [[]] pointer)]
type PFNGLISPROGRAMPROC = [(GLuint program) => GLboolean]
type PFNGLISSHADERPROC = [(GLuint shader) => GLboolean]
type PFNGLLINKPROGRAMPROC = [(GLuint program)]
type PFNGLSHADERSOURCEPROC = [(GLuint shader, GLsizei count, [[GLchar]] string, [GLint] length)]
type PFNGLUSEPROGRAMPROC = [(GLuint program)]
type PFNGLUNIFORM1FPROC = [(GLint location, GLfloat v0)]
type PFNGLUNIFORM2FPROC = [(GLint location, GLfloat v0, GLfloat v1)]
type PFNGLUNIFORM3FPROC = [(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)]
type PFNGLUNIFORM4FPROC = [(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)]
type PFNGLUNIFORM1IPROC = [(GLint location, GLint v0)]
type PFNGLUNIFORM2IPROC = [(GLint location, GLint v0, GLint v1)]
type PFNGLUNIFORM3IPROC = [(GLint location, GLint v0, GLint v1, GLint v2)]
type PFNGLUNIFORM4IPROC = [(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)]
type PFNGLUNIFORM1FVPROC = [(GLint location, GLsizei count, [GLfloat] value)]
type PFNGLUNIFORM2FVPROC = [(GLint location, GLsizei count, [GLfloat] value)]
type PFNGLUNIFORM3FVPROC = [(GLint location, GLsizei count, [GLfloat] value)]
type PFNGLUNIFORM4FVPROC = [(GLint location, GLsizei count, [GLfloat] value)]
type PFNGLUNIFORM1IVPROC = [(GLint location, GLsizei count, [GLint] value)]
type PFNGLUNIFORM2IVPROC = [(GLint location, GLsizei count, [GLint] value)]
type PFNGLUNIFORM3IVPROC = [(GLint location, GLsizei count, [GLint] value)]
type PFNGLUNIFORM4IVPROC = [(GLint location, GLsizei count, [GLint] value)]
type PFNGLUNIFORMMATRIX2FVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLUNIFORMMATRIX3FVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLUNIFORMMATRIX4FVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLVALIDATEPROGRAMPROC = [(GLuint program)]
type PFNGLVERTEXATTRIB1DPROC = [(GLuint index, GLdouble x)]
type PFNGLVERTEXATTRIB1DVPROC = [(GLuint index, [GLdouble] v)]
type PFNGLVERTEXATTRIB1FPROC = [(GLuint index, GLfloat x)]
type PFNGLVERTEXATTRIB1FVPROC = [(GLuint index, [GLfloat] v)]
type PFNGLVERTEXATTRIB1SPROC = [(GLuint index, GLshort x)]
type PFNGLVERTEXATTRIB1SVPROC = [(GLuint index, [GLshort] v)]
type PFNGLVERTEXATTRIB2DPROC = [(GLuint index, GLdouble x, GLdouble y)]
type PFNGLVERTEXATTRIB2DVPROC = [(GLuint index, [GLdouble] v)]
type PFNGLVERTEXATTRIB2FPROC = [(GLuint index, GLfloat x, GLfloat y)]
type PFNGLVERTEXATTRIB2FVPROC = [(GLuint index, [GLfloat] v)]
type PFNGLVERTEXATTRIB2SPROC = [(GLuint index, GLshort x, GLshort y)]
type PFNGLVERTEXATTRIB2SVPROC = [(GLuint index, [GLshort] v)]
type PFNGLVERTEXATTRIB3DPROC = [(GLuint index, GLdouble x, GLdouble y, GLdouble z)]
type PFNGLVERTEXATTRIB3DVPROC = [(GLuint index, [GLdouble] v)]
type PFNGLVERTEXATTRIB3FPROC = [(GLuint index, GLfloat x, GLfloat y, GLfloat z)]
type PFNGLVERTEXATTRIB3FVPROC = [(GLuint index, [GLfloat] v)]
type PFNGLVERTEXATTRIB3SPROC = [(GLuint index, GLshort x, GLshort y, GLshort z)]
type PFNGLVERTEXATTRIB3SVPROC = [(GLuint index, [GLshort] v)]
type PFNGLVERTEXATTRIB4NBVPROC = [(GLuint index, [GLbyte] v)]
type PFNGLVERTEXATTRIB4NIVPROC = [(GLuint index, [GLint] v)]
type PFNGLVERTEXATTRIB4NSVPROC = [(GLuint index, [GLshort] v)]
type PFNGLVERTEXATTRIB4NUBPROC = [(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)]
type PFNGLVERTEXATTRIB4NUBVPROC = [(GLuint index, [GLubyte] v)]
type PFNGLVERTEXATTRIB4NUIVPROC = [(GLuint index, [GLuint] v)]
type PFNGLVERTEXATTRIB4NUSVPROC = [(GLuint index, [GLushort] v)]
type PFNGLVERTEXATTRIB4BVPROC = [(GLuint index, [GLbyte] v)]
type PFNGLVERTEXATTRIB4DPROC = [(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)]
type PFNGLVERTEXATTRIB4DVPROC = [(GLuint index, [GLdouble] v)]
type PFNGLVERTEXATTRIB4FPROC = [(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)]
type PFNGLVERTEXATTRIB4FVPROC = [(GLuint index, [GLfloat] v)]
type PFNGLVERTEXATTRIB4IVPROC = [(GLuint index, [GLint] v)]
type PFNGLVERTEXATTRIB4SPROC = [(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)]
type PFNGLVERTEXATTRIB4SVPROC = [(GLuint index, [GLshort] v)]
type PFNGLVERTEXATTRIB4UBVPROC = [(GLuint index, [GLubyte] v)]
type PFNGLVERTEXATTRIB4UIVPROC = [(GLuint index, [GLuint] v)]
type PFNGLVERTEXATTRIB4USVPROC = [(GLuint index, [GLushort] v)]
type PFNGLVERTEXATTRIBPOINTERPROC = [(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, [] pointer)]

extern glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
extern glDrawBuffers(GLsizei n, [GLenum] bufs)
extern glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
extern glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
extern glStencilMaskSeparate(GLenum face, GLuint mask)
extern glAttachShader(GLuint program, GLuint shader)
extern glBindAttribLocation(GLuint program, GLuint index, [GLchar] name)
extern glCompileShader(GLuint shader)
extern glCreateProgram() => GLuint
extern glCreateShader(GLenum type) => GLuint
extern glDeleteProgram(GLuint program)
extern glDeleteShader(GLuint shader)
extern glDetachShader(GLuint program, GLuint shader)
extern glDisableVertexAttribArray(GLuint index)
extern glEnableVertexAttribArray(GLuint index)
extern glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [GLsizei] length, [GLint] size, [GLenum] type, [GLchar] name)
extern glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [GLsizei] length, [GLint] size, [GLenum] type, [GLchar] name)
extern glGetAttachedShaders(GLuint program, GLsizei maxCount, [GLsizei] count, [GLuint] shaders)
extern glGetAttribLocation(GLuint program, [GLchar] name) => GLint
extern glGetProgramiv(GLuint program, GLenum pname, [GLint] params)
extern glGetProgramInfoLog(GLuint program, GLsizei bufSize, [GLsizei] length, [GLchar] infoLog)
extern glGetShaderiv(GLuint shader, GLenum pname, [GLint] params)
extern glGetShaderInfoLog(GLuint shader, GLsizei bufSize, [GLsizei] length, [GLchar] infoLog)
extern glGetShaderSource(GLuint shader, GLsizei bufSize, [GLsizei] length, [GLchar] source)
extern glGetUniformLocation(GLuint program, [GLchar] name) => GLint
extern glGetUniformfv(GLuint program, GLint location, [GLfloat] params)
extern glGetUniformiv(GLuint program, GLint location, [GLint] params)
extern glGetVertexAttribdv(GLuint index, GLenum pname, [GLdouble] params)
extern glGetVertexAttribfv(GLuint index, GLenum pname, [GLfloat] params)
extern glGetVertexAttribiv(GLuint index, GLenum pname, [GLint] params)
extern glGetVertexAttribPointerv(GLuint index, GLenum pname, [[]] pointer)
extern glIsProgram(GLuint program) => GLboolean
extern glIsShader(GLuint shader) => GLboolean
extern glLinkProgram(GLuint program)
extern glShaderSource(GLuint shader, GLsizei count, [[GLchar]] string, [GLint] length)
extern glUseProgram(GLuint program)
extern glUniform1f(GLint location, GLfloat v0)
extern glUniform2f(GLint location, GLfloat v0, GLfloat v1)
extern glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
extern glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
extern glUniform1i(GLint location, GLint v0)
extern glUniform2i(GLint location, GLint v0, GLint v1)
extern glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
extern glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
extern glUniform1fv(GLint location, GLsizei count, [GLfloat] value)
extern glUniform2fv(GLint location, GLsizei count, [GLfloat] value)
extern glUniform3fv(GLint location, GLsizei count, [GLfloat] value)
extern glUniform4fv(GLint location, GLsizei count, [GLfloat] value)
extern glUniform1iv(GLint location, GLsizei count, [GLint] value)
extern glUniform2iv(GLint location, GLsizei count, [GLint] value)
extern glUniform3iv(GLint location, GLsizei count, [GLint] value)
extern glUniform4iv(GLint location, GLsizei count, [GLint] value)
extern glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glValidateProgram(GLuint program)
extern glVertexAttrib1d(GLuint index, GLdouble x)
extern glVertexAttrib1dv(GLuint index, [GLdouble] v)
extern glVertexAttrib1f(GLuint index, GLfloat x)
extern glVertexAttrib1fv(GLuint index, [GLfloat] v)
extern glVertexAttrib1s(GLuint index, GLshort x)
extern glVertexAttrib1sv(GLuint index, [GLshort] v)
extern glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
extern glVertexAttrib2dv(GLuint index, [GLdouble] v)
extern glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
extern glVertexAttrib2fv(GLuint index, [GLfloat] v)
extern glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
extern glVertexAttrib2sv(GLuint index, [GLshort] v)
extern glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
extern glVertexAttrib3dv(GLuint index, [GLdouble] v)
extern glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
extern glVertexAttrib3fv(GLuint index, [GLfloat] v)
extern glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
extern glVertexAttrib3sv(GLuint index, [GLshort] v)
extern glVertexAttrib4Nbv(GLuint index, [GLbyte] v)
extern glVertexAttrib4Niv(GLuint index, [GLint] v)
extern glVertexAttrib4Nsv(GLuint index, [GLshort] v)
extern glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
extern glVertexAttrib4Nubv(GLuint index, [GLubyte] v)
extern glVertexAttrib4Nuiv(GLuint index, [GLuint] v)
extern glVertexAttrib4Nusv(GLuint index, [GLushort] v)
extern glVertexAttrib4bv(GLuint index, [GLbyte] v)
extern glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
extern glVertexAttrib4dv(GLuint index, [GLdouble] v)
extern glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
extern glVertexAttrib4fv(GLuint index, [GLfloat] v)
extern glVertexAttrib4iv(GLuint index, [GLint] v)
extern glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
extern glVertexAttrib4sv(GLuint index, [GLshort] v)
extern glVertexAttrib4ubv(GLuint index, [GLubyte] v)
extern glVertexAttrib4uiv(GLuint index, [GLuint] v)
extern glVertexAttrib4usv(GLuint index, [GLushort] v)
extern glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, [] pointer)

export PIXEL_PACK_BUFFER() => u64              = 0x88EB
export PIXEL_UNPACK_BUFFER() => u64            = 0x88EC
export PIXEL_PACK_BUFFER_BINDING() => u64      = 0x88ED
export PIXEL_UNPACK_BUFFER_BINDING() => u64    = 0x88EF
export FLOAT_MAT2x3() => u64                   = 0x8B65
export FLOAT_MAT2x4() => u64                   = 0x8B66
export FLOAT_MAT3x2() => u64                   = 0x8B67
export FLOAT_MAT3x4() => u64                   = 0x8B68
export FLOAT_MAT4x2() => u64                   = 0x8B69
export FLOAT_MAT4x3() => u64                   = 0x8B6A
export SRGB() => u64                           = 0x8C40
export SRGB8() => u64                          = 0x8C41
export SRGB_ALPHA() => u64                     = 0x8C42
export SRGB8_ALPHA8() => u64                   = 0x8C43
export COMPRESSED_SRGB() => u64                = 0x8C48
export COMPRESSED_SRGB_ALPHA() => u64          = 0x8C49

type PFNGLUNIFORMMATRIX2X3FVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLUNIFORMMATRIX3X2FVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLUNIFORMMATRIX2X4FVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLUNIFORMMATRIX4X2FVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLUNIFORMMATRIX3X4FVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLUNIFORMMATRIX4X3FVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]

extern glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)

type GLhalf = u16

export COMPARE_REF_TO_TEXTURE() => u64         = 0x884E
export CLIP_DISTANCE0() => u64                 = 0x3000
export CLIP_DISTANCE1() => u64                 = 0x3001
export CLIP_DISTANCE2() => u64                 = 0x3002
export CLIP_DISTANCE3() => u64                 = 0x3003
export CLIP_DISTANCE4() => u64                 = 0x3004
export CLIP_DISTANCE5() => u64                 = 0x3005
export CLIP_DISTANCE6() => u64                 = 0x3006
export CLIP_DISTANCE7() => u64                 = 0x3007
export MAX_CLIP_DISTANCES() => u64             = 0x0D32
export MAJOR_VERSION() => u64                  = 0x821B
export MINOR_VERSION() => u64                  = 0x821C
export NUM_EXTENSIONS() => u64                 = 0x821D
export CONTEXT_FLAGS() => u64                  = 0x821E
export COMPRESSED_RED() => u64                 = 0x8225
export COMPRESSED_RG() => u64                  = 0x8226
export CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT() => u64 = 0x00000001
export RGBA32F() => u64                        = 0x8814
export RGB32F() => u64                         = 0x8815
export RGBA16F() => u64                        = 0x881A
export RGB16F() => u64                         = 0x881B
export VERTEX_ATTRIB_ARRAY_INTEGER() => u64    = 0x88FD
export MAX_ARRAY_TEXTURE_LAYERS() => u64       = 0x88FF
export MIN_PROGRAM_TEXEL_OFFSET() => u64       = 0x8904
export MAX_PROGRAM_TEXEL_OFFSET() => u64       = 0x8905
export CLAMP_READ_COLOR() => u64               = 0x891C
export FIXED_ONLY() => u64                     = 0x891D
export MAX_VARYING_COMPONENTS() => u64         = 0x8B4B
export TEXTURE_1D_ARRAY() => u64               = 0x8C18
export PROXY_TEXTURE_1D_ARRAY() => u64         = 0x8C19
export TEXTURE_2D_ARRAY() => u64               = 0x8C1A
export PROXY_TEXTURE_2D_ARRAY() => u64         = 0x8C1B
export TEXTURE_BINDING_1D_ARRAY() => u64       = 0x8C1C
export TEXTURE_BINDING_2D_ARRAY() => u64       = 0x8C1D
export R11F_G11F_B10F() => u64                 = 0x8C3A
export UNSIGNED_INT_10F_11F_11F_REV() => u64   = 0x8C3B
export RGB9_E5() => u64                        = 0x8C3D
export UNSIGNED_INT_5_9_9_9_REV() => u64       = 0x8C3E
export TEXTURE_SHARED_SIZE() => u64            = 0x8C3F
export TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH() => u64 = 0x8C76
export TRANSFORM_FEEDBACK_BUFFER_MODE() => u64 = 0x8C7F
export MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS() => u64 = 0x8C80
export TRANSFORM_FEEDBACK_VARYINGS() => u64    = 0x8C83
export TRANSFORM_FEEDBACK_BUFFER_START() => u64 = 0x8C84
export TRANSFORM_FEEDBACK_BUFFER_SIZE() => u64 = 0x8C85
export PRIMITIVES_GENERATED() => u64           = 0x8C87
export TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN() => u64 = 0x8C88
export RASTERIZER_DISCARD() => u64             = 0x8C89
export MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS() => u64 = 0x8C8A
export MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS() => u64 = 0x8C8B
export INTERLEAVED_ATTRIBS() => u64            = 0x8C8C
export SEPARATE_ATTRIBS() => u64               = 0x8C8D
export TRANSFORM_FEEDBACK_BUFFER() => u64      = 0x8C8E
export TRANSFORM_FEEDBACK_BUFFER_BINDING() => u64 = 0x8C8F
export RGBA32UI() => u64                       = 0x8D70
export RGB32UI() => u64                        = 0x8D71
export RGBA16UI() => u64                       = 0x8D76
export RGB16UI() => u64                        = 0x8D77
export RGBA8UI() => u64                        = 0x8D7C
export RGB8UI() => u64                         = 0x8D7D
export RGBA32I() => u64                        = 0x8D82
export RGB32I() => u64                         = 0x8D83
export RGBA16I() => u64                        = 0x8D88
export RGB16I() => u64                         = 0x8D89
export RGBA8I() => u64                         = 0x8D8E
export RGB8I() => u64                          = 0x8D8F
export RED_INTEGER() => u64                    = 0x8D94
export GREEN_INTEGER() => u64                  = 0x8D95
export BLUE_INTEGER() => u64                   = 0x8D96
export RGB_INTEGER() => u64                    = 0x8D98
export RGBA_INTEGER() => u64                   = 0x8D99
export BGR_INTEGER() => u64                    = 0x8D9A
export BGRA_INTEGER() => u64                   = 0x8D9B
export SAMPLER_1D_ARRAY() => u64               = 0x8DC0
export SAMPLER_2D_ARRAY() => u64               = 0x8DC1
export SAMPLER_1D_ARRAY_SHADOW() => u64        = 0x8DC3
export SAMPLER_2D_ARRAY_SHADOW() => u64        = 0x8DC4
export SAMPLER_CUBE_SHADOW() => u64            = 0x8DC5
export UNSIGNED_INT_VEC2() => u64              = 0x8DC6
export UNSIGNED_INT_VEC3() => u64              = 0x8DC7
export UNSIGNED_INT_VEC4() => u64              = 0x8DC8
export INT_SAMPLER_1D() => u64                 = 0x8DC9
export INT_SAMPLER_2D() => u64                 = 0x8DCA
export INT_SAMPLER_3D() => u64                 = 0x8DCB
export INT_SAMPLER_CUBE() => u64               = 0x8DCC
export INT_SAMPLER_1D_ARRAY() => u64           = 0x8DCE
export INT_SAMPLER_2D_ARRAY() => u64           = 0x8DCF
export UNSIGNED_INT_SAMPLER_1D() => u64        = 0x8DD1
export UNSIGNED_INT_SAMPLER_2D() => u64        = 0x8DD2
export UNSIGNED_INT_SAMPLER_3D() => u64        = 0x8DD3
export UNSIGNED_INT_SAMPLER_CUBE() => u64      = 0x8DD4
export UNSIGNED_INT_SAMPLER_1D_ARRAY() => u64  = 0x8DD6
export UNSIGNED_INT_SAMPLER_2D_ARRAY() => u64  = 0x8DD7
export QUERY_WAIT() => u64                     = 0x8E13
export QUERY_NO_WAIT() => u64                  = 0x8E14
export QUERY_BY_REGION_WAIT() => u64           = 0x8E15
export QUERY_BY_REGION_NO_WAIT() => u64        = 0x8E16
export BUFFER_ACCESS_FLAGS() => u64            = 0x911F
export BUFFER_MAP_LENGTH() => u64              = 0x9120
export BUFFER_MAP_OFFSET() => u64              = 0x9121
export DEPTH_COMPONENT32F() => u64             = 0x8CAC
export DEPTH32F_STENCIL8() => u64              = 0x8CAD
export FLOAT_32_UNSIGNED_INT_24_8_REV() => u64 = 0x8DAD
export INVALID_FRAMEBUFFER_OPERATION() => u64  = 0x0506
export FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING() => u64 = 0x8210
export FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE() => u64 = 0x8211
export FRAMEBUFFER_ATTACHMENT_RED_SIZE() => u64 = 0x8212
export FRAMEBUFFER_ATTACHMENT_GREEN_SIZE() => u64 = 0x8213
export FRAMEBUFFER_ATTACHMENT_BLUE_SIZE() => u64 = 0x8214
export FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE() => u64 = 0x8215
export FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE() => u64 = 0x8216
export FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE() => u64 = 0x8217
export FRAMEBUFFER_DEFAULT() => u64            = 0x8218
export FRAMEBUFFER_UNDEFINED() => u64          = 0x8219
export DEPTH_STENCIL_ATTACHMENT() => u64       = 0x821A
export MAX_RENDERBUFFER_SIZE() => u64          = 0x84E8
export DEPTH_STENCIL() => u64                  = 0x84F9
export UNSIGNED_INT_24_8() => u64              = 0x84FA
export DEPTH24_STENCIL8() => u64               = 0x88F0
export TEXTURE_STENCIL_SIZE() => u64           = 0x88F1
export TEXTURE_RED_TYPE() => u64               = 0x8C10
export TEXTURE_GREEN_TYPE() => u64             = 0x8C11
export TEXTURE_BLUE_TYPE() => u64              = 0x8C12
export TEXTURE_ALPHA_TYPE() => u64             = 0x8C13
export TEXTURE_DEPTH_TYPE() => u64             = 0x8C16
export UNSIGNED_NORMALIZED() => u64            = 0x8C17
export FRAMEBUFFER_BINDING() => u64            = 0x8CA6
export DRAW_FRAMEBUFFER_BINDING() => u64       = 0x8CA6
export RENDERBUFFER_BINDING() => u64           = 0x8CA7
export READ_FRAMEBUFFER() => u64               = 0x8CA8
export DRAW_FRAMEBUFFER() => u64               = 0x8CA9
export READ_FRAMEBUFFER_BINDING() => u64       = 0x8CAA
export RENDERBUFFER_SAMPLES() => u64           = 0x8CAB
export FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE() => u64 = 0x8CD0
export FRAMEBUFFER_ATTACHMENT_OBJECT_NAME() => u64 = 0x8CD1
export FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL() => u64 = 0x8CD2
export FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE() => u64 = 0x8CD3
export FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER() => u64 = 0x8CD4
export FRAMEBUFFER_COMPLETE() => u64           = 0x8CD5
export FRAMEBUFFER_INCOMPLETE_ATTACHMENT() => u64 = 0x8CD6
export FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT() => u64 = 0x8CD7
export FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER() => u64 = 0x8CDB
export FRAMEBUFFER_INCOMPLETE_READ_BUFFER() => u64 = 0x8CDC
export FRAMEBUFFER_UNSUPPORTED() => u64        = 0x8CDD
export MAX_COLOR_ATTACHMENTS() => u64          = 0x8CDF
export COLOR_ATTACHMENT0() => u64              = 0x8CE0
export COLOR_ATTACHMENT1() => u64              = 0x8CE1
export COLOR_ATTACHMENT2() => u64              = 0x8CE2
export COLOR_ATTACHMENT3() => u64              = 0x8CE3
export COLOR_ATTACHMENT4() => u64              = 0x8CE4
export COLOR_ATTACHMENT5() => u64              = 0x8CE5
export COLOR_ATTACHMENT6() => u64              = 0x8CE6
export COLOR_ATTACHMENT7() => u64              = 0x8CE7
export COLOR_ATTACHMENT8() => u64              = 0x8CE8
export COLOR_ATTACHMENT9() => u64              = 0x8CE9
export COLOR_ATTACHMENT10() => u64             = 0x8CEA
export COLOR_ATTACHMENT11() => u64             = 0x8CEB
export COLOR_ATTACHMENT12() => u64             = 0x8CEC
export COLOR_ATTACHMENT13() => u64             = 0x8CED
export COLOR_ATTACHMENT14() => u64             = 0x8CEE
export COLOR_ATTACHMENT15() => u64             = 0x8CEF
export COLOR_ATTACHMENT16() => u64             = 0x8CF0
export COLOR_ATTACHMENT17() => u64             = 0x8CF1
export COLOR_ATTACHMENT18() => u64             = 0x8CF2
export COLOR_ATTACHMENT19() => u64             = 0x8CF3
export COLOR_ATTACHMENT20() => u64             = 0x8CF4
export COLOR_ATTACHMENT21() => u64             = 0x8CF5
export COLOR_ATTACHMENT22() => u64             = 0x8CF6
export COLOR_ATTACHMENT23() => u64             = 0x8CF7
export COLOR_ATTACHMENT24() => u64             = 0x8CF8
export COLOR_ATTACHMENT25() => u64             = 0x8CF9
export COLOR_ATTACHMENT26() => u64             = 0x8CFA
export COLOR_ATTACHMENT27() => u64             = 0x8CFB
export COLOR_ATTACHMENT28() => u64             = 0x8CFC
export COLOR_ATTACHMENT29() => u64             = 0x8CFD
export COLOR_ATTACHMENT30() => u64             = 0x8CFE
export COLOR_ATTACHMENT31() => u64             = 0x8CFF
export DEPTH_ATTACHMENT() => u64               = 0x8D00
export STENCIL_ATTACHMENT() => u64             = 0x8D20
export FRAMEBUFFER() => u64                    = 0x8D40
export RENDERBUFFER() => u64                   = 0x8D41
export RENDERBUFFER_WIDTH() => u64             = 0x8D42
export RENDERBUFFER_HEIGHT() => u64            = 0x8D43
export RENDERBUFFER_INTERNAL_FORMAT() => u64   = 0x8D44
export STENCIL_INDEX1() => u64                 = 0x8D46
export STENCIL_INDEX4() => u64                 = 0x8D47
export STENCIL_INDEX8() => u64                 = 0x8D48
export STENCIL_INDEX16() => u64                = 0x8D49
export RENDERBUFFER_RED_SIZE() => u64          = 0x8D50
export RENDERBUFFER_GREEN_SIZE() => u64        = 0x8D51
export RENDERBUFFER_BLUE_SIZE() => u64         = 0x8D52
export RENDERBUFFER_ALPHA_SIZE() => u64        = 0x8D53
export RENDERBUFFER_DEPTH_SIZE() => u64        = 0x8D54
export RENDERBUFFER_STENCIL_SIZE() => u64      = 0x8D55
export FRAMEBUFFER_INCOMPLETE_MULTISAMPLE() => u64 = 0x8D56
export MAX_SAMPLES() => u64                    = 0x8D57
export FRAMEBUFFER_SRGB() => u64               = 0x8DB9
export HALF_FLOAT() => u64                     = 0x140B
export MAP_READ_BIT() => u64                   = 0x0001
export MAP_WRITE_BIT() => u64                  = 0x0002
export MAP_INVALIDATE_RANGE_BIT() => u64       = 0x0004
export MAP_INVALIDATE_BUFFER_BIT() => u64      = 0x0008
export MAP_FLUSH_EXPLICIT_BIT() => u64         = 0x0010
export MAP_UNSYNCHRONIZED_BIT() => u64         = 0x0020
export COMPRESSED_RED_RGTC1() => u64           = 0x8DBB
export COMPRESSED_SIGNED_RED_RGTC1() => u64    = 0x8DBC
export COMPRESSED_RG_RGTC2() => u64            = 0x8DBD
export COMPRESSED_SIGNED_RG_RGTC2() => u64     = 0x8DBE
export RG() => u64                             = 0x8227
export RG_INTEGER() => u64                     = 0x8228
export R8() => u64                             = 0x8229
export R16() => u64                            = 0x822A
export RG8() => u64                            = 0x822B
export RG16() => u64                           = 0x822C
export R16F() => u64                           = 0x822D
export R32F() => u64                           = 0x822E
export RG16F() => u64                          = 0x822F
export RG32F() => u64                          = 0x8230
export R8I() => u64                            = 0x8231
export R8UI() => u64                           = 0x8232
export R16I() => u64                           = 0x8233
export R16UI() => u64                          = 0x8234
export R32I() => u64                           = 0x8235
export R32UI() => u64                          = 0x8236
export RG8I() => u64                           = 0x8237
export RG8UI() => u64                          = 0x8238
export RG16I() => u64                          = 0x8239
export RG16UI() => u64                         = 0x823A
export RG32I() => u64                          = 0x823B
export RG32UI() => u64                         = 0x823C
export VERTEX_ARRAY_BINDING() => u64           = 0x85B5

type PFNGLCOLORMASKIPROC = [(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)]
type PFNGLGETBOOLEANI_VPROC = [(GLenum target, GLuint index, [GLboolean] data)]
type PFNGLGETINTEGERI_VPROC = [(GLenum target, GLuint index, [GLint] data)]
type PFNGLENABLEIPROC = [(GLenum target, GLuint index)]
type PFNGLDISABLEIPROC = [(GLenum target, GLuint index)]
type PFNGLISENABLEDIPROC = [(GLenum target, GLuint index) => GLboolean]
type PFNGLBEGINTRANSFORMFEEDBACKPROC = [(GLenum primitiveMode)]
type PFNGLENDTRANSFORMFEEDBACKPROC = [()]
type PFNGLBINDBUFFERRANGEPROC = [(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)]
type PFNGLBINDBUFFERBASEPROC = [(GLenum target, GLuint index, GLuint buffer)]
type PFNGLTRANSFORMFEEDBACKVARYINGSPROC = [(GLuint program, GLsizei count, [[GLchar]] varyings, GLenum bufferMode)]
type PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = [(GLuint program, GLuint index, GLsizei bufSize, [GLsizei] length, [GLsizei] size, [GLenum] type, [GLchar] name)]
type PFNGLCLAMPCOLORPROC = [(GLenum target, GLenum clamp)]
type PFNGLBEGINCONDITIONALRENDERPROC = [(GLuint id, GLenum mode)]
type PFNGLENDCONDITIONALRENDERPROC = [()]
type PFNGLVERTEXATTRIBIPOINTERPROC = [(GLuint index, GLint size, GLenum type, GLsizei stride, [] pointer)]
type PFNGLGETVERTEXATTRIBIIVPROC = [(GLuint index, GLenum pname, [GLint] params)]
type PFNGLGETVERTEXATTRIBIUIVPROC = [(GLuint index, GLenum pname, [GLuint] params)]
type PFNGLVERTEXATTRIBI1IPROC = [(GLuint index, GLint x)]
type PFNGLVERTEXATTRIBI2IPROC = [(GLuint index, GLint x, GLint y)]
type PFNGLVERTEXATTRIBI3IPROC = [(GLuint index, GLint x, GLint y, GLint z)]
type PFNGLVERTEXATTRIBI4IPROC = [(GLuint index, GLint x, GLint y, GLint z, GLint w)]
type PFNGLVERTEXATTRIBI1UIPROC = [(GLuint index, GLuint x)]
type PFNGLVERTEXATTRIBI2UIPROC = [(GLuint index, GLuint x, GLuint y)]
type PFNGLVERTEXATTRIBI3UIPROC = [(GLuint index, GLuint x, GLuint y, GLuint z)]
type PFNGLVERTEXATTRIBI4UIPROC = [(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)]
type PFNGLVERTEXATTRIBI1IVPROC = [(GLuint index, [GLint] v)]
type PFNGLVERTEXATTRIBI2IVPROC = [(GLuint index, [GLint] v)]
type PFNGLVERTEXATTRIBI3IVPROC = [(GLuint index, [GLint] v)]
type PFNGLVERTEXATTRIBI4IVPROC = [(GLuint index, [GLint] v)]
type PFNGLVERTEXATTRIBI1UIVPROC = [(GLuint index, [GLuint] v)]
type PFNGLVERTEXATTRIBI2UIVPROC = [(GLuint index, [GLuint] v)]
type PFNGLVERTEXATTRIBI3UIVPROC = [(GLuint index, [GLuint] v)]
type PFNGLVERTEXATTRIBI4UIVPROC = [(GLuint index, [GLuint] v)]
type PFNGLVERTEXATTRIBI4BVPROC = [(GLuint index, [GLbyte] v)]
type PFNGLVERTEXATTRIBI4SVPROC = [(GLuint index, [GLshort] v)]
type PFNGLVERTEXATTRIBI4UBVPROC = [(GLuint index, [GLubyte] v)]
type PFNGLVERTEXATTRIBI4USVPROC = [(GLuint index, [GLushort] v)]
type PFNGLGETUNIFORMUIVPROC = [(GLuint program, GLint location, [GLuint] params)]
type PFNGLBINDFRAGDATALOCATIONPROC = [(GLuint program, GLuint color, [GLchar] name)]
type PFNGLGETFRAGDATALOCATIONPROC = [(GLuint program, [GLchar] name) => GLint]
type PFNGLUNIFORM1UIPROC = [(GLint location, GLuint v0)]
type PFNGLUNIFORM2UIPROC = [(GLint location, GLuint v0, GLuint v1)]
type PFNGLUNIFORM3UIPROC = [(GLint location, GLuint v0, GLuint v1, GLuint v2)]
type PFNGLUNIFORM4UIPROC = [(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)]
type PFNGLUNIFORM1UIVPROC = [(GLint location, GLsizei count, [GLuint] value)]
type PFNGLUNIFORM2UIVPROC = [(GLint location, GLsizei count, [GLuint] value)]
type PFNGLUNIFORM3UIVPROC = [(GLint location, GLsizei count, [GLuint] value)]
type PFNGLUNIFORM4UIVPROC = [(GLint location, GLsizei count, [GLuint] value)]
type PFNGLTEXPARAMETERIIVPROC = [(GLenum target, GLenum pname, [GLint] params)]
type PFNGLTEXPARAMETERIUIVPROC = [(GLenum target, GLenum pname, [GLuint] params)]
type PFNGLGETTEXPARAMETERIIVPROC = [(GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETTEXPARAMETERIUIVPROC = [(GLenum target, GLenum pname, [GLuint] params)]
type PFNGLCLEARBUFFERIVPROC = [(GLenum buffer, GLint drawbuffer, [GLint] value)]
type PFNGLCLEARBUFFERUIVPROC = [(GLenum buffer, GLint drawbuffer, [GLuint] value)]
type PFNGLCLEARBUFFERFVPROC = [(GLenum buffer, GLint drawbuffer, [GLfloat] value)]
type PFNGLCLEARBUFFERFIPROC = [(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)]
type PFNGLGETSTRINGIPROC = [(GLenum name, GLuint index) => [GLubyte]]
type PFNGLISRENDERBUFFERPROC = [(GLuint renderbuffer) => GLboolean]
type PFNGLBINDRENDERBUFFERPROC = [(GLenum target, GLuint renderbuffer)]
type PFNGLDELETERENDERBUFFERSPROC = [(GLsizei n, [GLuint] renderbuffers)]
type PFNGLGENRENDERBUFFERSPROC = [(GLsizei n, [GLuint] renderbuffers)]
type PFNGLRENDERBUFFERSTORAGEPROC = [(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLGETRENDERBUFFERPARAMETERIVPROC = [(GLenum target, GLenum pname, [GLint] params)]
type PFNGLISFRAMEBUFFERPROC = [(GLuint framebuffer) => GLboolean]
type PFNGLBINDFRAMEBUFFERPROC = [(GLenum target, GLuint framebuffer)]
type PFNGLDELETEFRAMEBUFFERSPROC = [(GLsizei n, [GLuint] framebuffers)]
type PFNGLGENFRAMEBUFFERSPROC = [(GLsizei n, [GLuint] framebuffers)]
type PFNGLCHECKFRAMEBUFFERSTATUSPROC = [(GLenum target) => GLenum]
type PFNGLFRAMEBUFFERTEXTURE1DPROC = [(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)]
type PFNGLFRAMEBUFFERTEXTURE2DPROC = [(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)]
type PFNGLFRAMEBUFFERTEXTURE3DPROC = [(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)]
type PFNGLFRAMEBUFFERRENDERBUFFERPROC = [(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)]
type PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = [(GLenum target, GLenum attachment, GLenum pname, [GLint] params)]
type PFNGLGENERATEMIPMAPPROC = [(GLenum target)]
type PFNGLBLITFRAMEBUFFERPROC = [(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)]
type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = [(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLFRAMEBUFFERTEXTURELAYERPROC = [(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)]
type PFNGLMAPBUFFERRANGEPROC = [(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) => []]
type PFNGLFLUSHMAPPEDBUFFERRANGEPROC = [(GLenum target, GLintptr offset, GLsizeiptr length)]
type PFNGLBINDVERTEXARRAYPROC = [(GLuint array)]
type PFNGLDELETEVERTEXARRAYSPROC = [(GLsizei n, [GLuint] arrays)]
type PFNGLGENVERTEXARRAYSPROC = [(GLsizei n, [GLuint] arrays)]
type PFNGLISVERTEXARRAYPROC = [(GLuint array) => GLboolean]

extern glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
extern glGetBooleani_v(GLenum target, GLuint index, [GLboolean] data)
extern glGetIntegeri_v(GLenum target, GLuint index, [GLint] data)
extern glEnablei(GLenum target, GLuint index)
extern glDisablei(GLenum target, GLuint index)
extern glIsEnabledi(GLenum target, GLuint index) => GLboolean
extern glBeginTransformFeedback(GLenum primitiveMode)
extern glEndTransformFeedback()
extern glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
extern glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
extern glTransformFeedbackVaryings(GLuint program, GLsizei count, [[GLchar]] varyings, GLenum bufferMode)
extern glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, [GLsizei] length, [GLsizei] size, [GLenum] type, [GLchar] name)
extern glClampColor(GLenum target, GLenum clamp)
extern glBeginConditionalRender(GLuint id, GLenum mode)
extern glEndConditionalRender()
extern glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, [] pointer)
extern glGetVertexAttribIiv(GLuint index, GLenum pname, [GLint] params)
extern glGetVertexAttribIuiv(GLuint index, GLenum pname, [GLuint] params)
extern glVertexAttribI1i(GLuint index, GLint x)
extern glVertexAttribI2i(GLuint index, GLint x, GLint y)
extern glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
extern glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
extern glVertexAttribI1ui(GLuint index, GLuint x)
extern glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
extern glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
extern glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
extern glVertexAttribI1iv(GLuint index, [GLint] v)
extern glVertexAttribI2iv(GLuint index, [GLint] v)
extern glVertexAttribI3iv(GLuint index, [GLint] v)
extern glVertexAttribI4iv(GLuint index, [GLint] v)
extern glVertexAttribI1uiv(GLuint index, [GLuint] v)
extern glVertexAttribI2uiv(GLuint index, [GLuint] v)
extern glVertexAttribI3uiv(GLuint index, [GLuint] v)
extern glVertexAttribI4uiv(GLuint index, [GLuint] v)
extern glVertexAttribI4bv(GLuint index, [GLbyte] v)
extern glVertexAttribI4sv(GLuint index, [GLshort] v)
extern glVertexAttribI4ubv(GLuint index, [GLubyte] v)
extern glVertexAttribI4usv(GLuint index, [GLushort] v)
extern glGetUniformuiv(GLuint program, GLint location, [GLuint] params)
extern glBindFragDataLocation(GLuint program, GLuint color, [GLchar] name)
extern glGetFragDataLocation(GLuint program, [GLchar] name) => GLint
extern glUniform1ui(GLint location, GLuint v0)
extern glUniform2ui(GLint location, GLuint v0, GLuint v1)
extern glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
extern glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
extern glUniform1uiv(GLint location, GLsizei count, [GLuint] value)
extern glUniform2uiv(GLint location, GLsizei count, [GLuint] value)
extern glUniform3uiv(GLint location, GLsizei count, [GLuint] value)
extern glUniform4uiv(GLint location, GLsizei count, [GLuint] value)
extern glTexParameterIiv(GLenum target, GLenum pname, [GLint] params)
extern glTexParameterIuiv(GLenum target, GLenum pname, [GLuint] params)
extern glGetTexParameterIiv(GLenum target, GLenum pname, [GLint] params)
extern glGetTexParameterIuiv(GLenum target, GLenum pname, [GLuint] params)
extern glClearBufferiv(GLenum buffer, GLint drawbuffer, [GLint] value)
extern glClearBufferuiv(GLenum buffer, GLint drawbuffer, [GLuint] value)
extern glClearBufferfv(GLenum buffer, GLint drawbuffer, [GLfloat] value)
extern glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
extern glGetStringi(GLenum name, GLuint index) => [GLubyte]
extern glIsRenderbuffer(GLuint renderbuffer) => GLboolean
extern glBindRenderbuffer(GLenum target, GLuint renderbuffer)
extern glDeleteRenderbuffers(GLsizei n, [GLuint] renderbuffers)
extern glGenRenderbuffers(GLsizei n, [GLuint] renderbuffers)
extern glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
extern glGetRenderbufferParameteriv(GLenum target, GLenum pname, [GLint] params)
extern glIsFramebuffer(GLuint framebuffer) => GLboolean
extern glBindFramebuffer(GLenum target, GLuint framebuffer)
extern glDeleteFramebuffers(GLsizei n, [GLuint] framebuffers)
extern glGenFramebuffers(GLsizei n, [GLuint] framebuffers)
extern glCheckFramebufferStatus(GLenum target) => GLenum
extern glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
extern glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
extern glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
extern glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
extern glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, [GLint] params)
extern glGenerateMipmap(GLenum target)
extern glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
extern glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
extern glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
extern glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) => []
extern glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
extern glBindVertexArray(GLuint array)
extern glDeleteVertexArrays(GLsizei n, [GLuint] arrays)
extern glGenVertexArrays(GLsizei n, [GLuint] arrays)
extern glIsVertexArray(GLuint array) => GLboolean

export SAMPLER_2D_RECT() => u64                = 0x8B63
export SAMPLER_2D_RECT_SHADOW() => u64         = 0x8B64
export SAMPLER_BUFFER() => u64                 = 0x8DC2
export INT_SAMPLER_2D_RECT() => u64            = 0x8DCD
export INT_SAMPLER_BUFFER() => u64             = 0x8DD0
export UNSIGNED_INT_SAMPLER_2D_RECT() => u64   = 0x8DD5
export UNSIGNED_INT_SAMPLER_BUFFER() => u64    = 0x8DD8
export TEXTURE_BUFFER() => u64                 = 0x8C2A
export MAX_TEXTURE_BUFFER_SIZE() => u64        = 0x8C2B
export TEXTURE_BINDING_BUFFER() => u64         = 0x8C2C
export TEXTURE_BUFFER_DATA_STORE_BINDING() => u64 = 0x8C2D
export TEXTURE_RECTANGLE() => u64              = 0x84F5
export TEXTURE_BINDING_RECTANGLE() => u64      = 0x84F6
export PROXY_TEXTURE_RECTANGLE() => u64        = 0x84F7
export MAX_RECTANGLE_TEXTURE_SIZE() => u64     = 0x84F8
export R8_SNORM() => u64                       = 0x8F94
export RG8_SNORM() => u64                      = 0x8F95
export RGB8_SNORM() => u64                     = 0x8F96
export RGBA8_SNORM() => u64                    = 0x8F97
export R16_SNORM() => u64                      = 0x8F98
export RG16_SNORM() => u64                     = 0x8F99
export RGB16_SNORM() => u64                    = 0x8F9A
export RGBA16_SNORM() => u64                   = 0x8F9B
export SIGNED_NORMALIZED() => u64              = 0x8F9C
export PRIMITIVE_RESTART() => u64              = 0x8F9D
export PRIMITIVE_RESTART_INDEX() => u64        = 0x8F9E
export COPY_READ_BUFFER() => u64               = 0x8F36
export COPY_WRITE_BUFFER() => u64              = 0x8F37
export UNIFORM_BUFFER() => u64                 = 0x8A11
export UNIFORM_BUFFER_BINDING() => u64         = 0x8A28
export UNIFORM_BUFFER_START() => u64           = 0x8A29
export UNIFORM_BUFFER_SIZE() => u64            = 0x8A2A
export MAX_VERTEX_UNIFORM_BLOCKS() => u64      = 0x8A2B
export MAX_GEOMETRY_UNIFORM_BLOCKS() => u64    = 0x8A2C
export MAX_FRAGMENT_UNIFORM_BLOCKS() => u64    = 0x8A2D
export MAX_COMBINED_UNIFORM_BLOCKS() => u64    = 0x8A2E
export MAX_UNIFORM_BUFFER_BINDINGS() => u64    = 0x8A2F
export MAX_UNIFORM_BLOCK_SIZE() => u64         = 0x8A30
export MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS() => u64 = 0x8A31
export MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS() => u64 = 0x8A32
export MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS() => u64 = 0x8A33
export UNIFORM_BUFFER_OFFSET_ALIGNMENT() => u64 = 0x8A34
export ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH() => u64 = 0x8A35
export ACTIVE_UNIFORM_BLOCKS() => u64          = 0x8A36
export UNIFORM_TYPE() => u64                   = 0x8A37
export UNIFORM_SIZE() => u64                   = 0x8A38
export UNIFORM_NAME_LENGTH() => u64            = 0x8A39
export UNIFORM_BLOCK_INDEX() => u64            = 0x8A3A
export UNIFORM_OFFSET() => u64                 = 0x8A3B
export UNIFORM_ARRAY_STRIDE() => u64           = 0x8A3C
export UNIFORM_MATRIX_STRIDE() => u64          = 0x8A3D
export UNIFORM_IS_ROW_MAJOR() => u64           = 0x8A3E
export UNIFORM_BLOCK_BINDING() => u64          = 0x8A3F
export UNIFORM_BLOCK_DATA_SIZE() => u64        = 0x8A40
export UNIFORM_BLOCK_NAME_LENGTH() => u64      = 0x8A41
export UNIFORM_BLOCK_ACTIVE_UNIFORMS() => u64  = 0x8A42
export UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES() => u64 = 0x8A43
export UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER() => u64 = 0x8A44
export UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER() => u64 = 0x8A45
export UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER() => u64 = 0x8A46
export INVALID_INDEX() => u64                  = 0xFFFFFFFF

type PFNGLDRAWARRAYSINSTANCEDPROC = [(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)]
type PFNGLDRAWELEMENTSINSTANCEDPROC = [(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount)]
type PFNGLTEXBUFFERPROC = [(GLenum target, GLenum internalformat, GLuint buffer)]
type PFNGLPRIMITIVERESTARTINDEXPROC = [(GLuint index)]
type PFNGLCOPYBUFFERSUBDATAPROC = [(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)]
type PFNGLGETUNIFORMINDICESPROC = [(GLuint program, GLsizei uniformCount, [[GLchar]] uniformNames, [GLuint] uniformIndices)]
type PFNGLGETACTIVEUNIFORMSIVPROC = [(GLuint program, GLsizei uniformCount, [GLuint] uniformIndices, GLenum pname, [GLint] params)]
type PFNGLGETACTIVEUNIFORMNAMEPROC = [(GLuint program, GLuint uniformIndex, GLsizei bufSize, [GLsizei] length, [GLchar] uniformName)]
type PFNGLGETUNIFORMBLOCKINDEXPROC = [(GLuint program, [GLchar] uniformBlockName) => GLuint]
type PFNGLGETACTIVEUNIFORMBLOCKIVPROC = [(GLuint program, GLuint uniformBlockIndex, GLenum pname, [GLint] params)]
type PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = [(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, [GLsizei] length, [GLchar] uniformBlockName)]
type PFNGLUNIFORMBLOCKBINDINGPROC = [(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)]

extern glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
extern glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount)
extern glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
extern glPrimitiveRestartIndex(GLuint index)
extern glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
extern glGetUniformIndices(GLuint program, GLsizei uniformCount, [[GLchar]] uniformNames, [GLuint] uniformIndices)
extern glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, [GLuint] uniformIndices, GLenum pname, [GLint] params)
extern glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, [GLsizei] length, [GLchar] uniformName)
extern glGetUniformBlockIndex(GLuint program, [GLchar] uniformBlockName) => GLuint
extern glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, [GLint] params)
extern glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, [GLsizei] length, [GLchar] uniformBlockName)
extern glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)

type GLsync = [{}]
type GLuint64 = u64
type GLint64 = i64

export CONTEXT_CORE_PROFILE_BIT() => u64       = 0x00000001
export CONTEXT_COMPATIBILITY_PROFILE_BIT() => u64 = 0x00000002
export LINES_ADJACENCY() => u64                = 0x000A
export LINE_STRIP_ADJACENCY() => u64           = 0x000B
export TRIANGLES_ADJACENCY() => u64            = 0x000C
export TRIANGLE_STRIP_ADJACENCY() => u64       = 0x000D
export PROGRAM_POINT_SIZE() => u64             = 0x8642
export MAX_GEOMETRY_TEXTURE_IMAGE_UNITS() => u64 = 0x8C29
export FRAMEBUFFER_ATTACHMENT_LAYERED() => u64 = 0x8DA7
export FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS() => u64 = 0x8DA8
export GEOMETRY_SHADER() => u64                = 0x8DD9
export GEOMETRY_VERTICES_OUT() => u64          = 0x8916
export GEOMETRY_INPUT_TYPE() => u64            = 0x8917
export GEOMETRY_OUTPUT_TYPE() => u64           = 0x8918
export MAX_GEOMETRY_UNIFORM_COMPONENTS() => u64 = 0x8DDF
export MAX_GEOMETRY_OUTPUT_VERTICES() => u64   = 0x8DE0
export MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS() => u64 = 0x8DE1
export MAX_VERTEX_OUTPUT_COMPONENTS() => u64   = 0x9122
export MAX_GEOMETRY_INPUT_COMPONENTS() => u64  = 0x9123
export MAX_GEOMETRY_OUTPUT_COMPONENTS() => u64 = 0x9124
export MAX_FRAGMENT_INPUT_COMPONENTS() => u64  = 0x9125
export CONTEXT_PROFILE_MASK() => u64           = 0x9126
export DEPTH_CLAMP() => u64                    = 0x864F
export QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION() => u64 = 0x8E4C
export FIRST_VERTEX_CONVENTION() => u64        = 0x8E4D
export LAST_VERTEX_CONVENTION() => u64         = 0x8E4E
export PROVOKING_VERTEX() => u64               = 0x8E4F
export TEXTURE_CUBE_MAP_SEAMLESS() => u64      = 0x884F
export MAX_SERVER_WAIT_TIMEOUT() => u64        = 0x9111
export OBJECT_TYPE() => u64                    = 0x9112
export SYNC_CONDITION() => u64                 = 0x9113
export SYNC_STATUS() => u64                    = 0x9114
export SYNC_FLAGS() => u64                     = 0x9115
export SYNC_FENCE() => u64                     = 0x9116
export SYNC_GPU_COMMANDS_COMPLETE() => u64     = 0x9117
export UNSIGNALED() => u64                     = 0x9118
export SIGNALED() => u64                       = 0x9119
export ALREADY_SIGNALED() => u64               = 0x911A
export TIMEOUT_EXPIRED() => u64                = 0x911B
export CONDITION_SATISFIED() => u64            = 0x911C
export WAIT_FAILED() => u64                    = 0x911D
export TIMEOUT_IGNORED() => u64                = 0xFFFFFFFFFFFFFFFF
export SYNC_FLUSH_COMMANDS_BIT() => u64        = 0x00000001
export SAMPLE_POSITION() => u64                = 0x8E50
export SAMPLE_MASK() => u64                    = 0x8E51
export SAMPLE_MASK_VALUE() => u64              = 0x8E52
export MAX_SAMPLE_MASK_WORDS() => u64          = 0x8E59
export TEXTURE_2D_MULTISAMPLE() => u64         = 0x9100
export PROXY_TEXTURE_2D_MULTISAMPLE() => u64   = 0x9101
export TEXTURE_2D_MULTISAMPLE_ARRAY() => u64   = 0x9102
export PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY() => u64 = 0x9103
export TEXTURE_BINDING_2D_MULTISAMPLE() => u64 = 0x9104
export TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY() => u64 = 0x9105
export TEXTURE_SAMPLES() => u64                = 0x9106
export TEXTURE_FIXED_SAMPLE_LOCATIONS() => u64 = 0x9107
export SAMPLER_2D_MULTISAMPLE() => u64         = 0x9108
export INT_SAMPLER_2D_MULTISAMPLE() => u64     = 0x9109
export UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE() => u64 = 0x910A
export SAMPLER_2D_MULTISAMPLE_ARRAY() => u64   = 0x910B
export INT_SAMPLER_2D_MULTISAMPLE_ARRAY() => u64 = 0x910C
export UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY() => u64 = 0x910D
export MAX_COLOR_TEXTURE_SAMPLES() => u64      = 0x910E
export MAX_DEPTH_TEXTURE_SAMPLES() => u64      = 0x910F
export MAX_INTEGER_SAMPLES() => u64            = 0x9110

type PFNGLDRAWELEMENTSBASEVERTEXPROC = [(GLenum mode, GLsizei count, GLenum type, [] indices, GLint basevertex)]
type PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = [(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, [] indices, GLint basevertex)]
type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = [(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount, GLint basevertex)]
type PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = [(GLenum mode, [GLsizei] count, GLenum type, [[]] indices, GLsizei drawcount, [GLint] basevertex)]
type PFNGLPROVOKINGVERTEXPROC = [(GLenum mode)]
type PFNGLFENCESYNCPROC = [(GLenum condition, GLbitfield flags) => GLsync]
type PFNGLISSYNCPROC = [(GLsync sync) => GLboolean]
type PFNGLDELETESYNCPROC = [(GLsync sync)]
type PFNGLCLIENTWAITSYNCPROC = [(GLsync sync, GLbitfield flags, GLuint64 timeout) => GLenum]
type PFNGLWAITSYNCPROC = [(GLsync sync, GLbitfield flags, GLuint64 timeout)]
type PFNGLGETINTEGER64VPROC = [(GLenum pname, [GLint64] data)]
type PFNGLGETSYNCIVPROC = [(GLsync sync, GLenum pname, GLsizei count, [GLsizei] length, [GLint] values)]
type PFNGLGETINTEGER64I_VPROC = [(GLenum target, GLuint index, [GLint64] data)]
type PFNGLGETBUFFERPARAMETERI64VPROC = [(GLenum target, GLenum pname, [GLint64] params)]
type PFNGLFRAMEBUFFERTEXTUREPROC = [(GLenum target, GLenum attachment, GLuint texture, GLint level)]
type PFNGLTEXIMAGE2DMULTISAMPLEPROC = [(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)]
type PFNGLTEXIMAGE3DMULTISAMPLEPROC = [(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)]
type PFNGLGETMULTISAMPLEFVPROC = [(GLenum pname, GLuint index, [GLfloat] val)]
type PFNGLSAMPLEMASKIPROC = [(GLuint maskNumber, GLbitfield mask)]

extern glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, [] indices, GLint basevertex)
extern glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, [] indices, GLint basevertex)
extern glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount, GLint basevertex)
extern glMultiDrawElementsBaseVertex(GLenum mode, [GLsizei] count, GLenum type, [[]] indices, GLsizei drawcount, [GLint] basevertex)
extern glProvokingVertex(GLenum mode)
extern glFenceSync(GLenum condition, GLbitfield flags) => GLsync
extern glIsSync(GLsync sync) => GLboolean
extern glDeleteSync(GLsync sync)
extern glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) => GLenum
extern glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
extern glGetInteger64v(GLenum pname, [GLint64] data)
extern glGetSynciv(GLsync sync, GLenum pname, GLsizei count, [GLsizei] length, [GLint] values)
extern glGetInteger64i_v(GLenum target, GLuint index, [GLint64] data)
extern glGetBufferParameteri64v(GLenum target, GLenum pname, [GLint64] params)
extern glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
extern glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
extern glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
extern glGetMultisamplefv(GLenum pname, GLuint index, [GLfloat] val)
extern glSampleMaski(GLuint maskNumber, GLbitfield mask)

export VERTEX_ATTRIB_ARRAY_DIVISOR() => u64    = 0x88FE
export SRC1_COLOR() => u64                     = 0x88F9
export ONE_MINUS_SRC1_COLOR() => u64           = 0x88FA
export ONE_MINUS_SRC1_ALPHA() => u64           = 0x88FB
export MAX_DUAL_SOURCE_DRAW_BUFFERS() => u64   = 0x88FC
export ANY_SAMPLES_PASSED() => u64             = 0x8C2F
export SAMPLER_BINDING() => u64                = 0x8919
export RGB10_A2UI() => u64                     = 0x906F
export TEXTURE_SWIZZLE_R() => u64              = 0x8E42
export TEXTURE_SWIZZLE_G() => u64              = 0x8E43
export TEXTURE_SWIZZLE_B() => u64              = 0x8E44
export TEXTURE_SWIZZLE_A() => u64              = 0x8E45
export TEXTURE_SWIZZLE_RGBA() => u64           = 0x8E46
export TIME_ELAPSED() => u64                   = 0x88BF
export TIMESTAMP() => u64                      = 0x8E28
export INT_2_10_10_10_REV() => u64             = 0x8D9F

type PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = [(GLuint program, GLuint colorNumber, GLuint index, [GLchar] name)]
type PFNGLGETFRAGDATAINDEXPROC = [(GLuint program, [GLchar] name) => GLint]
type PFNGLGENSAMPLERSPROC = [(GLsizei count, [GLuint] samplers)]
type PFNGLDELETESAMPLERSPROC = [(GLsizei count, [GLuint] samplers)]
type PFNGLISSAMPLERPROC = [(GLuint sampler) => GLboolean]
type PFNGLBINDSAMPLERPROC = [(GLuint unit, GLuint sampler)]
type PFNGLSAMPLERPARAMETERIPROC = [(GLuint sampler, GLenum pname, GLint param)]
type PFNGLSAMPLERPARAMETERIVPROC = [(GLuint sampler, GLenum pname, [GLint] param)]
type PFNGLSAMPLERPARAMETERFPROC = [(GLuint sampler, GLenum pname, GLfloat param)]
type PFNGLSAMPLERPARAMETERFVPROC = [(GLuint sampler, GLenum pname, [GLfloat] param)]
type PFNGLSAMPLERPARAMETERIIVPROC = [(GLuint sampler, GLenum pname, [GLint] param)]
type PFNGLSAMPLERPARAMETERIUIVPROC = [(GLuint sampler, GLenum pname, [GLuint] param)]
type PFNGLGETSAMPLERPARAMETERIVPROC = [(GLuint sampler, GLenum pname, [GLint] params)]
type PFNGLGETSAMPLERPARAMETERIIVPROC = [(GLuint sampler, GLenum pname, [GLint] params)]
type PFNGLGETSAMPLERPARAMETERFVPROC = [(GLuint sampler, GLenum pname, [GLfloat] params)]
type PFNGLGETSAMPLERPARAMETERIUIVPROC = [(GLuint sampler, GLenum pname, [GLuint] params)]
type PFNGLQUERYCOUNTERPROC = [(GLuint id, GLenum target)]
type PFNGLGETQUERYOBJECTI64VPROC = [(GLuint id, GLenum pname, [GLint64] params)]
type PFNGLGETQUERYOBJECTUI64VPROC = [(GLuint id, GLenum pname, [GLuint64] params)]
type PFNGLVERTEXATTRIBDIVISORPROC = [(GLuint index, GLuint divisor)]
type PFNGLVERTEXATTRIBP1UIPROC = [(GLuint index, GLenum type, GLboolean normalized, GLuint value)]
type PFNGLVERTEXATTRIBP1UIVPROC = [(GLuint index, GLenum type, GLboolean normalized, [GLuint] value)]
type PFNGLVERTEXATTRIBP2UIPROC = [(GLuint index, GLenum type, GLboolean normalized, GLuint value)]
type PFNGLVERTEXATTRIBP2UIVPROC = [(GLuint index, GLenum type, GLboolean normalized, [GLuint] value)]
type PFNGLVERTEXATTRIBP3UIPROC = [(GLuint index, GLenum type, GLboolean normalized, GLuint value)]
type PFNGLVERTEXATTRIBP3UIVPROC = [(GLuint index, GLenum type, GLboolean normalized, [GLuint] value)]
type PFNGLVERTEXATTRIBP4UIPROC = [(GLuint index, GLenum type, GLboolean normalized, GLuint value)]
type PFNGLVERTEXATTRIBP4UIVPROC = [(GLuint index, GLenum type, GLboolean normalized, [GLuint] value)]

extern glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, [GLchar] name)
extern glGetFragDataIndex(GLuint program, [GLchar] name) => GLint
extern glGenSamplers(GLsizei count, [GLuint] samplers)
extern glDeleteSamplers(GLsizei count, [GLuint] samplers)
extern glIsSampler(GLuint sampler) => GLboolean
extern glBindSampler(GLuint unit, GLuint sampler)
extern glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
extern glSamplerParameteriv(GLuint sampler, GLenum pname, [GLint] param)
extern glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
extern glSamplerParameterfv(GLuint sampler, GLenum pname, [GLfloat] param)
extern glSamplerParameterIiv(GLuint sampler, GLenum pname, [GLint] param)
extern glSamplerParameterIuiv(GLuint sampler, GLenum pname, [GLuint] param)
extern glGetSamplerParameteriv(GLuint sampler, GLenum pname, [GLint] params)
extern glGetSamplerParameterIiv(GLuint sampler, GLenum pname, [GLint] params)
extern glGetSamplerParameterfv(GLuint sampler, GLenum pname, [GLfloat] params)
extern glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, [GLuint] params)
extern glQueryCounter(GLuint id, GLenum target)
extern glGetQueryObjecti64v(GLuint id, GLenum pname, [GLint64] params)
extern glGetQueryObjectui64v(GLuint id, GLenum pname, [GLuint64] params)
extern glVertexAttribDivisor(GLuint index, GLuint divisor)
extern glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
extern glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, [GLuint] value)
extern glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
extern glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, [GLuint] value)
extern glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
extern glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, [GLuint] value)
extern glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
extern glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, [GLuint] value)

export SAMPLE_SHADING() => u64                 = 0x8C36
export MIN_SAMPLE_SHADING_VALUE() => u64       = 0x8C37
export MIN_PROGRAM_TEXTURE_GATHER_OFFSET() => u64 = 0x8E5E
export MAX_PROGRAM_TEXTURE_GATHER_OFFSET() => u64 = 0x8E5F
export TEXTURE_CUBE_MAP_ARRAY() => u64         = 0x9009
export TEXTURE_BINDING_CUBE_MAP_ARRAY() => u64 = 0x900A
export PROXY_TEXTURE_CUBE_MAP_ARRAY() => u64   = 0x900B
export SAMPLER_CUBE_MAP_ARRAY() => u64         = 0x900C
export SAMPLER_CUBE_MAP_ARRAY_SHADOW() => u64  = 0x900D
export INT_SAMPLER_CUBE_MAP_ARRAY() => u64     = 0x900E
export UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY() => u64 = 0x900F
export DRAW_INDIRECT_BUFFER() => u64           = 0x8F3F
export DRAW_INDIRECT_BUFFER_BINDING() => u64   = 0x8F43
export GEOMETRY_SHADER_INVOCATIONS() => u64    = 0x887F
export MAX_GEOMETRY_SHADER_INVOCATIONS() => u64 = 0x8E5A
export MIN_FRAGMENT_INTERPOLATION_OFFSET() => u64 = 0x8E5B
export MAX_FRAGMENT_INTERPOLATION_OFFSET() => u64 = 0x8E5C
export FRAGMENT_INTERPOLATION_OFFSET_BITS() => u64 = 0x8E5D
export MAX_VERTEX_STREAMS() => u64             = 0x8E71
export DOUBLE_VEC2() => u64                    = 0x8FFC
export DOUBLE_VEC3() => u64                    = 0x8FFD
export DOUBLE_VEC4() => u64                    = 0x8FFE
export DOUBLE_MAT2() => u64                    = 0x8F46
export DOUBLE_MAT3() => u64                    = 0x8F47
export DOUBLE_MAT4() => u64                    = 0x8F48
export DOUBLE_MAT2x3() => u64                  = 0x8F49
export DOUBLE_MAT2x4() => u64                  = 0x8F4A
export DOUBLE_MAT3x2() => u64                  = 0x8F4B
export DOUBLE_MAT3x4() => u64                  = 0x8F4C
export DOUBLE_MAT4x2() => u64                  = 0x8F4D
export DOUBLE_MAT4x3() => u64                  = 0x8F4E
export ACTIVE_SUBROUTINES() => u64             = 0x8DE5
export ACTIVE_SUBROUTINE_UNIFORMS() => u64     = 0x8DE6
export ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS() => u64 = 0x8E47
export ACTIVE_SUBROUTINE_MAX_LENGTH() => u64   = 0x8E48
export ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH() => u64 = 0x8E49
export MAX_SUBROUTINES() => u64                = 0x8DE7
export MAX_SUBROUTINE_UNIFORM_LOCATIONS() => u64 = 0x8DE8
export NUM_COMPATIBLE_SUBROUTINES() => u64     = 0x8E4A
export COMPATIBLE_SUBROUTINES() => u64         = 0x8E4B
export PATCHES() => u64                        = 0x000E
export PATCH_VERTICES() => u64                 = 0x8E72
export PATCH_DEFAULT_INNER_LEVEL() => u64      = 0x8E73
export PATCH_DEFAULT_OUTER_LEVEL() => u64      = 0x8E74
export TESS_CONTROL_OUTPUT_VERTICES() => u64   = 0x8E75
export TESS_GEN_MODE() => u64                  = 0x8E76
export TESS_GEN_SPACING() => u64               = 0x8E77
export TESS_GEN_VERTEX_ORDER() => u64          = 0x8E78
export TESS_GEN_POINT_MODE() => u64            = 0x8E79
export ISOLINES() => u64                       = 0x8E7A
export FRACTIONAL_ODD() => u64                 = 0x8E7B
export FRACTIONAL_EVEN() => u64                = 0x8E7C
export MAX_PATCH_VERTICES() => u64             = 0x8E7D
export MAX_TESS_GEN_LEVEL() => u64             = 0x8E7E
export MAX_TESS_CONTROL_UNIFORM_COMPONENTS() => u64 = 0x8E7F
export MAX_TESS_EVALUATION_UNIFORM_COMPONENTS() => u64 = 0x8E80
export MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS() => u64 = 0x8E81
export MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS() => u64 = 0x8E82
export MAX_TESS_CONTROL_OUTPUT_COMPONENTS() => u64 = 0x8E83
export MAX_TESS_PATCH_COMPONENTS() => u64      = 0x8E84
export MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS() => u64 = 0x8E85
export MAX_TESS_EVALUATION_OUTPUT_COMPONENTS() => u64 = 0x8E86
export MAX_TESS_CONTROL_UNIFORM_BLOCKS() => u64 = 0x8E89
export MAX_TESS_EVALUATION_UNIFORM_BLOCKS() => u64 = 0x8E8A
export MAX_TESS_CONTROL_INPUT_COMPONENTS() => u64 = 0x886C
export MAX_TESS_EVALUATION_INPUT_COMPONENTS() => u64 = 0x886D
export MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS() => u64 = 0x8E1E
export MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS() => u64 = 0x8E1F
export UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER() => u64 = 0x84F0
export UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER() => u64 = 0x84F1
export TESS_EVALUATION_SHADER() => u64         = 0x8E87
export TESS_CONTROL_SHADER() => u64            = 0x8E88
export TRANSFORM_FEEDBACK() => u64             = 0x8E22
export TRANSFORM_FEEDBACK_BUFFER_PAUSED() => u64 = 0x8E23
export TRANSFORM_FEEDBACK_BUFFER_ACTIVE() => u64 = 0x8E24
export TRANSFORM_FEEDBACK_BINDING() => u64     = 0x8E25
export MAX_TRANSFORM_FEEDBACK_BUFFERS() => u64 = 0x8E70

type PFNGLMINSAMPLESHADINGPROC = [(GLfloat value)]
type PFNGLBLENDEQUATIONIPROC = [(GLuint buf, GLenum mode)]
type PFNGLBLENDEQUATIONSEPARATEIPROC = [(GLuint buf, GLenum modeRGB, GLenum modeAlpha)]
type PFNGLBLENDFUNCIPROC = [(GLuint buf, GLenum src, GLenum dst)]
type PFNGLBLENDFUNCSEPARATEIPROC = [(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)]
type PFNGLDRAWARRAYSINDIRECTPROC = [(GLenum mode, [] indirect)]
type PFNGLDRAWELEMENTSINDIRECTPROC = [(GLenum mode, GLenum type, [] indirect)]
type PFNGLUNIFORM1DPROC = [(GLint location, GLdouble x)]
type PFNGLUNIFORM2DPROC = [(GLint location, GLdouble x, GLdouble y)]
type PFNGLUNIFORM3DPROC = [(GLint location, GLdouble x, GLdouble y, GLdouble z)]
type PFNGLUNIFORM4DPROC = [(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)]
type PFNGLUNIFORM1DVPROC = [(GLint location, GLsizei count, [GLdouble] value)]
type PFNGLUNIFORM2DVPROC = [(GLint location, GLsizei count, [GLdouble] value)]
type PFNGLUNIFORM3DVPROC = [(GLint location, GLsizei count, [GLdouble] value)]
type PFNGLUNIFORM4DVPROC = [(GLint location, GLsizei count, [GLdouble] value)]
type PFNGLUNIFORMMATRIX2DVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLUNIFORMMATRIX3DVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLUNIFORMMATRIX4DVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLUNIFORMMATRIX2X3DVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLUNIFORMMATRIX2X4DVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLUNIFORMMATRIX3X2DVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLUNIFORMMATRIX3X4DVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLUNIFORMMATRIX4X2DVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLUNIFORMMATRIX4X3DVPROC = [(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLGETUNIFORMDVPROC = [(GLuint program, GLint location, [GLdouble] params)]
type PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = [(GLuint program, GLenum shadertype, [GLchar] name) => GLint]
type PFNGLGETSUBROUTINEINDEXPROC = [(GLuint program, GLenum shadertype, [GLchar] name) => GLuint]
type PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = [(GLuint program, GLenum shadertype, GLuint index, GLenum pname, [GLint] values)]
type PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = [(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, [GLsizei] length, [GLchar] name)]
type PFNGLGETACTIVESUBROUTINENAMEPROC = [(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, [GLsizei] length, [GLchar] name)]
type PFNGLUNIFORMSUBROUTINESUIVPROC = [(GLenum shadertype, GLsizei count, [GLuint] indices)]
type PFNGLGETUNIFORMSUBROUTINEUIVPROC = [(GLenum shadertype, GLint location, [GLuint] params)]
type PFNGLGETPROGRAMSTAGEIVPROC = [(GLuint program, GLenum shadertype, GLenum pname, [GLint] values)]
type PFNGLPATCHPARAMETERIPROC = [(GLenum pname, GLint value)]
type PFNGLPATCHPARAMETERFVPROC = [(GLenum pname, [GLfloat] values)]
type PFNGLBINDTRANSFORMFEEDBACKPROC = [(GLenum target, GLuint id)]
type PFNGLDELETETRANSFORMFEEDBACKSPROC = [(GLsizei n, [GLuint] ids)]
type PFNGLGENTRANSFORMFEEDBACKSPROC = [(GLsizei n, [GLuint] ids)]
type PFNGLISTRANSFORMFEEDBACKPROC = [(GLuint id) => GLboolean]
type PFNGLPAUSETRANSFORMFEEDBACKPROC = [()]
type PFNGLRESUMETRANSFORMFEEDBACKPROC = [()]
type PFNGLDRAWTRANSFORMFEEDBACKPROC = [(GLenum mode, GLuint id)]
type PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = [(GLenum mode, GLuint id, GLuint stream)]
type PFNGLBEGINQUERYINDEXEDPROC = [(GLenum target, GLuint index, GLuint id)]
type PFNGLENDQUERYINDEXEDPROC = [(GLenum target, GLuint index)]
type PFNGLGETQUERYINDEXEDIVPROC = [(GLenum target, GLuint index, GLenum pname, [GLint] params)]

extern glMinSampleShading(GLfloat value)
extern glBlendEquationi(GLuint buf, GLenum mode)
extern glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
extern glBlendFunci(GLuint buf, GLenum src, GLenum dst)
extern glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
extern glDrawArraysIndirect(GLenum mode, [] indirect)
extern glDrawElementsIndirect(GLenum mode, GLenum type, [] indirect)
extern glUniform1d(GLint location, GLdouble x)
extern glUniform2d(GLint location, GLdouble x, GLdouble y)
extern glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
extern glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
extern glUniform1dv(GLint location, GLsizei count, [GLdouble] value)
extern glUniform2dv(GLint location, GLsizei count, [GLdouble] value)
extern glUniform3dv(GLint location, GLsizei count, [GLdouble] value)
extern glUniform4dv(GLint location, GLsizei count, [GLdouble] value)
extern glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glGetUniformdv(GLuint program, GLint location, [GLdouble] params)
extern glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, [GLchar] name) => GLint
extern glGetSubroutineIndex(GLuint program, GLenum shadertype, [GLchar] name) => GLuint
extern glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, [GLint] values)
extern glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, [GLsizei] length, [GLchar] name)
extern glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, [GLsizei] length, [GLchar] name)
extern glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, [GLuint] indices)
extern glGetUniformSubroutineuiv(GLenum shadertype, GLint location, [GLuint] params)
extern glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, [GLint] values)
extern glPatchParameteri(GLenum pname, GLint value)
extern glPatchParameterfv(GLenum pname, [GLfloat] values)
extern glBindTransformFeedback(GLenum target, GLuint id)
extern glDeleteTransformFeedbacks(GLsizei n, [GLuint] ids)
extern glGenTransformFeedbacks(GLsizei n, [GLuint] ids)
extern glIsTransformFeedback(GLuint id) => GLboolean
extern glPauseTransformFeedback()
extern glResumeTransformFeedback()
extern glDrawTransformFeedback(GLenum mode, GLuint id)
extern glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
extern glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
extern glEndQueryIndexed(GLenum target, GLuint index)
extern glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, [GLint] params)

export FIXED() => u64                          = 0x140C
export IMPLEMENTATION_COLOR_READ_TYPE() => u64 = 0x8B9A
export IMPLEMENTATION_COLOR_READ_FORMAT() => u64 = 0x8B9B
export LOW_FLOAT() => u64                      = 0x8DF0
export MEDIUM_FLOAT() => u64                   = 0x8DF1
export HIGH_FLOAT() => u64                     = 0x8DF2
export LOW_INT() => u64                        = 0x8DF3
export MEDIUM_INT() => u64                     = 0x8DF4
export HIGH_INT() => u64                       = 0x8DF5
export SHADER_COMPILER() => u64                = 0x8DFA
export SHADER_BINARY_FORMATS() => u64          = 0x8DF8
export NUM_SHADER_BINARY_FORMATS() => u64      = 0x8DF9
export MAX_VERTEX_UNIFORM_VECTORS() => u64     = 0x8DFB
export MAX_VARYING_VECTORS() => u64            = 0x8DFC
export MAX_FRAGMENT_UNIFORM_VECTORS() => u64   = 0x8DFD
export RGB565() => u64                         = 0x8D62
export PROGRAM_BINARY_RETRIEVABLE_HINT() => u64 = 0x8257
export PROGRAM_BINARY_LENGTH() => u64          = 0x8741
export NUM_PROGRAM_BINARY_FORMATS() => u64     = 0x87FE
export PROGRAM_BINARY_FORMATS() => u64         = 0x87FF
export VERTEX_SHADER_BIT() => u64              = 0x00000001
export FRAGMENT_SHADER_BIT() => u64            = 0x00000002
export GEOMETRY_SHADER_BIT() => u64            = 0x00000004
export TESS_CONTROL_SHADER_BIT() => u64        = 0x00000008
export TESS_EVALUATION_SHADER_BIT() => u64     = 0x00000010
export ALL_SHADER_BITS() => u64                = 0xFFFFFFFF
export PROGRAM_SEPARABLE() => u64              = 0x8258
export ACTIVE_PROGRAM() => u64                 = 0x8259
export PROGRAM_PIPELINE_BINDING() => u64       = 0x825A
export MAX_VIEWPORTS() => u64                  = 0x825B
export VIEWPORT_SUBPIXEL_BITS() => u64         = 0x825C
export VIEWPORT_BOUNDS_RANGE() => u64          = 0x825D
export LAYER_PROVOKING_VERTEX() => u64         = 0x825E
export VIEWPORT_INDEX_PROVOKING_VERTEX() => u64 = 0x825F
export UNDEFINED_VERTEX() => u64               = 0x8260

type PFNGLRELEASESHADERCOMPILERPROC = [()]
type PFNGLSHADERBINARYPROC = [(GLsizei count, [GLuint] shaders, GLenum binaryFormat, [] binary, GLsizei length)]
type PFNGLGETSHADERPRECISIONFORMATPROC = [(GLenum shadertype, GLenum precisiontype, [GLint] range, [GLint] precision)]
type PFNGLDEPTHRANGEFPROC = [(GLfloat n, GLfloat f)]
type PFNGLCLEARDEPTHFPROC = [(GLfloat d)]
type PFNGLGETPROGRAMBINARYPROC = [(GLuint program, GLsizei bufSize, [GLsizei] length, [GLenum] binaryFormat, [] binary)]
type PFNGLPROGRAMBINARYPROC = [(GLuint program, GLenum binaryFormat, [] binary, GLsizei length)]
type PFNGLPROGRAMPARAMETERIPROC = [(GLuint program, GLenum pname, GLint value)]
type PFNGLUSEPROGRAMSTAGESPROC = [(GLuint pipeline, GLbitfield stages, GLuint program)]
type PFNGLACTIVESHADERPROGRAMPROC = [(GLuint pipeline, GLuint program)]
type PFNGLCREATESHADERPROGRAMVPROC = [(GLenum type, GLsizei count, [[GLchar]] strings) => GLuint]
type PFNGLBINDPROGRAMPIPELINEPROC = [(GLuint pipeline)]
type PFNGLDELETEPROGRAMPIPELINESPROC = [(GLsizei n, [GLuint] pipelines)]
type PFNGLGENPROGRAMPIPELINESPROC = [(GLsizei n, [GLuint] pipelines)]
type PFNGLISPROGRAMPIPELINEPROC = [(GLuint pipeline) => GLboolean]
type PFNGLGETPROGRAMPIPELINEIVPROC = [(GLuint pipeline, GLenum pname, [GLint] params)]
type PFNGLPROGRAMUNIFORM1IPROC = [(GLuint program, GLint location, GLint v0)]
type PFNGLPROGRAMUNIFORM1IVPROC = [(GLuint program, GLint location, GLsizei count, [GLint] value)]
type PFNGLPROGRAMUNIFORM1FPROC = [(GLuint program, GLint location, GLfloat v0)]
type PFNGLPROGRAMUNIFORM1FVPROC = [(GLuint program, GLint location, GLsizei count, [GLfloat] value)]
type PFNGLPROGRAMUNIFORM1DPROC = [(GLuint program, GLint location, GLdouble v0)]
type PFNGLPROGRAMUNIFORM1DVPROC = [(GLuint program, GLint location, GLsizei count, [GLdouble] value)]
type PFNGLPROGRAMUNIFORM1UIPROC = [(GLuint program, GLint location, GLuint v0)]
type PFNGLPROGRAMUNIFORM1UIVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint] value)]
type PFNGLPROGRAMUNIFORM2IPROC = [(GLuint program, GLint location, GLint v0, GLint v1)]
type PFNGLPROGRAMUNIFORM2IVPROC = [(GLuint program, GLint location, GLsizei count, [GLint] value)]
type PFNGLPROGRAMUNIFORM2FPROC = [(GLuint program, GLint location, GLfloat v0, GLfloat v1)]
type PFNGLPROGRAMUNIFORM2FVPROC = [(GLuint program, GLint location, GLsizei count, [GLfloat] value)]
type PFNGLPROGRAMUNIFORM2DPROC = [(GLuint program, GLint location, GLdouble v0, GLdouble v1)]
type PFNGLPROGRAMUNIFORM2DVPROC = [(GLuint program, GLint location, GLsizei count, [GLdouble] value)]
type PFNGLPROGRAMUNIFORM2UIPROC = [(GLuint program, GLint location, GLuint v0, GLuint v1)]
type PFNGLPROGRAMUNIFORM2UIVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint] value)]
type PFNGLPROGRAMUNIFORM3IPROC = [(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)]
type PFNGLPROGRAMUNIFORM3IVPROC = [(GLuint program, GLint location, GLsizei count, [GLint] value)]
type PFNGLPROGRAMUNIFORM3FPROC = [(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)]
type PFNGLPROGRAMUNIFORM3FVPROC = [(GLuint program, GLint location, GLsizei count, [GLfloat] value)]
type PFNGLPROGRAMUNIFORM3DPROC = [(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)]
type PFNGLPROGRAMUNIFORM3DVPROC = [(GLuint program, GLint location, GLsizei count, [GLdouble] value)]
type PFNGLPROGRAMUNIFORM3UIPROC = [(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)]
type PFNGLPROGRAMUNIFORM3UIVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint] value)]
type PFNGLPROGRAMUNIFORM4IPROC = [(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)]
type PFNGLPROGRAMUNIFORM4IVPROC = [(GLuint program, GLint location, GLsizei count, [GLint] value)]
type PFNGLPROGRAMUNIFORM4FPROC = [(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)]
type PFNGLPROGRAMUNIFORM4FVPROC = [(GLuint program, GLint location, GLsizei count, [GLfloat] value)]
type PFNGLPROGRAMUNIFORM4DPROC = [(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)]
type PFNGLPROGRAMUNIFORM4DVPROC = [(GLuint program, GLint location, GLsizei count, [GLdouble] value)]
type PFNGLPROGRAMUNIFORM4UIPROC = [(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)]
type PFNGLPROGRAMUNIFORM4UIVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint] value)]
type PFNGLPROGRAMUNIFORMMATRIX2FVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX3FVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX4FVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX2DVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX3DVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX4DVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLVALIDATEPROGRAMPIPELINEPROC = [(GLuint pipeline)]
type PFNGLGETPROGRAMPIPELINEINFOLOGPROC = [(GLuint pipeline, GLsizei bufSize, [GLsizei] length, [GLchar] infoLog)]
type PFNGLVERTEXATTRIBL1DPROC = [(GLuint index, GLdouble x)]
type PFNGLVERTEXATTRIBL2DPROC = [(GLuint index, GLdouble x, GLdouble y)]
type PFNGLVERTEXATTRIBL3DPROC = [(GLuint index, GLdouble x, GLdouble y, GLdouble z)]
type PFNGLVERTEXATTRIBL4DPROC = [(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)]
type PFNGLVERTEXATTRIBL1DVPROC = [(GLuint index, [GLdouble] v)]
type PFNGLVERTEXATTRIBL2DVPROC = [(GLuint index, [GLdouble] v)]
type PFNGLVERTEXATTRIBL3DVPROC = [(GLuint index, [GLdouble] v)]
type PFNGLVERTEXATTRIBL4DVPROC = [(GLuint index, [GLdouble] v)]
type PFNGLVERTEXATTRIBLPOINTERPROC = [(GLuint index, GLint size, GLenum type, GLsizei stride, [] pointer)]
type PFNGLGETVERTEXATTRIBLDVPROC = [(GLuint index, GLenum pname, [GLdouble] params)]
type PFNGLVIEWPORTARRAYVPROC = [(GLuint first, GLsizei count, [GLfloat] v)]
type PFNGLVIEWPORTINDEXEDFPROC = [(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)]
type PFNGLVIEWPORTINDEXEDFVPROC = [(GLuint index, [GLfloat] v)]
type PFNGLSCISSORARRAYVPROC = [(GLuint first, GLsizei count, [GLint] v)]
type PFNGLSCISSORINDEXEDPROC = [(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)]
type PFNGLSCISSORINDEXEDVPROC = [(GLuint index, [GLint] v)]
type PFNGLDEPTHRANGEARRAYVPROC = [(GLuint first, GLsizei count, [GLdouble] v)]
type PFNGLDEPTHRANGEINDEXEDPROC = [(GLuint index, GLdouble n, GLdouble f)]
type PFNGLGETFLOATI_VPROC = [(GLenum target, GLuint index, [GLfloat] data)]
type PFNGLGETDOUBLEI_VPROC = [(GLenum target, GLuint index, [GLdouble] data)]

extern glReleaseShaderCompiler()
extern glShaderBinary(GLsizei count, [GLuint] shaders, GLenum binaryFormat, [] binary, GLsizei length)
extern glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, [GLint] range, [GLint] precision)
extern glDepthRangef(GLfloat n, GLfloat f)
extern glClearDepthf(GLfloat d)
extern glGetProgramBinary(GLuint program, GLsizei bufSize, [GLsizei] length, [GLenum] binaryFormat, [] binary)
extern glProgramBinary(GLuint program, GLenum binaryFormat, [] binary, GLsizei length)
extern glProgramParameteri(GLuint program, GLenum pname, GLint value)
extern glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
extern glActiveShaderProgram(GLuint pipeline, GLuint program)
extern glCreateShaderProgramv(GLenum type, GLsizei count, [[GLchar]] strings) => GLuint
extern glBindProgramPipeline(GLuint pipeline)
extern glDeleteProgramPipelines(GLsizei n, [GLuint] pipelines)
extern glGenProgramPipelines(GLsizei n, [GLuint] pipelines)
extern glIsProgramPipeline(GLuint pipeline) => GLboolean
extern glGetProgramPipelineiv(GLuint pipeline, GLenum pname, [GLint] params)
extern glProgramUniform1i(GLuint program, GLint location, GLint v0)
extern glProgramUniform1iv(GLuint program, GLint location, GLsizei count, [GLint] value)
extern glProgramUniform1f(GLuint program, GLint location, GLfloat v0)
extern glProgramUniform1fv(GLuint program, GLint location, GLsizei count, [GLfloat] value)
extern glProgramUniform1d(GLuint program, GLint location, GLdouble v0)
extern glProgramUniform1dv(GLuint program, GLint location, GLsizei count, [GLdouble] value)
extern glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
extern glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, [GLuint] value)
extern glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)
extern glProgramUniform2iv(GLuint program, GLint location, GLsizei count, [GLint] value)
extern glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
extern glProgramUniform2fv(GLuint program, GLint location, GLsizei count, [GLfloat] value)
extern glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)
extern glProgramUniform2dv(GLuint program, GLint location, GLsizei count, [GLdouble] value)
extern glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)
extern glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, [GLuint] value)
extern glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
extern glProgramUniform3iv(GLuint program, GLint location, GLsizei count, [GLint] value)
extern glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
extern glProgramUniform3fv(GLuint program, GLint location, GLsizei count, [GLfloat] value)
extern glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
extern glProgramUniform3dv(GLuint program, GLint location, GLsizei count, [GLdouble] value)
extern glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
extern glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, [GLuint] value)
extern glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
extern glProgramUniform4iv(GLuint program, GLint location, GLsizei count, [GLint] value)
extern glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
extern glProgramUniform4fv(GLuint program, GLint location, GLsizei count, [GLfloat] value)
extern glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
extern glProgramUniform4dv(GLuint program, GLint location, GLsizei count, [GLdouble] value)
extern glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
extern glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, [GLuint] value)
extern glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glValidateProgramPipeline(GLuint pipeline)
extern glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, [GLsizei] length, [GLchar] infoLog)
extern glVertexAttribL1d(GLuint index, GLdouble x)
extern glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
extern glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
extern glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
extern glVertexAttribL1dv(GLuint index, [GLdouble] v)
extern glVertexAttribL2dv(GLuint index, [GLdouble] v)
extern glVertexAttribL3dv(GLuint index, [GLdouble] v)
extern glVertexAttribL4dv(GLuint index, [GLdouble] v)
extern glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, [] pointer)
extern glGetVertexAttribLdv(GLuint index, GLenum pname, [GLdouble] params)
extern glViewportArrayv(GLuint first, GLsizei count, [GLfloat] v)
extern glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
extern glViewportIndexedfv(GLuint index, [GLfloat] v)
extern glScissorArrayv(GLuint first, GLsizei count, [GLint] v)
extern glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
extern glScissorIndexedv(GLuint index, [GLint] v)
extern glDepthRangeArrayv(GLuint first, GLsizei count, [GLdouble] v)
extern glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f)
extern glGetFloati_v(GLenum target, GLuint index, [GLfloat] data)
extern glGetDoublei_v(GLenum target, GLuint index, [GLdouble] data)

export COPY_READ_BUFFER_BINDING() => u64       = 0x8F36
export COPY_WRITE_BUFFER_BINDING() => u64      = 0x8F37
export TRANSFORM_FEEDBACK_ACTIVE() => u64      = 0x8E24
export TRANSFORM_FEEDBACK_PAUSED() => u64      = 0x8E23
export UNPACK_COMPRESSED_BLOCK_WIDTH() => u64  = 0x9127
export UNPACK_COMPRESSED_BLOCK_HEIGHT() => u64 = 0x9128
export UNPACK_COMPRESSED_BLOCK_DEPTH() => u64  = 0x9129
export UNPACK_COMPRESSED_BLOCK_SIZE() => u64   = 0x912A
export PACK_COMPRESSED_BLOCK_WIDTH() => u64    = 0x912B
export PACK_COMPRESSED_BLOCK_HEIGHT() => u64   = 0x912C
export PACK_COMPRESSED_BLOCK_DEPTH() => u64    = 0x912D
export PACK_COMPRESSED_BLOCK_SIZE() => u64     = 0x912E
export NUM_SAMPLE_COUNTS() => u64              = 0x9380
export MIN_MAP_BUFFER_ALIGNMENT() => u64       = 0x90BC
export ATOMIC_COUNTER_BUFFER() => u64          = 0x92C0
export ATOMIC_COUNTER_BUFFER_BINDING() => u64  = 0x92C1
export ATOMIC_COUNTER_BUFFER_START() => u64    = 0x92C2
export ATOMIC_COUNTER_BUFFER_SIZE() => u64     = 0x92C3
export ATOMIC_COUNTER_BUFFER_DATA_SIZE() => u64 = 0x92C4
export ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS() => u64 = 0x92C5
export ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES() => u64 = 0x92C6
export ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER() => u64 = 0x92C7
export ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER() => u64 = 0x92C8
export ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER() => u64 = 0x92C9
export ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER() => u64 = 0x92CA
export ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER() => u64 = 0x92CB
export MAX_VERTEX_ATOMIC_COUNTER_BUFFERS() => u64 = 0x92CC
export MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS() => u64 = 0x92CD
export MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS() => u64 = 0x92CE
export MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS() => u64 = 0x92CF
export MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS() => u64 = 0x92D0
export MAX_COMBINED_ATOMIC_COUNTER_BUFFERS() => u64 = 0x92D1
export MAX_VERTEX_ATOMIC_COUNTERS() => u64     = 0x92D2
export MAX_TESS_CONTROL_ATOMIC_COUNTERS() => u64 = 0x92D3
export MAX_TESS_EVALUATION_ATOMIC_COUNTERS() => u64 = 0x92D4
export MAX_GEOMETRY_ATOMIC_COUNTERS() => u64   = 0x92D5
export MAX_FRAGMENT_ATOMIC_COUNTERS() => u64   = 0x92D6
export MAX_COMBINED_ATOMIC_COUNTERS() => u64   = 0x92D7
export MAX_ATOMIC_COUNTER_BUFFER_SIZE() => u64 = 0x92D8
export MAX_ATOMIC_COUNTER_BUFFER_BINDINGS() => u64 = 0x92DC
export ACTIVE_ATOMIC_COUNTER_BUFFERS() => u64  = 0x92D9
export UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX() => u64 = 0x92DA
export UNSIGNED_INT_ATOMIC_COUNTER() => u64    = 0x92DB
export VERTEX_ATTRIB_ARRAY_BARRIER_BIT() => u64 = 0x00000001
export ELEMENT_ARRAY_BARRIER_BIT() => u64      = 0x00000002
export UNIFORM_BARRIER_BIT() => u64            = 0x00000004
export TEXTURE_FETCH_BARRIER_BIT() => u64      = 0x00000008
export SHADER_IMAGE_ACCESS_BARRIER_BIT() => u64 = 0x00000020
export COMMAND_BARRIER_BIT() => u64            = 0x00000040
export PIXEL_BUFFER_BARRIER_BIT() => u64       = 0x00000080
export TEXTURE_UPDATE_BARRIER_BIT() => u64     = 0x00000100
export BUFFER_UPDATE_BARRIER_BIT() => u64      = 0x00000200
export FRAMEBUFFER_BARRIER_BIT() => u64        = 0x00000400
export TRANSFORM_FEEDBACK_BARRIER_BIT() => u64 = 0x00000800
export ATOMIC_COUNTER_BARRIER_BIT() => u64     = 0x00001000
export ALL_BARRIER_BITS() => u64               = 0xFFFFFFFF
export MAX_IMAGE_UNITS() => u64                = 0x8F38
export MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS() => u64 = 0x8F39
export IMAGE_BINDING_NAME() => u64             = 0x8F3A
export IMAGE_BINDING_LEVEL() => u64            = 0x8F3B
export IMAGE_BINDING_LAYERED() => u64          = 0x8F3C
export IMAGE_BINDING_LAYER() => u64            = 0x8F3D
export IMAGE_BINDING_ACCESS() => u64           = 0x8F3E
export IMAGE_1D() => u64                       = 0x904C
export IMAGE_2D() => u64                       = 0x904D
export IMAGE_3D() => u64                       = 0x904E
export IMAGE_2D_RECT() => u64                  = 0x904F
export IMAGE_CUBE() => u64                     = 0x9050
export IMAGE_BUFFER() => u64                   = 0x9051
export IMAGE_1D_ARRAY() => u64                 = 0x9052
export IMAGE_2D_ARRAY() => u64                 = 0x9053
export IMAGE_CUBE_MAP_ARRAY() => u64           = 0x9054
export IMAGE_2D_MULTISAMPLE() => u64           = 0x9055
export IMAGE_2D_MULTISAMPLE_ARRAY() => u64     = 0x9056
export INT_IMAGE_1D() => u64                   = 0x9057
export INT_IMAGE_2D() => u64                   = 0x9058
export INT_IMAGE_3D() => u64                   = 0x9059
export INT_IMAGE_2D_RECT() => u64              = 0x905A
export INT_IMAGE_CUBE() => u64                 = 0x905B
export INT_IMAGE_BUFFER() => u64               = 0x905C
export INT_IMAGE_1D_ARRAY() => u64             = 0x905D
export INT_IMAGE_2D_ARRAY() => u64             = 0x905E
export INT_IMAGE_CUBE_MAP_ARRAY() => u64       = 0x905F
export INT_IMAGE_2D_MULTISAMPLE() => u64       = 0x9060
export INT_IMAGE_2D_MULTISAMPLE_ARRAY() => u64 = 0x9061
export UNSIGNED_INT_IMAGE_1D() => u64          = 0x9062
export UNSIGNED_INT_IMAGE_2D() => u64          = 0x9063
export UNSIGNED_INT_IMAGE_3D() => u64          = 0x9064
export UNSIGNED_INT_IMAGE_2D_RECT() => u64     = 0x9065
export UNSIGNED_INT_IMAGE_CUBE() => u64        = 0x9066
export UNSIGNED_INT_IMAGE_BUFFER() => u64      = 0x9067
export UNSIGNED_INT_IMAGE_1D_ARRAY() => u64    = 0x9068
export UNSIGNED_INT_IMAGE_2D_ARRAY() => u64    = 0x9069
export UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY() => u64 = 0x906A
export UNSIGNED_INT_IMAGE_2D_MULTISAMPLE() => u64 = 0x906B
export UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY() => u64 = 0x906C
export MAX_IMAGE_SAMPLES() => u64              = 0x906D
export IMAGE_BINDING_FORMAT() => u64           = 0x906E
export IMAGE_FORMAT_COMPATIBILITY_TYPE() => u64 = 0x90C7
export IMAGE_FORMAT_COMPATIBILITY_BY_SIZE() => u64 = 0x90C8
export IMAGE_FORMAT_COMPATIBILITY_BY_CLASS() => u64 = 0x90C9
export MAX_VERTEX_IMAGE_UNIFORMS() => u64      = 0x90CA
export MAX_TESS_CONTROL_IMAGE_UNIFORMS() => u64 = 0x90CB
export MAX_TESS_EVALUATION_IMAGE_UNIFORMS() => u64 = 0x90CC
export MAX_GEOMETRY_IMAGE_UNIFORMS() => u64    = 0x90CD
export MAX_FRAGMENT_IMAGE_UNIFORMS() => u64    = 0x90CE
export MAX_COMBINED_IMAGE_UNIFORMS() => u64    = 0x90CF
export COMPRESSED_RGBA_BPTC_UNORM() => u64     = 0x8E8C
export COMPRESSED_SRGB_ALPHA_BPTC_UNORM() => u64 = 0x8E8D
export COMPRESSED_RGB_BPTC_SIGNED_FLOAT() => u64 = 0x8E8E
export COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT() => u64 = 0x8E8F
export TEXTURE_IMMUTABLE_FORMAT() => u64       = 0x912F

type PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = [(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)]
type PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = [(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount, GLuint baseinstance)]
type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = [(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)]
type PFNGLGETINTERNALFORMATIVPROC = [(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, [GLint] params)]
type PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = [(GLuint program, GLuint bufferIndex, GLenum pname, [GLint] params)]
type PFNGLBINDIMAGETEXTUREPROC = [(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)]
type PFNGLMEMORYBARRIERPROC = [(GLbitfield barriers)]
type PFNGLTEXSTORAGE1DPROC = [(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)]
type PFNGLTEXSTORAGE2DPROC = [(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLTEXSTORAGE3DPROC = [(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)]
type PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = [(GLenum mode, GLuint id, GLsizei instancecount)]
type PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = [(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)]

extern glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
extern glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount, GLuint baseinstance)
extern glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
extern glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, [GLint] params)
extern glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, [GLint] params)
extern glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
extern glMemoryBarrier(GLbitfield barriers)
extern glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
extern glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
extern glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
extern glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount)
extern glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)

type GLDEBUGPROC = [(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,[GLchar] message,[] userParam)]

export NUM_SHADING_LANGUAGE_VERSIONS() => u64  = 0x82E9
export VERTEX_ATTRIB_ARRAY_LONG() => u64       = 0x874E
export COMPRESSED_RGB8_ETC2() => u64           = 0x9274
export COMPRESSED_SRGB8_ETC2() => u64          = 0x9275
export COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2() => u64 = 0x9276
export COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2() => u64 = 0x9277
export COMPRESSED_RGBA8_ETC2_EAC() => u64      = 0x9278
export COMPRESSED_SRGB8_ALPHA8_ETC2_EAC() => u64 = 0x9279
export COMPRESSED_R11_EAC() => u64             = 0x9270
export COMPRESSED_SIGNED_R11_EAC() => u64      = 0x9271
export COMPRESSED_RG11_EAC() => u64            = 0x9272
export COMPRESSED_SIGNED_RG11_EAC() => u64     = 0x9273
export PRIMITIVE_RESTART_FIXED_INDEX() => u64  = 0x8D69
export ANY_SAMPLES_PASSED_CONSERVATIVE() => u64 = 0x8D6A
export MAX_ELEMENT_INDEX() => u64              = 0x8D6B
export COMPUTE_SHADER() => u64                 = 0x91B9
export MAX_COMPUTE_UNIFORM_BLOCKS() => u64     = 0x91BB
export MAX_COMPUTE_TEXTURE_IMAGE_UNITS() => u64 = 0x91BC
export MAX_COMPUTE_IMAGE_UNIFORMS() => u64     = 0x91BD
export MAX_COMPUTE_SHARED_MEMORY_SIZE() => u64 = 0x8262
export MAX_COMPUTE_UNIFORM_COMPONENTS() => u64 = 0x8263
export MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS() => u64 = 0x8264
export MAX_COMPUTE_ATOMIC_COUNTERS() => u64    = 0x8265
export MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS() => u64 = 0x8266
export MAX_COMPUTE_WORK_GROUP_INVOCATIONS() => u64 = 0x90EB
export MAX_COMPUTE_WORK_GROUP_COUNT() => u64   = 0x91BE
export MAX_COMPUTE_WORK_GROUP_SIZE() => u64    = 0x91BF
export COMPUTE_WORK_GROUP_SIZE() => u64        = 0x8267
export UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER() => u64 = 0x90EC
export ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER() => u64 = 0x90ED
export DISPATCH_INDIRECT_BUFFER() => u64       = 0x90EE
export DISPATCH_INDIRECT_BUFFER_BINDING() => u64 = 0x90EF
export COMPUTE_SHADER_BIT() => u64             = 0x00000020
export DEBUG_OUTPUT_SYNCHRONOUS() => u64       = 0x8242
export DEBUG_NEXT_LOGGED_MESSAGE_LENGTH() => u64 = 0x8243
export DEBUG_CALLBACK_FUNCTION() => u64        = 0x8244
export DEBUG_CALLBACK_USER_PARAM() => u64      = 0x8245
export DEBUG_SOURCE_API() => u64               = 0x8246
export DEBUG_SOURCE_WINDOW_SYSTEM() => u64     = 0x8247
export DEBUG_SOURCE_SHADER_COMPILER() => u64   = 0x8248
export DEBUG_SOURCE_THIRD_PARTY() => u64       = 0x8249
export DEBUG_SOURCE_APPLICATION() => u64       = 0x824A
export DEBUG_SOURCE_OTHER() => u64             = 0x824B
export DEBUG_TYPE_ERROR() => u64               = 0x824C
export DEBUG_TYPE_DEPRECATED_BEHAVIOR() => u64 = 0x824D
export DEBUG_TYPE_UNDEFINED_BEHAVIOR() => u64  = 0x824E
export DEBUG_TYPE_PORTABILITY() => u64         = 0x824F
export DEBUG_TYPE_PERFORMANCE() => u64         = 0x8250
export DEBUG_TYPE_OTHER() => u64               = 0x8251
export MAX_DEBUG_MESSAGE_LENGTH() => u64       = 0x9143
export MAX_DEBUG_LOGGED_MESSAGES() => u64      = 0x9144
export DEBUG_LOGGED_MESSAGES() => u64          = 0x9145
export DEBUG_SEVERITY_HIGH() => u64            = 0x9146
export DEBUG_SEVERITY_MEDIUM() => u64          = 0x9147
export DEBUG_SEVERITY_LOW() => u64             = 0x9148
export DEBUG_TYPE_MARKER() => u64              = 0x8268
export DEBUG_TYPE_PUSH_GROUP() => u64          = 0x8269
export DEBUG_TYPE_POP_GROUP() => u64           = 0x826A
export DEBUG_SEVERITY_NOTIFICATION() => u64    = 0x826B
export MAX_DEBUG_GROUP_STACK_DEPTH() => u64    = 0x826C
export DEBUG_GROUP_STACK_DEPTH() => u64        = 0x826D
export BUFFER() => u64                         = 0x82E0
export SHADER() => u64                         = 0x82E1
export PROGRAM() => u64                        = 0x82E2
export QUERY() => u64                          = 0x82E3
export PROGRAM_PIPELINE() => u64               = 0x82E4
export SAMPLER() => u64                        = 0x82E6
export MAX_LABEL_LENGTH() => u64               = 0x82E8
export DEBUG_OUTPUT() => u64                   = 0x92E0
export CONTEXT_FLAG_DEBUG_BIT() => u64         = 0x00000002
export MAX_UNIFORM_LOCATIONS() => u64          = 0x826E
export FRAMEBUFFER_DEFAULT_WIDTH() => u64      = 0x9310
export FRAMEBUFFER_DEFAULT_HEIGHT() => u64     = 0x9311
export FRAMEBUFFER_DEFAULT_LAYERS() => u64     = 0x9312
export FRAMEBUFFER_DEFAULT_SAMPLES() => u64    = 0x9313
export FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS() => u64 = 0x9314
export MAX_FRAMEBUFFER_WIDTH() => u64          = 0x9315
export MAX_FRAMEBUFFER_HEIGHT() => u64         = 0x9316
export MAX_FRAMEBUFFER_LAYERS() => u64         = 0x9317
export MAX_FRAMEBUFFER_SAMPLES() => u64        = 0x9318
export INTERNALFORMAT_SUPPORTED() => u64       = 0x826F
export INTERNALFORMAT_PREFERRED() => u64       = 0x8270
export INTERNALFORMAT_RED_SIZE() => u64        = 0x8271
export INTERNALFORMAT_GREEN_SIZE() => u64      = 0x8272
export INTERNALFORMAT_BLUE_SIZE() => u64       = 0x8273
export INTERNALFORMAT_ALPHA_SIZE() => u64      = 0x8274
export INTERNALFORMAT_DEPTH_SIZE() => u64      = 0x8275
export INTERNALFORMAT_STENCIL_SIZE() => u64    = 0x8276
export INTERNALFORMAT_SHARED_SIZE() => u64     = 0x8277
export INTERNALFORMAT_RED_TYPE() => u64        = 0x8278
export INTERNALFORMAT_GREEN_TYPE() => u64      = 0x8279
export INTERNALFORMAT_BLUE_TYPE() => u64       = 0x827A
export INTERNALFORMAT_ALPHA_TYPE() => u64      = 0x827B
export INTERNALFORMAT_DEPTH_TYPE() => u64      = 0x827C
export INTERNALFORMAT_STENCIL_TYPE() => u64    = 0x827D
export MAX_WIDTH() => u64                      = 0x827E
export MAX_HEIGHT() => u64                     = 0x827F
export MAX_DEPTH() => u64                      = 0x8280
export MAX_LAYERS() => u64                     = 0x8281
export MAX_COMBINED_DIMENSIONS() => u64        = 0x8282
export COLOR_COMPONENTS() => u64               = 0x8283
export DEPTH_COMPONENTS() => u64               = 0x8284
export STENCIL_COMPONENTS() => u64             = 0x8285
export COLOR_RENDERABLE() => u64               = 0x8286
export DEPTH_RENDERABLE() => u64               = 0x8287
export STENCIL_RENDERABLE() => u64             = 0x8288
export FRAMEBUFFER_RENDERABLE() => u64         = 0x8289
export FRAMEBUFFER_RENDERABLE_LAYERED() => u64 = 0x828A
export FRAMEBUFFER_BLEND() => u64              = 0x828B
export READ_PIXELS() => u64                    = 0x828C
export READ_PIXELS_FORMAT() => u64             = 0x828D
export READ_PIXELS_TYPE() => u64               = 0x828E
export TEXTURE_IMAGE_FORMAT() => u64           = 0x828F
export TEXTURE_IMAGE_TYPE() => u64             = 0x8290
export GET_TEXTURE_IMAGE_FORMAT() => u64       = 0x8291
export GET_TEXTURE_IMAGE_TYPE() => u64         = 0x8292
export MIPMAP() => u64                         = 0x8293
export MANUAL_GENERATE_MIPMAP() => u64         = 0x8294
export AUTO_GENERATE_MIPMAP() => u64           = 0x8295
export COLOR_ENCODING() => u64                 = 0x8296
export SRGB_READ() => u64                      = 0x8297
export SRGB_WRITE() => u64                     = 0x8298
export FILTER() => u64                         = 0x829A
export VERTEX_TEXTURE() => u64                 = 0x829B
export TESS_CONTROL_TEXTURE() => u64           = 0x829C
export TESS_EVALUATION_TEXTURE() => u64        = 0x829D
export GEOMETRY_TEXTURE() => u64               = 0x829E
export FRAGMENT_TEXTURE() => u64               = 0x829F
export COMPUTE_TEXTURE() => u64                = 0x82A0
export TEXTURE_SHADOW() => u64                 = 0x82A1
export TEXTURE_GATHER() => u64                 = 0x82A2
export TEXTURE_GATHER_SHADOW() => u64          = 0x82A3
export SHADER_IMAGE_LOAD() => u64              = 0x82A4
export SHADER_IMAGE_STORE() => u64             = 0x82A5
export SHADER_IMAGE_ATOMIC() => u64            = 0x82A6
export IMAGE_TEXEL_SIZE() => u64               = 0x82A7
export IMAGE_COMPATIBILITY_CLASS() => u64      = 0x82A8
export IMAGE_PIXEL_FORMAT() => u64             = 0x82A9
export IMAGE_PIXEL_TYPE() => u64               = 0x82AA
export SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST() => u64 = 0x82AC
export SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST() => u64 = 0x82AD
export SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE() => u64 = 0x82AE
export SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE() => u64 = 0x82AF
export TEXTURE_COMPRESSED_BLOCK_WIDTH() => u64 = 0x82B1
export TEXTURE_COMPRESSED_BLOCK_HEIGHT() => u64 = 0x82B2
export TEXTURE_COMPRESSED_BLOCK_SIZE() => u64  = 0x82B3
export CLEAR_BUFFER() => u64                   = 0x82B4
export TEXTURE_VIEW() => u64                   = 0x82B5
export VIEW_COMPATIBILITY_CLASS() => u64       = 0x82B6
export FULL_SUPPORT() => u64                   = 0x82B7
export CAVEAT_SUPPORT() => u64                 = 0x82B8
export IMAGE_CLASS_4_X_32() => u64             = 0x82B9
export IMAGE_CLASS_2_X_32() => u64             = 0x82BA
export IMAGE_CLASS_1_X_32() => u64             = 0x82BB
export IMAGE_CLASS_4_X_16() => u64             = 0x82BC
export IMAGE_CLASS_2_X_16() => u64             = 0x82BD
export IMAGE_CLASS_1_X_16() => u64             = 0x82BE
export IMAGE_CLASS_4_X_8() => u64              = 0x82BF
export IMAGE_CLASS_2_X_8() => u64              = 0x82C0
export IMAGE_CLASS_1_X_8() => u64              = 0x82C1
export IMAGE_CLASS_11_11_10() => u64           = 0x82C2
export IMAGE_CLASS_10_10_10_2() => u64         = 0x82C3
export VIEW_CLASS_128_BITS() => u64            = 0x82C4
export VIEW_CLASS_96_BITS() => u64             = 0x82C5
export VIEW_CLASS_64_BITS() => u64             = 0x82C6
export VIEW_CLASS_48_BITS() => u64             = 0x82C7
export VIEW_CLASS_32_BITS() => u64             = 0x82C8
export VIEW_CLASS_24_BITS() => u64             = 0x82C9
export VIEW_CLASS_16_BITS() => u64             = 0x82CA
export VIEW_CLASS_8_BITS() => u64              = 0x82CB
export VIEW_CLASS_S3TC_DXT1_RGB() => u64       = 0x82CC
export VIEW_CLASS_S3TC_DXT1_RGBA() => u64      = 0x82CD
export VIEW_CLASS_S3TC_DXT3_RGBA() => u64      = 0x82CE
export VIEW_CLASS_S3TC_DXT5_RGBA() => u64      = 0x82CF
export VIEW_CLASS_RGTC1_RED() => u64           = 0x82D0
export VIEW_CLASS_RGTC2_RG() => u64            = 0x82D1
export VIEW_CLASS_BPTC_UNORM() => u64          = 0x82D2
export VIEW_CLASS_BPTC_FLOAT() => u64          = 0x82D3
export UNIFORM() => u64                        = 0x92E1
export UNIFORM_BLOCK() => u64                  = 0x92E2
export PROGRAM_INPUT() => u64                  = 0x92E3
export PROGRAM_OUTPUT() => u64                 = 0x92E4
export BUFFER_VARIABLE() => u64                = 0x92E5
export SHADER_STORAGE_BLOCK() => u64           = 0x92E6
export VERTEX_SUBROUTINE() => u64              = 0x92E8
export TESS_CONTROL_SUBROUTINE() => u64        = 0x92E9
export TESS_EVALUATION_SUBROUTINE() => u64     = 0x92EA
export GEOMETRY_SUBROUTINE() => u64            = 0x92EB
export FRAGMENT_SUBROUTINE() => u64            = 0x92EC
export COMPUTE_SUBROUTINE() => u64             = 0x92ED
export VERTEX_SUBROUTINE_UNIFORM() => u64      = 0x92EE
export TESS_CONTROL_SUBROUTINE_UNIFORM() => u64 = 0x92EF
export TESS_EVALUATION_SUBROUTINE_UNIFORM() => u64 = 0x92F0
export GEOMETRY_SUBROUTINE_UNIFORM() => u64    = 0x92F1
export FRAGMENT_SUBROUTINE_UNIFORM() => u64    = 0x92F2
export COMPUTE_SUBROUTINE_UNIFORM() => u64     = 0x92F3
export TRANSFORM_FEEDBACK_VARYING() => u64     = 0x92F4
export ACTIVE_RESOURCES() => u64               = 0x92F5
export MAX_NAME_LENGTH() => u64                = 0x92F6
export MAX_NUM_ACTIVE_VARIABLES() => u64       = 0x92F7
export MAX_NUM_COMPATIBLE_SUBROUTINES() => u64 = 0x92F8
export NAME_LENGTH() => u64                    = 0x92F9
export TYPE() => u64                           = 0x92FA
export ARRAY_SIZE() => u64                     = 0x92FB
export OFFSET() => u64                         = 0x92FC
export BLOCK_INDEX() => u64                    = 0x92FD
export ARRAY_STRIDE() => u64                   = 0x92FE
export MATRIX_STRIDE() => u64                  = 0x92FF
export IS_ROW_MAJOR() => u64                   = 0x9300
export ATOMIC_COUNTER_BUFFER_INDEX() => u64    = 0x9301
export BUFFER_BINDING() => u64                 = 0x9302
export BUFFER_DATA_SIZE() => u64               = 0x9303
export NUM_ACTIVE_VARIABLES() => u64           = 0x9304
export ACTIVE_VARIABLES() => u64               = 0x9305
export REFERENCED_BY_VERTEX_SHADER() => u64    = 0x9306
export REFERENCED_BY_TESS_CONTROL_SHADER() => u64 = 0x9307
export REFERENCED_BY_TESS_EVALUATION_SHADER() => u64 = 0x9308
export REFERENCED_BY_GEOMETRY_SHADER() => u64  = 0x9309
export REFERENCED_BY_FRAGMENT_SHADER() => u64  = 0x930A
export REFERENCED_BY_COMPUTE_SHADER() => u64   = 0x930B
export TOP_LEVEL_ARRAY_SIZE() => u64           = 0x930C
export TOP_LEVEL_ARRAY_STRIDE() => u64         = 0x930D
export LOCATION() => u64                       = 0x930E
export LOCATION_INDEX() => u64                 = 0x930F
export IS_PER_PATCH() => u64                   = 0x92E7
export SHADER_STORAGE_BUFFER() => u64          = 0x90D2
export SHADER_STORAGE_BUFFER_BINDING() => u64  = 0x90D3
export SHADER_STORAGE_BUFFER_START() => u64    = 0x90D4
export SHADER_STORAGE_BUFFER_SIZE() => u64     = 0x90D5
export MAX_VERTEX_SHADER_STORAGE_BLOCKS() => u64 = 0x90D6
export MAX_GEOMETRY_SHADER_STORAGE_BLOCKS() => u64 = 0x90D7
export MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS() => u64 = 0x90D8
export MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS() => u64 = 0x90D9
export MAX_FRAGMENT_SHADER_STORAGE_BLOCKS() => u64 = 0x90DA
export MAX_COMPUTE_SHADER_STORAGE_BLOCKS() => u64 = 0x90DB
export MAX_COMBINED_SHADER_STORAGE_BLOCKS() => u64 = 0x90DC
export MAX_SHADER_STORAGE_BUFFER_BINDINGS() => u64 = 0x90DD
export MAX_SHADER_STORAGE_BLOCK_SIZE() => u64  = 0x90DE
export SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT() => u64 = 0x90DF
export SHADER_STORAGE_BARRIER_BIT() => u64     = 0x00002000
export MAX_COMBINED_SHADER_OUTPUT_RESOURCES() => u64 = 0x8F39
export DEPTH_STENCIL_TEXTURE_MODE() => u64     = 0x90EA
export TEXTURE_BUFFER_OFFSET() => u64          = 0x919D
export TEXTURE_BUFFER_SIZE() => u64            = 0x919E
export TEXTURE_BUFFER_OFFSET_ALIGNMENT() => u64 = 0x919F
export TEXTURE_VIEW_MIN_LEVEL() => u64         = 0x82DB
export TEXTURE_VIEW_NUM_LEVELS() => u64        = 0x82DC
export TEXTURE_VIEW_MIN_LAYER() => u64         = 0x82DD
export TEXTURE_VIEW_NUM_LAYERS() => u64        = 0x82DE
export TEXTURE_IMMUTABLE_LEVELS() => u64       = 0x82DF
export VERTEX_ATTRIB_BINDING() => u64          = 0x82D4
export VERTEX_ATTRIB_RELATIVE_OFFSET() => u64  = 0x82D5
export VERTEX_BINDING_DIVISOR() => u64         = 0x82D6
export VERTEX_BINDING_OFFSET() => u64          = 0x82D7
export VERTEX_BINDING_STRIDE() => u64          = 0x82D8
export MAX_VERTEX_ATTRIB_RELATIVE_OFFSET() => u64 = 0x82D9
export MAX_VERTEX_ATTRIB_BINDINGS() => u64     = 0x82DA
export VERTEX_BINDING_BUFFER() => u64          = 0x8F4F

type PFNGLCLEARBUFFERDATAPROC = [(GLenum target, GLenum internalformat, GLenum format, GLenum type, [] data)]
type PFNGLCLEARBUFFERSUBDATAPROC = [(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, [] data)]
type PFNGLDISPATCHCOMPUTEPROC = [(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)]
type PFNGLDISPATCHCOMPUTEINDIRECTPROC = [(GLintptr indirect)]
type PFNGLCOPYIMAGESUBDATAPROC = [(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)]
type PFNGLFRAMEBUFFERPARAMETERIPROC = [(GLenum target, GLenum pname, GLint param)]
type PFNGLGETFRAMEBUFFERPARAMETERIVPROC = [(GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETINTERNALFORMATI64VPROC = [(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, [GLint64] params)]
type PFNGLINVALIDATETEXSUBIMAGEPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)]
type PFNGLINVALIDATETEXIMAGEPROC = [(GLuint texture, GLint level)]
type PFNGLINVALIDATEBUFFERSUBDATAPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr length)]
type PFNGLINVALIDATEBUFFERDATAPROC = [(GLuint buffer)]
type PFNGLINVALIDATEFRAMEBUFFERPROC = [(GLenum target, GLsizei numAttachments, [GLenum] attachments)]
type PFNGLINVALIDATESUBFRAMEBUFFERPROC = [(GLenum target, GLsizei numAttachments, [GLenum] attachments, GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLMULTIDRAWARRAYSINDIRECTPROC = [(GLenum mode, [] indirect, GLsizei drawcount, GLsizei stride)]
type PFNGLMULTIDRAWELEMENTSINDIRECTPROC = [(GLenum mode, GLenum type, [] indirect, GLsizei drawcount, GLsizei stride)]
type PFNGLGETPROGRAMINTERFACEIVPROC = [(GLuint program, GLenum programInterface, GLenum pname, [GLint] params)]
type PFNGLGETPROGRAMRESOURCEINDEXPROC = [(GLuint program, GLenum programInterface, [GLchar] name) => GLuint]
type PFNGLGETPROGRAMRESOURCENAMEPROC = [(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, [GLsizei] length, [GLchar] name)]
type PFNGLGETPROGRAMRESOURCEIVPROC = [(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, [GLenum] props, GLsizei count, [GLsizei] length, [GLint] params)]
type PFNGLGETPROGRAMRESOURCELOCATIONPROC = [(GLuint program, GLenum programInterface, [GLchar] name) => GLint]
type PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = [(GLuint program, GLenum programInterface, [GLchar] name) => GLint]
type PFNGLSHADERSTORAGEBLOCKBINDINGPROC = [(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)]
type PFNGLTEXBUFFERRANGEPROC = [(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)]
type PFNGLTEXSTORAGE2DMULTISAMPLEPROC = [(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)]
type PFNGLTEXSTORAGE3DMULTISAMPLEPROC = [(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)]
type PFNGLTEXTUREVIEWPROC = [(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)]
type PFNGLBINDVERTEXBUFFERPROC = [(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)]
type PFNGLVERTEXATTRIBFORMATPROC = [(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)]
type PFNGLVERTEXATTRIBIFORMATPROC = [(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)]
type PFNGLVERTEXATTRIBLFORMATPROC = [(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)]
type PFNGLVERTEXATTRIBBINDINGPROC = [(GLuint attribindex, GLuint bindingindex)]
type PFNGLVERTEXBINDINGDIVISORPROC = [(GLuint bindingindex, GLuint divisor)]
type PFNGLDEBUGMESSAGECONTROLPROC = [(GLenum source, GLenum type, GLenum severity, GLsizei count, [GLuint] ids, GLboolean enabled)]
type PFNGLDEBUGMESSAGEINSERTPROC = [(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, [GLchar] buf)]
type PFNGLDEBUGMESSAGECALLBACKPROC = [(GLDEBUGPROC callback, [] userParam)]
type PFNGLGETDEBUGMESSAGELOGPROC = [(GLuint count, GLsizei bufSize, [GLenum] sources, [GLenum] types, [GLuint] ids, [GLenum] severities, [GLsizei] lengths, [GLchar] messageLog) => GLuint]
type PFNGLPUSHDEBUGGROUPPROC = [(GLenum source, GLuint id, GLsizei length, [GLchar] message)]
type PFNGLPOPDEBUGGROUPPROC = [()]
type PFNGLOBJECTLABELPROC = [(GLenum identifier, GLuint name, GLsizei length, [GLchar] label)]
type PFNGLGETOBJECTLABELPROC = [(GLenum identifier, GLuint name, GLsizei bufSize, [GLsizei] length, [GLchar] label)]
type PFNGLOBJECTPTRLABELPROC = [([] ptr, GLsizei length, [GLchar] label)]
type PFNGLGETOBJECTPTRLABELPROC = [([] ptr, GLsizei bufSize, [GLsizei] length, [GLchar] label)]

extern glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, [] data)
extern glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, [] data)
extern glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
extern glDispatchComputeIndirect(GLintptr indirect)
extern glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
extern glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
extern glGetFramebufferParameteriv(GLenum target, GLenum pname, [GLint] params)
extern glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, [GLint64] params)
extern glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
extern glInvalidateTexImage(GLuint texture, GLint level)
extern glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
extern glInvalidateBufferData(GLuint buffer)
extern glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, [GLenum] attachments)
extern glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, [GLenum] attachments, GLint x, GLint y, GLsizei width, GLsizei height)
extern glMultiDrawArraysIndirect(GLenum mode, [] indirect, GLsizei drawcount, GLsizei stride)
extern glMultiDrawElementsIndirect(GLenum mode, GLenum type, [] indirect, GLsizei drawcount, GLsizei stride)
extern glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, [GLint] params)
extern glGetProgramResourceIndex(GLuint program, GLenum programInterface, [GLchar] name) => GLuint
extern glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, [GLsizei] length, [GLchar] name)
extern glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, [GLenum] props, GLsizei count, [GLsizei] length, [GLint] params)
extern glGetProgramResourceLocation(GLuint program, GLenum programInterface, [GLchar] name) => GLint
extern glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, [GLchar] name) => GLint
extern glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
extern glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
extern glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
extern glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
extern glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
extern glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
extern glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
extern glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
extern glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
extern glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
extern glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
extern glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, [GLuint] ids, GLboolean enabled)
extern glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, [GLchar] buf)
extern glDebugMessageCallback(GLDEBUGPROC callback, [] userParam)
extern glGetDebugMessageLog(GLuint count, GLsizei bufSize, [GLenum] sources, [GLenum] types, [GLuint] ids, [GLenum] severities, [GLsizei] lengths, [GLchar] messageLog) => GLuint
extern glPushDebugGroup(GLenum source, GLuint id, GLsizei length, [GLchar] message)
extern glPopDebugGroup()
extern glObjectLabel(GLenum identifier, GLuint name, GLsizei length, [GLchar] label)
extern glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, [GLsizei] length, [GLchar] label)
extern glObjectPtrLabel([] ptr, GLsizei length, [GLchar] label)
extern glGetObjectPtrLabel([] ptr, GLsizei bufSize, [GLsizei] length, [GLchar] label)

export MAX_VERTEX_ATTRIB_STRIDE() => u64       = 0x82E5
export PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED() => u64 = 0x8221
export TEXTURE_BUFFER_BINDING() => u64         = 0x8C2A
export MAP_PERSISTENT_BIT() => u64             = 0x0040
export MAP_COHERENT_BIT() => u64               = 0x0080
export DYNAMIC_STORAGE_BIT() => u64            = 0x0100
export CLIENT_STORAGE_BIT() => u64             = 0x0200
export CLIENT_MAPPED_BUFFER_BARRIER_BIT() => u64 = 0x00004000
export BUFFER_IMMUTABLE_STORAGE() => u64       = 0x821F
export BUFFER_STORAGE_FLAGS() => u64           = 0x8220
export CLEAR_TEXTURE() => u64                  = 0x9365
export LOCATION_COMPONENT() => u64             = 0x934A
export TRANSFORM_FEEDBACK_BUFFER_INDEX() => u64 = 0x934B
export TRANSFORM_FEEDBACK_BUFFER_STRIDE() => u64 = 0x934C
export QUERY_BUFFER() => u64                   = 0x9192
export QUERY_BUFFER_BARRIER_BIT() => u64       = 0x00008000
export QUERY_BUFFER_BINDING() => u64           = 0x9193
export QUERY_RESULT_NO_WAIT() => u64           = 0x9194
export MIRROR_CLAMP_TO_EDGE() => u64           = 0x8743

type PFNGLBUFFERSTORAGEPROC = [(GLenum target, GLsizeiptr size, [] data, GLbitfield flags)]
type PFNGLCLEARTEXIMAGEPROC = [(GLuint texture, GLint level, GLenum format, GLenum type, [] data)]
type PFNGLCLEARTEXSUBIMAGEPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] data)]
type PFNGLBINDBUFFERSBASEPROC = [(GLenum target, GLuint first, GLsizei count, [GLuint] buffers)]
type PFNGLBINDBUFFERSRANGEPROC = [(GLenum target, GLuint first, GLsizei count, [GLuint] buffers, [GLintptr] offsets, [GLsizeiptr] sizes)]
type PFNGLBINDTEXTURESPROC = [(GLuint first, GLsizei count, [GLuint] textures)]
type PFNGLBINDSAMPLERSPROC = [(GLuint first, GLsizei count, [GLuint] samplers)]
type PFNGLBINDIMAGETEXTURESPROC = [(GLuint first, GLsizei count, [GLuint] textures)]
type PFNGLBINDVERTEXBUFFERSPROC = [(GLuint first, GLsizei count, [GLuint] buffers, [GLintptr] offsets, [GLsizei] strides)]

extern glBufferStorage(GLenum target, GLsizeiptr size, [] data, GLbitfield flags)
extern glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, [] data)
extern glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] data)
extern glBindBuffersBase(GLenum target, GLuint first, GLsizei count, [GLuint] buffers)
extern glBindBuffersRange(GLenum target, GLuint first, GLsizei count, [GLuint] buffers, [GLintptr] offsets, [GLsizeiptr] sizes)
extern glBindTextures(GLuint first, GLsizei count, [GLuint] textures)
extern glBindSamplers(GLuint first, GLsizei count, [GLuint] samplers)
extern glBindImageTextures(GLuint first, GLsizei count, [GLuint] textures)
extern glBindVertexBuffers(GLuint first, GLsizei count, [GLuint] buffers, [GLintptr] offsets, [GLsizei] strides)

export CONTEXT_LOST() => u64                   = 0x0507
export NEGATIVE_ONE_TO_ONE() => u64            = 0x935E
export ZERO_TO_ONE() => u64                    = 0x935F
export CLIP_ORIGIN() => u64                    = 0x935C
export CLIP_DEPTH_MODE() => u64                = 0x935D
export QUERY_WAIT_INVERTED() => u64            = 0x8E17
export QUERY_NO_WAIT_INVERTED() => u64         = 0x8E18
export QUERY_BY_REGION_WAIT_INVERTED() => u64  = 0x8E19
export QUERY_BY_REGION_NO_WAIT_INVERTED() => u64 = 0x8E1A
export MAX_CULL_DISTANCES() => u64             = 0x82F9
export MAX_COMBINED_CLIP_AND_CULL_DISTANCES() => u64 = 0x82FA
export TEXTURE_TARGET() => u64                 = 0x1006
export QUERY_TARGET() => u64                   = 0x82EA
export GUILTY_CONTEXT_RESET() => u64           = 0x8253
export INNOCENT_CONTEXT_RESET() => u64         = 0x8254
export UNKNOWN_CONTEXT_RESET() => u64          = 0x8255
export RESET_NOTIFICATION_STRATEGY() => u64    = 0x8256
export LOSE_CONTEXT_ON_RESET() => u64          = 0x8252
export NO_RESET_NOTIFICATION() => u64          = 0x8261
export CONTEXT_FLAG_ROBUST_ACCESS_BIT() => u64 = 0x00000004
export CONTEXT_RELEASE_BEHAVIOR() => u64       = 0x82FB
export CONTEXT_RELEASE_BEHAVIOR_FLUSH() => u64 = 0x82FC

type PFNGLCLIPCONTROLPROC = [(GLenum origin, GLenum depth)]
type PFNGLCREATETRANSFORMFEEDBACKSPROC = [(GLsizei n, [GLuint] ids)]
type PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = [(GLuint xfb, GLuint index, GLuint buffer)]
type PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = [(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)]
type PFNGLGETTRANSFORMFEEDBACKIVPROC = [(GLuint xfb, GLenum pname, [GLint] param)]
type PFNGLGETTRANSFORMFEEDBACKI_VPROC = [(GLuint xfb, GLenum pname, GLuint index, [GLint] param)]
type PFNGLGETTRANSFORMFEEDBACKI64_VPROC = [(GLuint xfb, GLenum pname, GLuint index, [GLint64] param)]
type PFNGLCREATEBUFFERSPROC = [(GLsizei n, [GLuint] buffers)]
type PFNGLNAMEDBUFFERSTORAGEPROC = [(GLuint buffer, GLsizeiptr size, [] data, GLbitfield flags)]
type PFNGLNAMEDBUFFERDATAPROC = [(GLuint buffer, GLsizeiptr size, [] data, GLenum usage)]
type PFNGLNAMEDBUFFERSUBDATAPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data)]
type PFNGLCOPYNAMEDBUFFERSUBDATAPROC = [(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)]
type PFNGLCLEARNAMEDBUFFERDATAPROC = [(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, [] data)]
type PFNGLCLEARNAMEDBUFFERSUBDATAPROC = [(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, [] data)]
type PFNGLMAPNAMEDBUFFERPROC = [(GLuint buffer, GLenum access) => []]
type PFNGLMAPNAMEDBUFFERRANGEPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) => []]
type PFNGLUNMAPNAMEDBUFFERPROC = [(GLuint buffer) => GLboolean]
type PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr length)]
type PFNGLGETNAMEDBUFFERPARAMETERIVPROC = [(GLuint buffer, GLenum pname, [GLint] params)]
type PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = [(GLuint buffer, GLenum pname, [GLint64] params)]
type PFNGLGETNAMEDBUFFERPOINTERVPROC = [(GLuint buffer, GLenum pname, [[]] params)]
type PFNGLGETNAMEDBUFFERSUBDATAPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data)]
type PFNGLCREATEFRAMEBUFFERSPROC = [(GLsizei n, [GLuint] framebuffers)]
type PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = [(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)]
type PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = [(GLuint framebuffer, GLenum pname, GLint param)]
type PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = [(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)]
type PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = [(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)]
type PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = [(GLuint framebuffer, GLenum buf)]
type PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = [(GLuint framebuffer, GLsizei n, [GLenum] bufs)]
type PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = [(GLuint framebuffer, GLenum src)]
type PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = [(GLuint framebuffer, GLsizei numAttachments, [GLenum] attachments)]
type PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = [(GLuint framebuffer, GLsizei numAttachments, [GLenum] attachments, GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = [(GLuint framebuffer, GLenum buffer, GLint drawbuffer, [GLint] value)]
type PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = [(GLuint framebuffer, GLenum buffer, GLint drawbuffer, [GLuint] value)]
type PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = [(GLuint framebuffer, GLenum buffer, GLint drawbuffer, [GLfloat] value)]
type PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = [(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)]
type PFNGLBLITNAMEDFRAMEBUFFERPROC = [(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)]
type PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = [(GLuint framebuffer, GLenum target) => GLenum]
type PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = [(GLuint framebuffer, GLenum pname, [GLint] param)]
type PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = [(GLuint framebuffer, GLenum attachment, GLenum pname, [GLint] params)]
type PFNGLCREATERENDERBUFFERSPROC = [(GLsizei n, [GLuint] renderbuffers)]
type PFNGLNAMEDRENDERBUFFERSTORAGEPROC = [(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = [(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = [(GLuint renderbuffer, GLenum pname, [GLint] params)]
type PFNGLCREATETEXTURESPROC = [(GLenum target, GLsizei n, [GLuint] textures)]
type PFNGLTEXTUREBUFFERPROC = [(GLuint texture, GLenum internalformat, GLuint buffer)]
type PFNGLTEXTUREBUFFERRANGEPROC = [(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)]
type PFNGLTEXTURESTORAGE1DPROC = [(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)]
type PFNGLTEXTURESTORAGE2DPROC = [(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLTEXTURESTORAGE3DPROC = [(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)]
type PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = [(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)]
type PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = [(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)]
type PFNGLTEXTURESUBIMAGE1DPROC = [(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels)]
type PFNGLTEXTURESUBIMAGE2DPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)]
type PFNGLTEXTURESUBIMAGE3DPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels)]
type PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = [(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] data)]
type PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] data)]
type PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] data)]
type PFNGLCOPYTEXTURESUBIMAGE1DPROC = [(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)]
type PFNGLCOPYTEXTURESUBIMAGE2DPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLCOPYTEXTURESUBIMAGE3DPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLTEXTUREPARAMETERFPROC = [(GLuint texture, GLenum pname, GLfloat param)]
type PFNGLTEXTUREPARAMETERFVPROC = [(GLuint texture, GLenum pname, [GLfloat] param)]
type PFNGLTEXTUREPARAMETERIPROC = [(GLuint texture, GLenum pname, GLint param)]
type PFNGLTEXTUREPARAMETERIIVPROC = [(GLuint texture, GLenum pname, [GLint] params)]
type PFNGLTEXTUREPARAMETERIUIVPROC = [(GLuint texture, GLenum pname, [GLuint] params)]
type PFNGLTEXTUREPARAMETERIVPROC = [(GLuint texture, GLenum pname, [GLint] param)]
type PFNGLGENERATETEXTUREMIPMAPPROC = [(GLuint texture)]
type PFNGLBINDTEXTUREUNITPROC = [(GLuint unit, GLuint texture)]
type PFNGLGETTEXTUREIMAGEPROC = [(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, [] pixels)]
type PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = [(GLuint texture, GLint level, GLsizei bufSize, [] pixels)]
type PFNGLGETTEXTURELEVELPARAMETERFVPROC = [(GLuint texture, GLint level, GLenum pname, [GLfloat] params)]
type PFNGLGETTEXTURELEVELPARAMETERIVPROC = [(GLuint texture, GLint level, GLenum pname, [GLint] params)]
type PFNGLGETTEXTUREPARAMETERFVPROC = [(GLuint texture, GLenum pname, [GLfloat] params)]
type PFNGLGETTEXTUREPARAMETERIIVPROC = [(GLuint texture, GLenum pname, [GLint] params)]
type PFNGLGETTEXTUREPARAMETERIUIVPROC = [(GLuint texture, GLenum pname, [GLuint] params)]
type PFNGLGETTEXTUREPARAMETERIVPROC = [(GLuint texture, GLenum pname, [GLint] params)]
type PFNGLCREATEVERTEXARRAYSPROC = [(GLsizei n, [GLuint] arrays)]
type PFNGLDISABLEVERTEXARRAYATTRIBPROC = [(GLuint vaobj, GLuint index)]
type PFNGLENABLEVERTEXARRAYATTRIBPROC = [(GLuint vaobj, GLuint index)]
type PFNGLVERTEXARRAYELEMENTBUFFERPROC = [(GLuint vaobj, GLuint buffer)]
type PFNGLVERTEXARRAYVERTEXBUFFERPROC = [(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)]
type PFNGLVERTEXARRAYVERTEXBUFFERSPROC = [(GLuint vaobj, GLuint first, GLsizei count, [GLuint] buffers, [GLintptr] offsets, [GLsizei] strides)]
type PFNGLVERTEXARRAYATTRIBBINDINGPROC = [(GLuint vaobj, GLuint attribindex, GLuint bindingindex)]
type PFNGLVERTEXARRAYATTRIBFORMATPROC = [(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)]
type PFNGLVERTEXARRAYATTRIBIFORMATPROC = [(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)]
type PFNGLVERTEXARRAYATTRIBLFORMATPROC = [(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)]
type PFNGLVERTEXARRAYBINDINGDIVISORPROC = [(GLuint vaobj, GLuint bindingindex, GLuint divisor)]
type PFNGLGETVERTEXARRAYIVPROC = [(GLuint vaobj, GLenum pname, [GLint] param)]
type PFNGLGETVERTEXARRAYINDEXEDIVPROC = [(GLuint vaobj, GLuint index, GLenum pname, [GLint] param)]
type PFNGLGETVERTEXARRAYINDEXED64IVPROC = [(GLuint vaobj, GLuint index, GLenum pname, [GLint64] param)]
type PFNGLCREATESAMPLERSPROC = [(GLsizei n, [GLuint] samplers)]
type PFNGLCREATEPROGRAMPIPELINESPROC = [(GLsizei n, [GLuint] pipelines)]
type PFNGLCREATEQUERIESPROC = [(GLenum target, GLsizei n, [GLuint] ids)]
type PFNGLGETQUERYBUFFEROBJECTI64VPROC = [(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)]
type PFNGLGETQUERYBUFFEROBJECTIVPROC = [(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)]
type PFNGLGETQUERYBUFFEROBJECTUI64VPROC = [(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)]
type PFNGLGETQUERYBUFFEROBJECTUIVPROC = [(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)]
type PFNGLMEMORYBARRIERBYREGIONPROC = [(GLbitfield barriers)]
type PFNGLGETTEXTURESUBIMAGEPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, [] pixels)]
type PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, [] pixels)]
type PFNGLGETGRAPHICSRESETSTATUSPROC = [() => GLenum]
type PFNGLGETNCOMPRESSEDTEXIMAGEPROC = [(GLenum target, GLint lod, GLsizei bufSize, [] pixels)]
type PFNGLGETNTEXIMAGEPROC = [(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, [] pixels)]
type PFNGLGETNUNIFORMDVPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLdouble] params)]
type PFNGLGETNUNIFORMFVPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLfloat] params)]
type PFNGLGETNUNIFORMIVPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLint] params)]
type PFNGLGETNUNIFORMUIVPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLuint] params)]
type PFNGLREADNPIXELSPROC = [(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, [] data)]
type PFNGLTEXTUREBARRIERPROC = [()]

extern glClipControl(GLenum origin, GLenum depth)
extern glCreateTransformFeedbacks(GLsizei n, [GLuint] ids)
extern glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer)
extern glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
extern glGetTransformFeedbackiv(GLuint xfb, GLenum pname, [GLint] param)
extern glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, [GLint] param)
extern glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, [GLint64] param)
extern glCreateBuffers(GLsizei n, [GLuint] buffers)
extern glNamedBufferStorage(GLuint buffer, GLsizeiptr size, [] data, GLbitfield flags)
extern glNamedBufferData(GLuint buffer, GLsizeiptr size, [] data, GLenum usage)
extern glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data)
extern glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
extern glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, [] data)
extern glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, [] data)
extern glMapNamedBuffer(GLuint buffer, GLenum access) => []
extern glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) => []
extern glUnmapNamedBuffer(GLuint buffer) => GLboolean
extern glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length)
extern glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, [GLint] params)
extern glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, [GLint64] params)
extern glGetNamedBufferPointerv(GLuint buffer, GLenum pname, [[]] params)
extern glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data)
extern glCreateFramebuffers(GLsizei n, [GLuint] framebuffers)
extern glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
extern glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param)
extern glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
extern glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
extern glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf)
extern glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, [GLenum] bufs)
extern glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src)
extern glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, [GLenum] attachments)
extern glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, [GLenum] attachments, GLint x, GLint y, GLsizei width, GLsizei height)
extern glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, [GLint] value)
extern glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, [GLuint] value)
extern glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, [GLfloat] value)
extern glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
extern glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
extern glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) => GLenum
extern glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, [GLint] param)
extern glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, [GLint] params)
extern glCreateRenderbuffers(GLsizei n, [GLuint] renderbuffers)
extern glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
extern glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
extern glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, [GLint] params)
extern glCreateTextures(GLenum target, GLsizei n, [GLuint] textures)
extern glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer)
extern glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
extern glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
extern glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
extern glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
extern glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
extern glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
extern glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels)
extern glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)
extern glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels)
extern glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] data)
extern glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] data)
extern glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] data)
extern glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
extern glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
extern glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
extern glTextureParameterf(GLuint texture, GLenum pname, GLfloat param)
extern glTextureParameterfv(GLuint texture, GLenum pname, [GLfloat] param)
extern glTextureParameteri(GLuint texture, GLenum pname, GLint param)
extern glTextureParameterIiv(GLuint texture, GLenum pname, [GLint] params)
extern glTextureParameterIuiv(GLuint texture, GLenum pname, [GLuint] params)
extern glTextureParameteriv(GLuint texture, GLenum pname, [GLint] param)
extern glGenerateTextureMipmap(GLuint texture)
extern glBindTextureUnit(GLuint unit, GLuint texture)
extern glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, [] pixels)
extern glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, [] pixels)
extern glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, [GLfloat] params)
extern glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, [GLint] params)
extern glGetTextureParameterfv(GLuint texture, GLenum pname, [GLfloat] params)
extern glGetTextureParameterIiv(GLuint texture, GLenum pname, [GLint] params)
extern glGetTextureParameterIuiv(GLuint texture, GLenum pname, [GLuint] params)
extern glGetTextureParameteriv(GLuint texture, GLenum pname, [GLint] params)
extern glCreateVertexArrays(GLsizei n, [GLuint] arrays)
extern glDisableVertexArrayAttrib(GLuint vaobj, GLuint index)
extern glEnableVertexArrayAttrib(GLuint vaobj, GLuint index)
extern glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer)
extern glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
extern glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, [GLuint] buffers, [GLintptr] offsets, [GLsizei] strides)
extern glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
extern glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
extern glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
extern glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
extern glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)
extern glGetVertexArrayiv(GLuint vaobj, GLenum pname, [GLint] param)
extern glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, [GLint] param)
extern glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, [GLint64] param)
extern glCreateSamplers(GLsizei n, [GLuint] samplers)
extern glCreateProgramPipelines(GLsizei n, [GLuint] pipelines)
extern glCreateQueries(GLenum target, GLsizei n, [GLuint] ids)
extern glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
extern glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
extern glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
extern glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
extern glMemoryBarrierByRegion(GLbitfield barriers)
extern glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, [] pixels)
extern glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, [] pixels)
extern glGetGraphicsResetStatus() => GLenum
extern glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, [] pixels)
extern glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, [] pixels)
extern glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, [GLdouble] params)
extern glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, [GLfloat] params)
extern glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, [GLint] params)
extern glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, [GLuint] params)
extern glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, [] data)
extern glTextureBarrier()

export SHADER_BINARY_FORMAT_SPIR_V() => u64    = 0x9551
export SPIR_V_BINARY() => u64                  = 0x9552
export PARAMETER_BUFFER() => u64               = 0x80EE
export PARAMETER_BUFFER_BINDING() => u64       = 0x80EF
export CONTEXT_FLAG_NO_ERROR_BIT() => u64      = 0x00000008
export VERTICES_SUBMITTED() => u64             = 0x82EE
export PRIMITIVES_SUBMITTED() => u64           = 0x82EF
export VERTEX_SHADER_INVOCATIONS() => u64      = 0x82F0
export TESS_CONTROL_SHADER_PATCHES() => u64    = 0x82F1
export TESS_EVALUATION_SHADER_INVOCATIONS() => u64 = 0x82F2
export GEOMETRY_SHADER_PRIMITIVES_EMITTED() => u64 = 0x82F3
export FRAGMENT_SHADER_INVOCATIONS() => u64    = 0x82F4
export COMPUTE_SHADER_INVOCATIONS() => u64     = 0x82F5
export CLIPPING_INPUT_PRIMITIVES() => u64      = 0x82F6
export CLIPPING_OUTPUT_PRIMITIVES() => u64     = 0x82F7
export POLYGON_OFFSET_CLAMP() => u64           = 0x8E1B
export SPIR_V_EXTENSIONS() => u64              = 0x9553
export NUM_SPIR_V_EXTENSIONS() => u64          = 0x9554
export TEXTURE_MAX_ANISOTROPY() => u64         = 0x84FE
export MAX_TEXTURE_MAX_ANISOTROPY() => u64     = 0x84FF
export TRANSFORM_FEEDBACK_OVERFLOW() => u64    = 0x82EC
export TRANSFORM_FEEDBACK_STREAM_OVERFLOW() => u64 = 0x82ED

type PFNGLSPECIALIZESHADERPROC = [(GLuint shader, [GLchar] pEntryPoint, GLuint numSpecializationConstants, [GLuint] pConstantIndex, [GLuint] pConstantValue)]
type PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = [(GLenum mode, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)]
type PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = [(GLenum mode, GLenum type, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)]
type PFNGLPOLYGONOFFSETCLAMPPROC = [(GLfloat factor, GLfloat units, GLfloat clamp)]

extern glSpecializeShader(GLuint shader, [GLchar] pEntryPoint, GLuint numSpecializationConstants, [GLuint] pConstantIndex, [GLuint] pConstantValue)
extern glMultiDrawArraysIndirectCount(GLenum mode, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
extern glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
extern glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp)

export PRIMITIVE_BOUNDING_BOX_ARB() => u64     = 0x92BE
export MULTISAMPLE_LINE_WIDTH_RANGE_ARB() => u64 = 0x9381
export MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB() => u64 = 0x9382

type PFNGLPRIMITIVEBOUNDINGBOXARBPROC = [(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)]

extern glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)

type GLuint64EXT = u64

export UNSIGNED_INT64_ARB() => u64             = 0x140F

type PFNGLGETTEXTUREHANDLEARBPROC = [(GLuint texture) => GLuint64]
type PFNGLGETTEXTURESAMPLERHANDLEARBPROC = [(GLuint texture, GLuint sampler) => GLuint64]
type PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = [(GLuint64 handle)]
type PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = [(GLuint64 handle)]
type PFNGLGETIMAGEHANDLEARBPROC = [(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) => GLuint64]
type PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = [(GLuint64 handle, GLenum access)]
type PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = [(GLuint64 handle)]
type PFNGLUNIFORMHANDLEUI64ARBPROC = [(GLint location, GLuint64 value)]
type PFNGLUNIFORMHANDLEUI64VARBPROC = [(GLint location, GLsizei count, [GLuint64] value)]
type PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = [(GLuint program, GLint location, GLuint64 value)]
type PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64] values)]
type PFNGLISTEXTUREHANDLERESIDENTARBPROC = [(GLuint64 handle) => GLboolean]
type PFNGLISIMAGEHANDLERESIDENTARBPROC = [(GLuint64 handle) => GLboolean]
type PFNGLVERTEXATTRIBL1UI64ARBPROC = [(GLuint index, GLuint64EXT x)]
type PFNGLVERTEXATTRIBL1UI64VARBPROC = [(GLuint index, [GLuint64EXT] v)]
type PFNGLGETVERTEXATTRIBLUI64VARBPROC = [(GLuint index, GLenum pname, [GLuint64EXT] params)]

extern glGetTextureHandleARB(GLuint texture) => GLuint64
extern glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) => GLuint64
extern glMakeTextureHandleResidentARB(GLuint64 handle)
extern glMakeTextureHandleNonResidentARB(GLuint64 handle)
extern glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) => GLuint64
extern glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
extern glMakeImageHandleNonResidentARB(GLuint64 handle)
extern glUniformHandleui64ARB(GLint location, GLuint64 value)
extern glUniformHandleui64vARB(GLint location, GLsizei count, [GLuint64] value)
extern glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
extern glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] values)
extern glIsTextureHandleResidentARB(GLuint64 handle) => GLboolean
extern glIsImageHandleResidentARB(GLuint64 handle) => GLboolean
extern glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
extern glVertexAttribL1ui64vARB(GLuint index, [GLuint64EXT] v)
extern glGetVertexAttribLui64vARB(GLuint index, GLenum pname, [GLuint64EXT] params)

type _cl_context {}
type _cl_event {}

export SYNC_CL_EVENT_ARB() => u64              = 0x8240
export SYNC_CL_EVENT_COMPLETE_ARB() => u64     = 0x8241

type PFNGLCREATESYNCFROMCLEVENTARBPROC = [([_cl_context] context, [_cl_event] event, GLbitfield flags) => GLsync]

extern glCreateSyncFromCLeventARB([_cl_context] context, [_cl_event] event, GLbitfield flags) => GLsync

export MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB() => u64 = 0x9344
export MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB() => u64 = 0x90EB
export MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB() => u64 = 0x9345
export MAX_COMPUTE_FIXED_GROUP_SIZE_ARB() => u64 = 0x91BF

type PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = [(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)]

extern glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)

type GLDEBUGPROCARB = [(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,[GLchar] message,[] userParam)]

export DEBUG_OUTPUT_SYNCHRONOUS_ARB() => u64   = 0x8242
export DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB() => u64 = 0x8243
export DEBUG_CALLBACK_FUNCTION_ARB() => u64    = 0x8244
export DEBUG_CALLBACK_USER_PARAM_ARB() => u64  = 0x8245
export DEBUG_SOURCE_API_ARB() => u64           = 0x8246
export DEBUG_SOURCE_WINDOW_SYSTEM_ARB() => u64 = 0x8247
export DEBUG_SOURCE_SHADER_COMPILER_ARB() => u64 = 0x8248
export DEBUG_SOURCE_THIRD_PARTY_ARB() => u64   = 0x8249
export DEBUG_SOURCE_APPLICATION_ARB() => u64   = 0x824A
export DEBUG_SOURCE_OTHER_ARB() => u64         = 0x824B
export DEBUG_TYPE_ERROR_ARB() => u64           = 0x824C
export DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB() => u64 = 0x824D
export DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB() => u64 = 0x824E
export DEBUG_TYPE_PORTABILITY_ARB() => u64     = 0x824F
export DEBUG_TYPE_PERFORMANCE_ARB() => u64     = 0x8250
export DEBUG_TYPE_OTHER_ARB() => u64           = 0x8251
export MAX_DEBUG_MESSAGE_LENGTH_ARB() => u64   = 0x9143
export MAX_DEBUG_LOGGED_MESSAGES_ARB() => u64  = 0x9144
export DEBUG_LOGGED_MESSAGES_ARB() => u64      = 0x9145
export DEBUG_SEVERITY_HIGH_ARB() => u64        = 0x9146
export DEBUG_SEVERITY_MEDIUM_ARB() => u64      = 0x9147
export DEBUG_SEVERITY_LOW_ARB() => u64         = 0x9148

type PFNGLDEBUGMESSAGECONTROLARBPROC = [(GLenum source, GLenum type, GLenum severity, GLsizei count, [GLuint] ids, GLboolean enabled)]
type PFNGLDEBUGMESSAGEINSERTARBPROC = [(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, [GLchar] buf)]
type PFNGLDEBUGMESSAGECALLBACKARBPROC = [(GLDEBUGPROCARB callback, [] userParam)]
type PFNGLGETDEBUGMESSAGELOGARBPROC = [(GLuint count, GLsizei bufSize, [GLenum] sources, [GLenum] types, [GLuint] ids, [GLenum] severities, [GLsizei] lengths, [GLchar] messageLog) => GLuint]

extern glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, [GLuint] ids, GLboolean enabled)
extern glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, [GLchar] buf)
extern glDebugMessageCallbackARB(GLDEBUGPROCARB callback, [] userParam)
extern glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, [GLenum] sources, [GLenum] types, [GLuint] ids, [GLenum] severities, [GLsizei] lengths, [GLchar] messageLog) => GLuint

type PFNGLBLENDEQUATIONIARBPROC = [(GLuint buf, GLenum mode)]
type PFNGLBLENDEQUATIONSEPARATEIARBPROC = [(GLuint buf, GLenum modeRGB, GLenum modeAlpha)]
type PFNGLBLENDFUNCIARBPROC = [(GLuint buf, GLenum src, GLenum dst)]
type PFNGLBLENDFUNCSEPARATEIARBPROC = [(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)]

extern glBlendEquationiARB(GLuint buf, GLenum mode)
extern glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
extern glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
extern glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)

type PFNGLDRAWARRAYSINSTANCEDARBPROC = [(GLenum mode, GLint first, GLsizei count, GLsizei primcount)]
type PFNGLDRAWELEMENTSINSTANCEDARBPROC = [(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei primcount)]

extern glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
extern glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei primcount)

export LINES_ADJACENCY_ARB() => u64            = 0x000A
export LINE_STRIP_ADJACENCY_ARB() => u64       = 0x000B
export TRIANGLES_ADJACENCY_ARB() => u64        = 0x000C
export TRIANGLE_STRIP_ADJACENCY_ARB() => u64   = 0x000D
export PROGRAM_POINT_SIZE_ARB() => u64         = 0x8642
export MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB() => u64 = 0x8C29
export FRAMEBUFFER_ATTACHMENT_LAYERED_ARB() => u64 = 0x8DA7
export FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB() => u64 = 0x8DA8
export FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB() => u64 = 0x8DA9
export GEOMETRY_SHADER_ARB() => u64            = 0x8DD9
export GEOMETRY_VERTICES_OUT_ARB() => u64      = 0x8DDA
export GEOMETRY_INPUT_TYPE_ARB() => u64        = 0x8DDB
export GEOMETRY_OUTPUT_TYPE_ARB() => u64       = 0x8DDC
export MAX_GEOMETRY_VARYING_COMPONENTS_ARB() => u64 = 0x8DDD
export MAX_VERTEX_VARYING_COMPONENTS_ARB() => u64 = 0x8DDE
export MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB() => u64 = 0x8DDF
export MAX_GEOMETRY_OUTPUT_VERTICES_ARB() => u64 = 0x8DE0
export MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB() => u64 = 0x8DE1

type PFNGLPROGRAMPARAMETERIARBPROC = [(GLuint program, GLenum pname, GLint value)]
type PFNGLFRAMEBUFFERTEXTUREARBPROC = [(GLenum target, GLenum attachment, GLuint texture, GLint level)]
type PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = [(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)]
type PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = [(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)]

extern glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
extern glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
extern glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
extern glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)

export SHADER_BINARY_FORMAT_SPIR_V_ARB() => u64 = 0x9551
export SPIR_V_BINARY_ARB() => u64              = 0x9552

type PFNGLSPECIALIZESHADERARBPROC = [(GLuint shader, [GLchar] pEntryPoint, GLuint numSpecializationConstants, [GLuint] pConstantIndex, [GLuint] pConstantValue)]

extern glSpecializeShaderARB(GLuint shader, [GLchar] pEntryPoint, GLuint numSpecializationConstants, [GLuint] pConstantIndex, [GLuint] pConstantValue)

export INT64_ARB() => u64                      = 0x140E
export INT64_VEC2_ARB() => u64                 = 0x8FE9
export INT64_VEC3_ARB() => u64                 = 0x8FEA
export INT64_VEC4_ARB() => u64                 = 0x8FEB
export UNSIGNED_INT64_VEC2_ARB() => u64        = 0x8FF5
export UNSIGNED_INT64_VEC3_ARB() => u64        = 0x8FF6
export UNSIGNED_INT64_VEC4_ARB() => u64        = 0x8FF7

type PFNGLUNIFORM1I64ARBPROC = [(GLint location, GLint64 x)]
type PFNGLUNIFORM2I64ARBPROC = [(GLint location, GLint64 x, GLint64 y)]
type PFNGLUNIFORM3I64ARBPROC = [(GLint location, GLint64 x, GLint64 y, GLint64 z)]
type PFNGLUNIFORM4I64ARBPROC = [(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)]
type PFNGLUNIFORM1I64VARBPROC = [(GLint location, GLsizei count, [GLint64] value)]
type PFNGLUNIFORM2I64VARBPROC = [(GLint location, GLsizei count, [GLint64] value)]
type PFNGLUNIFORM3I64VARBPROC = [(GLint location, GLsizei count, [GLint64] value)]
type PFNGLUNIFORM4I64VARBPROC = [(GLint location, GLsizei count, [GLint64] value)]
type PFNGLUNIFORM1UI64ARBPROC = [(GLint location, GLuint64 x)]
type PFNGLUNIFORM2UI64ARBPROC = [(GLint location, GLuint64 x, GLuint64 y)]
type PFNGLUNIFORM3UI64ARBPROC = [(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)]
type PFNGLUNIFORM4UI64ARBPROC = [(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)]
type PFNGLUNIFORM1UI64VARBPROC = [(GLint location, GLsizei count, [GLuint64] value)]
type PFNGLUNIFORM2UI64VARBPROC = [(GLint location, GLsizei count, [GLuint64] value)]
type PFNGLUNIFORM3UI64VARBPROC = [(GLint location, GLsizei count, [GLuint64] value)]
type PFNGLUNIFORM4UI64VARBPROC = [(GLint location, GLsizei count, [GLuint64] value)]
type PFNGLGETUNIFORMI64VARBPROC = [(GLuint program, GLint location, [GLint64] params)]
type PFNGLGETUNIFORMUI64VARBPROC = [(GLuint program, GLint location, [GLuint64] params)]
type PFNGLGETNUNIFORMI64VARBPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLint64] params)]
type PFNGLGETNUNIFORMUI64VARBPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLuint64] params)]
type PFNGLPROGRAMUNIFORM1I64ARBPROC = [(GLuint program, GLint location, GLint64 x)]
type PFNGLPROGRAMUNIFORM2I64ARBPROC = [(GLuint program, GLint location, GLint64 x, GLint64 y)]
type PFNGLPROGRAMUNIFORM3I64ARBPROC = [(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)]
type PFNGLPROGRAMUNIFORM4I64ARBPROC = [(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)]
type PFNGLPROGRAMUNIFORM1I64VARBPROC = [(GLuint program, GLint location, GLsizei count, [GLint64] value)]
type PFNGLPROGRAMUNIFORM2I64VARBPROC = [(GLuint program, GLint location, GLsizei count, [GLint64] value)]
type PFNGLPROGRAMUNIFORM3I64VARBPROC = [(GLuint program, GLint location, GLsizei count, [GLint64] value)]
type PFNGLPROGRAMUNIFORM4I64VARBPROC = [(GLuint program, GLint location, GLsizei count, [GLint64] value)]
type PFNGLPROGRAMUNIFORM1UI64ARBPROC = [(GLuint program, GLint location, GLuint64 x)]
type PFNGLPROGRAMUNIFORM2UI64ARBPROC = [(GLuint program, GLint location, GLuint64 x, GLuint64 y)]
type PFNGLPROGRAMUNIFORM3UI64ARBPROC = [(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)]
type PFNGLPROGRAMUNIFORM4UI64ARBPROC = [(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)]
type PFNGLPROGRAMUNIFORM1UI64VARBPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64] value)]
type PFNGLPROGRAMUNIFORM2UI64VARBPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64] value)]
type PFNGLPROGRAMUNIFORM3UI64VARBPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64] value)]
type PFNGLPROGRAMUNIFORM4UI64VARBPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64] value)]

extern glUniform1i64ARB(GLint location, GLint64 x)
extern glUniform2i64ARB(GLint location, GLint64 x, GLint64 y)
extern glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z)
extern glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
extern glUniform1i64vARB(GLint location, GLsizei count, [GLint64] value)
extern glUniform2i64vARB(GLint location, GLsizei count, [GLint64] value)
extern glUniform3i64vARB(GLint location, GLsizei count, [GLint64] value)
extern glUniform4i64vARB(GLint location, GLsizei count, [GLint64] value)
extern glUniform1ui64ARB(GLint location, GLuint64 x)
extern glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y)
extern glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
extern glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
extern glUniform1ui64vARB(GLint location, GLsizei count, [GLuint64] value)
extern glUniform2ui64vARB(GLint location, GLsizei count, [GLuint64] value)
extern glUniform3ui64vARB(GLint location, GLsizei count, [GLuint64] value)
extern glUniform4ui64vARB(GLint location, GLsizei count, [GLuint64] value)
extern glGetUniformi64vARB(GLuint program, GLint location, [GLint64] params)
extern glGetUniformui64vARB(GLuint program, GLint location, [GLuint64] params)
extern glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, [GLint64] params)
extern glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, [GLuint64] params)
extern glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x)
extern glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y)
extern glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)
extern glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
extern glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, [GLint64] value)
extern glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, [GLint64] value)
extern glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, [GLint64] value)
extern glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, [GLint64] value)
extern glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x)
extern glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y)
extern glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
extern glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
extern glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] value)
extern glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] value)
extern glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] value)
extern glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] value)

export PARAMETER_BUFFER_ARB() => u64           = 0x80EE
export PARAMETER_BUFFER_BINDING_ARB() => u64   = 0x80EF

type PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = [(GLenum mode, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)]
type PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = [(GLenum mode, GLenum type, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)]

extern glMultiDrawArraysIndirectCountARB(GLenum mode, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
extern glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)

export VERTEX_ATTRIB_ARRAY_DIVISOR_ARB() => u64 = 0x88FE

type PFNGLVERTEXATTRIBDIVISORARBPROC = [(GLuint index, GLuint divisor)]

extern glVertexAttribDivisorARB(GLuint index, GLuint divisor)

export SRGB_DECODE_ARB() => u64                = 0x8299
export VIEW_CLASS_EAC_R11() => u64             = 0x9383
export VIEW_CLASS_EAC_RG11() => u64            = 0x9384
export VIEW_CLASS_ETC2_RGB() => u64            = 0x9385
export VIEW_CLASS_ETC2_RGBA() => u64           = 0x9386
export VIEW_CLASS_ETC2_EAC_RGBA() => u64       = 0x9387
export VIEW_CLASS_ASTC_4x4_RGBA() => u64       = 0x9388
export VIEW_CLASS_ASTC_5x4_RGBA() => u64       = 0x9389
export VIEW_CLASS_ASTC_5x5_RGBA() => u64       = 0x938A
export VIEW_CLASS_ASTC_6x5_RGBA() => u64       = 0x938B
export VIEW_CLASS_ASTC_6x6_RGBA() => u64       = 0x938C
export VIEW_CLASS_ASTC_8x5_RGBA() => u64       = 0x938D
export VIEW_CLASS_ASTC_8x6_RGBA() => u64       = 0x938E
export VIEW_CLASS_ASTC_8x8_RGBA() => u64       = 0x938F
export VIEW_CLASS_ASTC_10x5_RGBA() => u64      = 0x9390
export VIEW_CLASS_ASTC_10x6_RGBA() => u64      = 0x9391
export VIEW_CLASS_ASTC_10x8_RGBA() => u64      = 0x9392
export VIEW_CLASS_ASTC_10x10_RGBA() => u64     = 0x9393
export VIEW_CLASS_ASTC_12x10_RGBA() => u64     = 0x9394
export VIEW_CLASS_ASTC_12x12_RGBA() => u64     = 0x9395

export MAX_SHADER_COMPILER_THREADS_ARB() => u64 = 0x91B0
export COMPLETION_STATUS_ARB() => u64          = 0x91B1

type PFNGLMAXSHADERCOMPILERTHREADSARBPROC = [(GLuint count)]

extern glMaxShaderCompilerThreadsARB(GLuint count)

export VERTICES_SUBMITTED_ARB() => u64         = 0x82EE
export PRIMITIVES_SUBMITTED_ARB() => u64       = 0x82EF
export VERTEX_SHADER_INVOCATIONS_ARB() => u64  = 0x82F0
export TESS_CONTROL_SHADER_PATCHES_ARB() => u64 = 0x82F1
export TESS_EVALUATION_SHADER_INVOCATIONS_ARB() => u64 = 0x82F2
export GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB() => u64 = 0x82F3
export FRAGMENT_SHADER_INVOCATIONS_ARB() => u64 = 0x82F4
export COMPUTE_SHADER_INVOCATIONS_ARB() => u64 = 0x82F5
export CLIPPING_INPUT_PRIMITIVES_ARB() => u64  = 0x82F6
export CLIPPING_OUTPUT_PRIMITIVES_ARB() => u64 = 0x82F7

export PIXEL_PACK_BUFFER_ARB() => u64          = 0x88EB
export PIXEL_UNPACK_BUFFER_ARB() => u64        = 0x88EC
export PIXEL_PACK_BUFFER_BINDING_ARB() => u64  = 0x88ED
export PIXEL_UNPACK_BUFFER_BINDING_ARB() => u64 = 0x88EF

export CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB() => u64 = 0x00000004
export LOSE_CONTEXT_ON_RESET_ARB() => u64      = 0x8252
export GUILTY_CONTEXT_RESET_ARB() => u64       = 0x8253
export INNOCENT_CONTEXT_RESET_ARB() => u64     = 0x8254
export UNKNOWN_CONTEXT_RESET_ARB() => u64      = 0x8255
export RESET_NOTIFICATION_STRATEGY_ARB() => u64 = 0x8256
export NO_RESET_NOTIFICATION_ARB() => u64      = 0x8261

type PFNGLGETGRAPHICSRESETSTATUSARBPROC = [() => GLenum]
type PFNGLGETNTEXIMAGEARBPROC = [(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, [] img)]
type PFNGLREADNPIXELSARBPROC = [(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, [] data)]
type PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = [(GLenum target, GLint lod, GLsizei bufSize, [] img)]
type PFNGLGETNUNIFORMFVARBPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLfloat] params)]
type PFNGLGETNUNIFORMIVARBPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLint] params)]
type PFNGLGETNUNIFORMUIVARBPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLuint] params)]
type PFNGLGETNUNIFORMDVARBPROC = [(GLuint program, GLint location, GLsizei bufSize, [GLdouble] params)]

extern glGetGraphicsResetStatusARB() => GLenum
extern glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, [] img)
extern glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, [] data)
extern glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, [] img)
extern glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, [GLfloat] params)
extern glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, [GLint] params)
extern glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, [GLuint] params)
extern glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, [GLdouble] params)

export SAMPLE_LOCATION_SUBPIXEL_BITS_ARB() => u64 = 0x933D
export SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB() => u64 = 0x933E
export SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB() => u64 = 0x933F
export PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB() => u64 = 0x9340
export SAMPLE_LOCATION_ARB() => u64            = 0x8E50
export PROGRAMMABLE_SAMPLE_LOCATION_ARB() => u64 = 0x9341
export FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB() => u64 = 0x9342
export FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB() => u64 = 0x9343

type PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = [(GLenum target, GLuint start, GLsizei count, [GLfloat] v)]
type PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = [(GLuint framebuffer, GLuint start, GLsizei count, [GLfloat] v)]
type PFNGLEVALUATEDEPTHVALUESARBPROC = [()]

extern glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, [GLfloat] v)
extern glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, [GLfloat] v)
extern glEvaluateDepthValuesARB()

export SAMPLE_SHADING_ARB() => u64             = 0x8C36
export MIN_SAMPLE_SHADING_VALUE_ARB() => u64   = 0x8C37

type PFNGLMINSAMPLESHADINGARBPROC = [(GLfloat value)]

extern glMinSampleShadingARB(GLfloat value)

export SHADER_INCLUDE_ARB() => u64             = 0x8DAE
export NAMED_STRING_LENGTH_ARB() => u64        = 0x8DE9
export NAMED_STRING_TYPE_ARB() => u64          = 0x8DEA

type PFNGLNAMEDSTRINGARBPROC = [(GLenum type, GLint namelen, [GLchar] name, GLint stringlen, [GLchar] string)]
type PFNGLDELETENAMEDSTRINGARBPROC = [(GLint namelen, [GLchar] name)]
type PFNGLCOMPILESHADERINCLUDEARBPROC = [(GLuint shader, GLsizei count, [[GLchar]] path, [GLint] length)]
type PFNGLISNAMEDSTRINGARBPROC = [(GLint namelen, [GLchar] name) => GLboolean]
type PFNGLGETNAMEDSTRINGARBPROC = [(GLint namelen, [GLchar] name, GLsizei bufSize, [GLint] stringlen, [GLchar] string)]
type PFNGLGETNAMEDSTRINGIVARBPROC = [(GLint namelen, [GLchar] name, GLenum pname, [GLint] params)]

extern glNamedStringARB(GLenum type, GLint namelen, [GLchar] name, GLint stringlen, [GLchar] string)
extern glDeleteNamedStringARB(GLint namelen, [GLchar] name)
extern glCompileShaderIncludeARB(GLuint shader, GLsizei count, [[GLchar]] path, [GLint] length)
extern glIsNamedStringARB(GLint namelen, [GLchar] name) => GLboolean
extern glGetNamedStringARB(GLint namelen, [GLchar] name, GLsizei bufSize, [GLint] stringlen, [GLchar] string)
extern glGetNamedStringivARB(GLint namelen, [GLchar] name, GLenum pname, [GLint] params)

export SPARSE_STORAGE_BIT_ARB() => u64         = 0x0400
export SPARSE_BUFFER_PAGE_SIZE_ARB() => u64    = 0x82F8

type PFNGLBUFFERPAGECOMMITMENTARBPROC = [(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)]
type PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)]
type PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)]

extern glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
extern glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
extern glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)

export TEXTURE_SPARSE_ARB() => u64             = 0x91A6
export VIRTUAL_PAGE_SIZE_INDEX_ARB() => u64    = 0x91A7
export NUM_SPARSE_LEVELS_ARB() => u64          = 0x91AA
export NUM_VIRTUAL_PAGE_SIZES_ARB() => u64     = 0x91A8
export VIRTUAL_PAGE_SIZE_X_ARB() => u64        = 0x9195
export VIRTUAL_PAGE_SIZE_Y_ARB() => u64        = 0x9196
export VIRTUAL_PAGE_SIZE_Z_ARB() => u64        = 0x9197
export MAX_SPARSE_TEXTURE_SIZE_ARB() => u64    = 0x9198
export MAX_SPARSE_3D_TEXTURE_SIZE_ARB() => u64 = 0x9199
export MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB() => u64 = 0x919A
export SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB() => u64 = 0x91A9

type PFNGLTEXPAGECOMMITMENTARBPROC = [(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)]

extern glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)

export CLAMP_TO_BORDER_ARB() => u64            = 0x812D

export TEXTURE_BUFFER_ARB() => u64             = 0x8C2A
export MAX_TEXTURE_BUFFER_SIZE_ARB() => u64    = 0x8C2B
export TEXTURE_BINDING_BUFFER_ARB() => u64     = 0x8C2C
export TEXTURE_BUFFER_DATA_STORE_BINDING_ARB() => u64 = 0x8C2D
export TEXTURE_BUFFER_FORMAT_ARB() => u64      = 0x8C2E

type PFNGLTEXBUFFERARBPROC = [(GLenum target, GLenum internalformat, GLuint buffer)]

extern glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)

export COMPRESSED_RGBA_BPTC_UNORM_ARB() => u64 = 0x8E8C
export COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB() => u64 = 0x8E8D
export COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB() => u64 = 0x8E8E
export COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB() => u64 = 0x8E8F

export TEXTURE_CUBE_MAP_ARRAY_ARB() => u64     = 0x9009
export TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB() => u64 = 0x900A
export PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB() => u64 = 0x900B
export SAMPLER_CUBE_MAP_ARRAY_ARB() => u64     = 0x900C
export SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB() => u64 = 0x900D
export INT_SAMPLER_CUBE_MAP_ARRAY_ARB() => u64 = 0x900E
export UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB() => u64 = 0x900F

export TEXTURE_REDUCTION_MODE_ARB() => u64     = 0x9366
export WEIGHTED_AVERAGE_ARB() => u64           = 0x9367

export MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB() => u64 = 0x8E5E
export MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB() => u64 = 0x8E5F
export MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB() => u64 = 0x8F9F

export MIRRORED_REPEAT_ARB() => u64            = 0x8370

export TRANSFORM_FEEDBACK_OVERFLOW_ARB() => u64 = 0x82EC
export TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB() => u64 = 0x82ED

type PFNGLDEPTHRANGEARRAYDVNVPROC = [(GLuint first, GLsizei count, [GLdouble] v)]
type PFNGLDEPTHRANGEINDEXEDDNVPROC = [(GLuint index, GLdouble n, GLdouble f)]

extern glDepthRangeArraydvNV(GLuint first, GLsizei count, [GLdouble] v)
extern glDepthRangeIndexeddNV(GLuint index, GLdouble n, GLdouble f)

export MULTIPLY_KHR() => u64                   = 0x9294
export SCREEN_KHR() => u64                     = 0x9295
export OVERLAY_KHR() => u64                    = 0x9296
export DARKEN_KHR() => u64                     = 0x9297
export LIGHTEN_KHR() => u64                    = 0x9298
export COLORDODGE_KHR() => u64                 = 0x9299
export COLORBURN_KHR() => u64                  = 0x929A
export HARDLIGHT_KHR() => u64                  = 0x929B
export SOFTLIGHT_KHR() => u64                  = 0x929C
export DIFFERENCE_KHR() => u64                 = 0x929E
export EXCLUSION_KHR() => u64                  = 0x92A0
export HSL_HUE_KHR() => u64                    = 0x92AD
export HSL_SATURATION_KHR() => u64             = 0x92AE
export HSL_COLOR_KHR() => u64                  = 0x92AF
export HSL_LUMINOSITY_KHR() => u64             = 0x92B0

type PFNGLBLENDBARRIERKHRPROC = [()]

extern glBlendBarrierKHR()

export BLEND_ADVANCED_COHERENT_KHR() => u64    = 0x9285

export CONTEXT_FLAG_NO_ERROR_BIT_KHR() => u64  = 0x00000008

export MAX_SHADER_COMPILER_THREADS_KHR() => u64 = 0x91B0
export COMPLETION_STATUS_KHR() => u64          = 0x91B1

type PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = [(GLuint count)]

extern glMaxShaderCompilerThreadsKHR(GLuint count)

export CONTEXT_ROBUST_ACCESS() => u64          = 0x90F3

export SUBGROUP_SIZE_KHR() => u64              = 0x9532
export SUBGROUP_SUPPORTED_STAGES_KHR() => u64  = 0x9533
export SUBGROUP_SUPPORTED_FEATURES_KHR() => u64 = 0x9534
export SUBGROUP_QUAD_ALL_STAGES_KHR() => u64   = 0x9535
export SUBGROUP_FEATURE_BASIC_BIT_KHR() => u64 = 0x00000001
export SUBGROUP_FEATURE_VOTE_BIT_KHR() => u64  = 0x00000002
export SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR() => u64 = 0x00000004
export SUBGROUP_FEATURE_BALLOT_BIT_KHR() => u64 = 0x00000008
export SUBGROUP_FEATURE_SHUFFLE_BIT_KHR() => u64 = 0x00000010
export SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR() => u64 = 0x00000020
export SUBGROUP_FEATURE_CLUSTERED_BIT_KHR() => u64 = 0x00000040
export SUBGROUP_FEATURE_QUAD_BIT_KHR() => u64  = 0x00000080

export COMPRESSED_RGBA_ASTC_4x4_KHR() => u64   = 0x93B0
export COMPRESSED_RGBA_ASTC_5x4_KHR() => u64   = 0x93B1
export COMPRESSED_RGBA_ASTC_5x5_KHR() => u64   = 0x93B2
export COMPRESSED_RGBA_ASTC_6x5_KHR() => u64   = 0x93B3
export COMPRESSED_RGBA_ASTC_6x6_KHR() => u64   = 0x93B4
export COMPRESSED_RGBA_ASTC_8x5_KHR() => u64   = 0x93B5
export COMPRESSED_RGBA_ASTC_8x6_KHR() => u64   = 0x93B6
export COMPRESSED_RGBA_ASTC_8x8_KHR() => u64   = 0x93B7
export COMPRESSED_RGBA_ASTC_10x5_KHR() => u64  = 0x93B8
export COMPRESSED_RGBA_ASTC_10x6_KHR() => u64  = 0x93B9
export COMPRESSED_RGBA_ASTC_10x8_KHR() => u64  = 0x93BA
export COMPRESSED_RGBA_ASTC_10x10_KHR() => u64 = 0x93BB
export COMPRESSED_RGBA_ASTC_12x10_KHR() => u64 = 0x93BC
export COMPRESSED_RGBA_ASTC_12x12_KHR() => u64 = 0x93BD
export COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR() => u64 = 0x93D0
export COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR() => u64 = 0x93D1
export COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR() => u64 = 0x93D2
export COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR() => u64 = 0x93D3
export COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR() => u64 = 0x93D4
export COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR() => u64 = 0x93D5
export COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR() => u64 = 0x93D6
export COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR() => u64 = 0x93D7
export COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR() => u64 = 0x93D8
export COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR() => u64 = 0x93D9
export COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR() => u64 = 0x93DA
export COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR() => u64 = 0x93DB
export COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR() => u64 = 0x93DC
export COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR() => u64 = 0x93DD

export RENDERBUFFER_STORAGE_SAMPLES_AMD() => u64 = 0x91B2
export MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD() => u64 = 0x91B3
export MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD() => u64 = 0x91B4
export MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD() => u64 = 0x91B5
export NUM_SUPPORTED_MULTISAMPLE_MODES_AMD() => u64 = 0x91B6
export SUPPORTED_MULTISAMPLE_MODES_AMD() => u64 = 0x91B7

type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = [(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = [(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)]

extern glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
extern glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)

export COUNTER_TYPE_AMD() => u64               = 0x8BC0
export COUNTER_RANGE_AMD() => u64              = 0x8BC1
export UNSIGNED_INT64_AMD() => u64             = 0x8BC2
export PERCENTAGE_AMD() => u64                 = 0x8BC3
export PERFMON_RESULT_AVAILABLE_AMD() => u64   = 0x8BC4
export PERFMON_RESULT_SIZE_AMD() => u64        = 0x8BC5
export PERFMON_RESULT_AMD() => u64             = 0x8BC6

type PFNGLGETPERFMONITORGROUPSAMDPROC = [([GLint] numGroups, GLsizei groupsSize, [GLuint] groups)]
type PFNGLGETPERFMONITORCOUNTERSAMDPROC = [(GLuint group, [GLint] numCounters, [GLint] maxActiveCounters, GLsizei counterSize, [GLuint] counters)]
type PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = [(GLuint group, GLsizei bufSize, [GLsizei] length, [GLchar] groupString)]
type PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = [(GLuint group, GLuint counter, GLsizei bufSize, [GLsizei] length, [GLchar] counterString)]
type PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = [(GLuint group, GLuint counter, GLenum pname, [] data)]
type PFNGLGENPERFMONITORSAMDPROC = [(GLsizei n, [GLuint] monitors)]
type PFNGLDELETEPERFMONITORSAMDPROC = [(GLsizei n, [GLuint] monitors)]
type PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = [(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, [GLuint] counterList)]
type PFNGLBEGINPERFMONITORAMDPROC = [(GLuint monitor)]
type PFNGLENDPERFMONITORAMDPROC = [(GLuint monitor)]
type PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = [(GLuint monitor, GLenum pname, GLsizei dataSize, [GLuint] data, [GLint] bytesWritten)]

extern glGetPerfMonitorGroupsAMD([GLint] numGroups, GLsizei groupsSize, [GLuint] groups)
extern glGetPerfMonitorCountersAMD(GLuint group, [GLint] numCounters, [GLint] maxActiveCounters, GLsizei counterSize, [GLuint] counters)
extern glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, [GLsizei] length, [GLchar] groupString)
extern glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, [GLsizei] length, [GLchar] counterString)
extern glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, [] data)
extern glGenPerfMonitorsAMD(GLsizei n, [GLuint] monitors)
extern glDeletePerfMonitorsAMD(GLsizei n, [GLuint] monitors)
extern glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, [GLuint] counterList)
extern glBeginPerfMonitorAMD(GLuint monitor)
extern glEndPerfMonitorAMD(GLuint monitor)
extern glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, [GLuint] data, [GLint] bytesWritten)

export RGB_422_APPLE() => u64                  = 0x8A1F
export UNSIGNED_SHORT_8_8_APPLE() => u64       = 0x85BA
export UNSIGNED_SHORT_8_8_REV_APPLE() => u64   = 0x85BB
export RGB_RAW_422_APPLE() => u64              = 0x8A51

type GLeglImageOES = []
type PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = [(GLenum target, GLeglImageOES image, [GLint] attrib_list)]
type PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = [(GLuint texture, GLeglImageOES image, [GLint] attrib_list)]

extern glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, [GLint] attrib_list)
extern glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, [GLint] attrib_list)

export PROGRAM_PIPELINE_OBJECT_EXT() => u64    = 0x8A4F
export PROGRAM_OBJECT_EXT() => u64             = 0x8B40
export SHADER_OBJECT_EXT() => u64              = 0x8B48
export BUFFER_OBJECT_EXT() => u64              = 0x9151
export QUERY_OBJECT_EXT() => u64               = 0x9153
export VERTEX_ARRAY_OBJECT_EXT() => u64        = 0x9154

type PFNGLLABELOBJECTEXTPROC = [(GLenum type, GLuint object, GLsizei length, [GLchar] label)]
type PFNGLGETOBJECTLABELEXTPROC = [(GLenum type, GLuint object, GLsizei bufSize, [GLsizei] length, [GLchar] label)]

extern glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, [GLchar] label)
extern glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, [GLsizei] length, [GLchar] label)

type PFNGLINSERTEVENTMARKEREXTPROC = [(GLsizei length, [GLchar] marker)]
type PFNGLPUSHGROUPMARKEREXTPROC = [(GLsizei length, [GLchar] marker)]
type PFNGLPOPGROUPMARKEREXTPROC = [()]

extern glInsertEventMarkerEXT(GLsizei length, [GLchar] marker)
extern glPushGroupMarkerEXT(GLsizei length, [GLchar] marker)
extern glPopGroupMarkerEXT()

export PROGRAM_MATRIX_EXT() => u64             = 0x8E2D
export TRANSPOSE_PROGRAM_MATRIX_EXT() => u64   = 0x8E2E
export PROGRAM_MATRIX_STACK_DEPTH_EXT() => u64 = 0x8E2F

type PFNGLMATRIXLOADFEXTPROC = [(GLenum mode, [GLfloat] m)]
type PFNGLMATRIXLOADDEXTPROC = [(GLenum mode, [GLdouble] m)]
type PFNGLMATRIXMULTFEXTPROC = [(GLenum mode, [GLfloat] m)]
type PFNGLMATRIXMULTDEXTPROC = [(GLenum mode, [GLdouble] m)]
type PFNGLMATRIXLOADIDENTITYEXTPROC = [(GLenum mode)]
type PFNGLMATRIXROTATEFEXTPROC = [(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)]
type PFNGLMATRIXROTATEDEXTPROC = [(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)]
type PFNGLMATRIXSCALEFEXTPROC = [(GLenum mode, GLfloat x, GLfloat y, GLfloat z)]
type PFNGLMATRIXSCALEDEXTPROC = [(GLenum mode, GLdouble x, GLdouble y, GLdouble z)]
type PFNGLMATRIXTRANSLATEFEXTPROC = [(GLenum mode, GLfloat x, GLfloat y, GLfloat z)]
type PFNGLMATRIXTRANSLATEDEXTPROC = [(GLenum mode, GLdouble x, GLdouble y, GLdouble z)]
type PFNGLMATRIXFRUSTUMEXTPROC = [(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)]
type PFNGLMATRIXORTHOEXTPROC = [(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)]
type PFNGLMATRIXPOPEXTPROC = [(GLenum mode)]
type PFNGLMATRIXPUSHEXTPROC = [(GLenum mode)]
type PFNGLCLIENTATTRIBDEFAULTEXTPROC = [(GLbitfield mask)]
type PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = [(GLbitfield mask)]
type PFNGLTEXTUREPARAMETERFEXTPROC = [(GLuint texture, GLenum target, GLenum pname, GLfloat param)]
type PFNGLTEXTUREPARAMETERFVEXTPROC = [(GLuint texture, GLenum target, GLenum pname, [GLfloat] params)]
type PFNGLTEXTUREPARAMETERIEXTPROC = [(GLuint texture, GLenum target, GLenum pname, GLint param)]
type PFNGLTEXTUREPARAMETERIVEXTPROC = [(GLuint texture, GLenum target, GLenum pname, [GLint] params)]
type PFNGLTEXTUREIMAGE1DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, [] pixels)]
type PFNGLTEXTUREIMAGE2DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [] pixels)]
type PFNGLTEXTURESUBIMAGE1DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels)]
type PFNGLTEXTURESUBIMAGE2DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)]
type PFNGLCOPYTEXTUREIMAGE1DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)]
type PFNGLCOPYTEXTUREIMAGE2DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)]
type PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)]
type PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLGETTEXTUREIMAGEEXTPROC = [(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, [] pixels)]
type PFNGLGETTEXTUREPARAMETERFVEXTPROC = [(GLuint texture, GLenum target, GLenum pname, [GLfloat] params)]
type PFNGLGETTEXTUREPARAMETERIVEXTPROC = [(GLuint texture, GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = [(GLuint texture, GLenum target, GLint level, GLenum pname, [GLfloat] params)]
type PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = [(GLuint texture, GLenum target, GLint level, GLenum pname, [GLint] params)]
type PFNGLTEXTUREIMAGE3DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [] pixels)]
type PFNGLTEXTURESUBIMAGE3DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels)]
type PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLBINDMULTITEXTUREEXTPROC = [(GLenum texunit, GLenum target, GLuint texture)]
type PFNGLMULTITEXCOORDPOINTEREXTPROC = [(GLenum texunit, GLint size, GLenum type, GLsizei stride, [] pointer)]
type PFNGLMULTITEXENVFEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, GLfloat param)]
type PFNGLMULTITEXENVFVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params)]
type PFNGLMULTITEXENVIEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, GLint param)]
type PFNGLMULTITEXENVIVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLint] params)]
type PFNGLMULTITEXGENDEXTPROC = [(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)]
type PFNGLMULTITEXGENDVEXTPROC = [(GLenum texunit, GLenum coord, GLenum pname, [GLdouble] params)]
type PFNGLMULTITEXGENFEXTPROC = [(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)]
type PFNGLMULTITEXGENFVEXTPROC = [(GLenum texunit, GLenum coord, GLenum pname, [GLfloat] params)]
type PFNGLMULTITEXGENIEXTPROC = [(GLenum texunit, GLenum coord, GLenum pname, GLint param)]
type PFNGLMULTITEXGENIVEXTPROC = [(GLenum texunit, GLenum coord, GLenum pname, [GLint] params)]
type PFNGLGETMULTITEXENVFVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params)]
type PFNGLGETMULTITEXENVIVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETMULTITEXGENDVEXTPROC = [(GLenum texunit, GLenum coord, GLenum pname, [GLdouble] params)]
type PFNGLGETMULTITEXGENFVEXTPROC = [(GLenum texunit, GLenum coord, GLenum pname, [GLfloat] params)]
type PFNGLGETMULTITEXGENIVEXTPROC = [(GLenum texunit, GLenum coord, GLenum pname, [GLint] params)]
type PFNGLMULTITEXPARAMETERIEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, GLint param)]
type PFNGLMULTITEXPARAMETERIVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLint] params)]
type PFNGLMULTITEXPARAMETERFEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, GLfloat param)]
type PFNGLMULTITEXPARAMETERFVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params)]
type PFNGLMULTITEXIMAGE1DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, [] pixels)]
type PFNGLMULTITEXIMAGE2DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [] pixels)]
type PFNGLMULTITEXSUBIMAGE1DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels)]
type PFNGLMULTITEXSUBIMAGE2DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)]
type PFNGLCOPYMULTITEXIMAGE1DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)]
type PFNGLCOPYMULTITEXIMAGE2DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)]
type PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)]
type PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLGETMULTITEXIMAGEEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, [] pixels)]
type PFNGLGETMULTITEXPARAMETERFVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params)]
type PFNGLGETMULTITEXPARAMETERIVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLenum pname, [GLfloat] params)]
type PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLenum pname, [GLint] params)]
type PFNGLMULTITEXIMAGE3DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [] pixels)]
type PFNGLMULTITEXSUBIMAGE3DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels)]
type PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = [(GLenum array, GLuint index)]
type PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = [(GLenum array, GLuint index)]
type PFNGLGETFLOATINDEXEDVEXTPROC = [(GLenum target, GLuint index, [GLfloat] data)]
type PFNGLGETDOUBLEINDEXEDVEXTPROC = [(GLenum target, GLuint index, [GLdouble] data)]
type PFNGLGETPOINTERINDEXEDVEXTPROC = [(GLenum target, GLuint index, [[]] data)]
type PFNGLENABLEINDEXEDEXTPROC = [(GLenum target, GLuint index)]
type PFNGLDISABLEINDEXEDEXTPROC = [(GLenum target, GLuint index)]
type PFNGLISENABLEDINDEXEDEXTPROC = [(GLenum target, GLuint index) => GLboolean]
type PFNGLGETINTEGERINDEXEDVEXTPROC = [(GLenum target, GLuint index, [GLint] data)]
type PFNGLGETBOOLEANINDEXEDVEXTPROC = [(GLenum target, GLuint index, [GLboolean] data)]
type PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = [(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] bits)]
type PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = [(GLuint texture, GLenum target, GLint lod, [] img)]
type PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] bits)]
type PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = [(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] bits)]
type PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = [(GLenum texunit, GLenum target, GLint lod, [] img)]
type PFNGLMATRIXLOADTRANSPOSEFEXTPROC = [(GLenum mode, [GLfloat] m)]
type PFNGLMATRIXLOADTRANSPOSEDEXTPROC = [(GLenum mode, [GLdouble] m)]
type PFNGLMATRIXMULTTRANSPOSEFEXTPROC = [(GLenum mode, [GLfloat] m)]
type PFNGLMATRIXMULTTRANSPOSEDEXTPROC = [(GLenum mode, [GLdouble] m)]
type PFNGLNAMEDBUFFERDATAEXTPROC = [(GLuint buffer, GLsizeiptr size, [] data, GLenum usage)]
type PFNGLNAMEDBUFFERSUBDATAEXTPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data)]
type PFNGLMAPNAMEDBUFFEREXTPROC = [(GLuint buffer, GLenum access) => []]
type PFNGLUNMAPNAMEDBUFFEREXTPROC = [(GLuint buffer) => GLboolean]
type PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = [(GLuint buffer, GLenum pname, [GLint] params)]
type PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = [(GLuint buffer, GLenum pname, [[]] params)]
type PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data)]
type PFNGLPROGRAMUNIFORM1FEXTPROC = [(GLuint program, GLint location, GLfloat v0)]
type PFNGLPROGRAMUNIFORM2FEXTPROC = [(GLuint program, GLint location, GLfloat v0, GLfloat v1)]
type PFNGLPROGRAMUNIFORM3FEXTPROC = [(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)]
type PFNGLPROGRAMUNIFORM4FEXTPROC = [(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)]
type PFNGLPROGRAMUNIFORM1IEXTPROC = [(GLuint program, GLint location, GLint v0)]
type PFNGLPROGRAMUNIFORM2IEXTPROC = [(GLuint program, GLint location, GLint v0, GLint v1)]
type PFNGLPROGRAMUNIFORM3IEXTPROC = [(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)]
type PFNGLPROGRAMUNIFORM4IEXTPROC = [(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)]
type PFNGLPROGRAMUNIFORM1FVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLfloat] value)]
type PFNGLPROGRAMUNIFORM2FVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLfloat] value)]
type PFNGLPROGRAMUNIFORM3FVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLfloat] value)]
type PFNGLPROGRAMUNIFORM4FVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLfloat] value)]
type PFNGLPROGRAMUNIFORM1IVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLint] value)]
type PFNGLPROGRAMUNIFORM2IVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLint] value)]
type PFNGLPROGRAMUNIFORM3IVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLint] value)]
type PFNGLPROGRAMUNIFORM4IVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLint] value)]
type PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)]
type PFNGLTEXTUREBUFFEREXTPROC = [(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)]
type PFNGLMULTITEXBUFFEREXTPROC = [(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)]
type PFNGLTEXTUREPARAMETERIIVEXTPROC = [(GLuint texture, GLenum target, GLenum pname, [GLint] params)]
type PFNGLTEXTUREPARAMETERIUIVEXTPROC = [(GLuint texture, GLenum target, GLenum pname, [GLuint] params)]
type PFNGLGETTEXTUREPARAMETERIIVEXTPROC = [(GLuint texture, GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = [(GLuint texture, GLenum target, GLenum pname, [GLuint] params)]
type PFNGLMULTITEXPARAMETERIIVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLint] params)]
type PFNGLMULTITEXPARAMETERIUIVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLuint] params)]
type PFNGLGETMULTITEXPARAMETERIIVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = [(GLenum texunit, GLenum target, GLenum pname, [GLuint] params)]
type PFNGLPROGRAMUNIFORM1UIEXTPROC = [(GLuint program, GLint location, GLuint v0)]
type PFNGLPROGRAMUNIFORM2UIEXTPROC = [(GLuint program, GLint location, GLuint v0, GLuint v1)]
type PFNGLPROGRAMUNIFORM3UIEXTPROC = [(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)]
type PFNGLPROGRAMUNIFORM4UIEXTPROC = [(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)]
type PFNGLPROGRAMUNIFORM1UIVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLuint] value)]
type PFNGLPROGRAMUNIFORM2UIVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLuint] value)]
type PFNGLPROGRAMUNIFORM3UIVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLuint] value)]
type PFNGLPROGRAMUNIFORM4UIVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLuint] value)]
type PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = [(GLuint program, GLenum target, GLuint index, GLsizei count, [GLfloat] params)]
type PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = [(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)]
type PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = [(GLuint program, GLenum target, GLuint index, [GLint] params)]
type PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = [(GLuint program, GLenum target, GLuint index, GLsizei count, [GLint] params)]
type PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = [(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)]
type PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = [(GLuint program, GLenum target, GLuint index, [GLuint] params)]
type PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = [(GLuint program, GLenum target, GLuint index, GLsizei count, [GLuint] params)]
type PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = [(GLuint program, GLenum target, GLuint index, [GLint] params)]
type PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = [(GLuint program, GLenum target, GLuint index, [GLuint] params)]
type PFNGLENABLECLIENTSTATEIEXTPROC = [(GLenum array, GLuint index)]
type PFNGLDISABLECLIENTSTATEIEXTPROC = [(GLenum array, GLuint index)]
type PFNGLGETFLOATI_VEXTPROC = [(GLenum pname, GLuint index, [GLfloat] params)]
type PFNGLGETDOUBLEI_VEXTPROC = [(GLenum pname, GLuint index, [GLdouble] params)]
type PFNGLGETPOINTERI_VEXTPROC = [(GLenum pname, GLuint index, [[]] params)]
type PFNGLNAMEDPROGRAMSTRINGEXTPROC = [(GLuint program, GLenum target, GLenum format, GLsizei len, [] string)]
type PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = [(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)]
type PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = [(GLuint program, GLenum target, GLuint index, [GLdouble] params)]
type PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = [(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)]
type PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = [(GLuint program, GLenum target, GLuint index, [GLfloat] params)]
type PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = [(GLuint program, GLenum target, GLuint index, [GLdouble] params)]
type PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = [(GLuint program, GLenum target, GLuint index, [GLfloat] params)]
type PFNGLGETNAMEDPROGRAMIVEXTPROC = [(GLuint program, GLenum target, GLenum pname, [GLint] params)]
type PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = [(GLuint program, GLenum target, GLenum pname, [] string)]
type PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = [(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = [(GLuint renderbuffer, GLenum pname, [GLint] params)]
type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = [(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = [(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = [(GLuint framebuffer, GLenum target) => GLenum]
type PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = [(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)]
type PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = [(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)]
type PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = [(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)]
type PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = [(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)]
type PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = [(GLuint framebuffer, GLenum attachment, GLenum pname, [GLint] params)]
type PFNGLGENERATETEXTUREMIPMAPEXTPROC = [(GLuint texture, GLenum target)]
type PFNGLGENERATEMULTITEXMIPMAPEXTPROC = [(GLenum texunit, GLenum target)]
type PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = [(GLuint framebuffer, GLenum mode)]
type PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = [(GLuint framebuffer, GLsizei n, [GLenum] bufs)]
type PFNGLFRAMEBUFFERREADBUFFEREXTPROC = [(GLuint framebuffer, GLenum mode)]
type PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = [(GLuint framebuffer, GLenum pname, [GLint] params)]
type PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = [(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)]
type PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = [(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)]
type PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = [(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)]
type PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = [(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)]
type PFNGLTEXTURERENDERBUFFEREXTPROC = [(GLuint texture, GLenum target, GLuint renderbuffer)]
type PFNGLMULTITEXRENDERBUFFEREXTPROC = [(GLenum texunit, GLenum target, GLuint renderbuffer)]
type PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)]
type PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLENABLEVERTEXARRAYEXTPROC = [(GLuint vaobj, GLenum array)]
type PFNGLDISABLEVERTEXARRAYEXTPROC = [(GLuint vaobj, GLenum array)]
type PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = [(GLuint vaobj, GLuint index)]
type PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = [(GLuint vaobj, GLuint index)]
type PFNGLGETVERTEXARRAYINTEGERVEXTPROC = [(GLuint vaobj, GLenum pname, [GLint] param)]
type PFNGLGETVERTEXARRAYPOINTERVEXTPROC = [(GLuint vaobj, GLenum pname, [[]] param)]
type PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = [(GLuint vaobj, GLuint index, GLenum pname, [GLint] param)]
type PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = [(GLuint vaobj, GLuint index, GLenum pname, [[]] param)]
type PFNGLMAPNAMEDBUFFERRANGEEXTPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) => []]
type PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr length)]
type PFNGLNAMEDBUFFERSTORAGEEXTPROC = [(GLuint buffer, GLsizeiptr size, [] data, GLbitfield flags)]
type PFNGLCLEARNAMEDBUFFERDATAEXTPROC = [(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, [] data)]
type PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = [(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, [] data)]
type PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = [(GLuint framebuffer, GLenum pname, GLint param)]
type PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = [(GLuint framebuffer, GLenum pname, [GLint] params)]
type PFNGLPROGRAMUNIFORM1DEXTPROC = [(GLuint program, GLint location, GLdouble x)]
type PFNGLPROGRAMUNIFORM2DEXTPROC = [(GLuint program, GLint location, GLdouble x, GLdouble y)]
type PFNGLPROGRAMUNIFORM3DEXTPROC = [(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)]
type PFNGLPROGRAMUNIFORM4DEXTPROC = [(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)]
type PFNGLPROGRAMUNIFORM1DVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLdouble] value)]
type PFNGLPROGRAMUNIFORM2DVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLdouble] value)]
type PFNGLPROGRAMUNIFORM3DVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLdouble] value)]
type PFNGLPROGRAMUNIFORM4DVEXTPROC = [(GLuint program, GLint location, GLsizei count, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = [(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)]
type PFNGLTEXTUREBUFFERRANGEEXTPROC = [(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)]
type PFNGLTEXTURESTORAGE1DEXTPROC = [(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)]
type PFNGLTEXTURESTORAGE2DEXTPROC = [(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLTEXTURESTORAGE3DEXTPROC = [(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)]
type PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = [(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)]
type PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = [(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)]
type PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = [(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)]
type PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = [(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)]
type PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = [(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)]
type PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = [(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)]
type PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = [(GLuint vaobj, GLuint attribindex, GLuint bindingindex)]
type PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = [(GLuint vaobj, GLuint bindingindex, GLuint divisor)]
type PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = [(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)]
type PFNGLTEXTUREPAGECOMMITMENTEXTPROC = [(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)]
type PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = [(GLuint vaobj, GLuint index, GLuint divisor)]

extern glMatrixLoadfEXT(GLenum mode, [GLfloat] m)
extern glMatrixLoaddEXT(GLenum mode, [GLdouble] m)
extern glMatrixMultfEXT(GLenum mode, [GLfloat] m)
extern glMatrixMultdEXT(GLenum mode, [GLdouble] m)
extern glMatrixLoadIdentityEXT(GLenum mode)
extern glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
extern glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
extern glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
extern glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
extern glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
extern glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
extern glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
extern glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
extern glMatrixPopEXT(GLenum mode)
extern glMatrixPushEXT(GLenum mode)
extern glClientAttribDefaultEXT(GLbitfield mask)
extern glPushClientAttribDefaultEXT(GLbitfield mask)
extern glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
extern glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, [GLfloat] params)
extern glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
extern glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, [GLint] params)
extern glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, [] pixels)
extern glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [] pixels)
extern glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels)
extern glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)
extern glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
extern glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
extern glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
extern glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
extern glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, [] pixels)
extern glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, [GLfloat] params)
extern glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, [GLint] params)
extern glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, [GLfloat] params)
extern glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, [GLint] params)
extern glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [] pixels)
extern glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels)
extern glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
extern glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
extern glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, [] pointer)
extern glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
extern glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params)
extern glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
extern glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params)
extern glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
extern glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, [GLdouble] params)
extern glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
extern glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, [GLfloat] params)
extern glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
extern glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, [GLint] params)
extern glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params)
extern glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params)
extern glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, [GLdouble] params)
extern glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, [GLfloat] params)
extern glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, [GLint] params)
extern glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
extern glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params)
extern glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
extern glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params)
extern glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, [] pixels)
extern glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [] pixels)
extern glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels)
extern glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels)
extern glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
extern glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
extern glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
extern glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
extern glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, [] pixels)
extern glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params)
extern glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params)
extern glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, [GLfloat] params)
extern glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, [GLint] params)
extern glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [] pixels)
extern glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels)
extern glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
extern glEnableClientStateIndexedEXT(GLenum array, GLuint index)
extern glDisableClientStateIndexedEXT(GLenum array, GLuint index)
extern glGetFloatIndexedvEXT(GLenum target, GLuint index, [GLfloat] data)
extern glGetDoubleIndexedvEXT(GLenum target, GLuint index, [GLdouble] data)
extern glGetPointerIndexedvEXT(GLenum target, GLuint index, [[]] data)
extern glEnableIndexedEXT(GLenum target, GLuint index)
extern glDisableIndexedEXT(GLenum target, GLuint index)
extern glIsEnabledIndexedEXT(GLenum target, GLuint index) => GLboolean
extern glGetIntegerIndexedvEXT(GLenum target, GLuint index, [GLint] data)
extern glGetBooleanIndexedvEXT(GLenum target, GLuint index, [GLboolean] data)
extern glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, [] bits)
extern glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, [] bits)
extern glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, [] bits)
extern glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] bits)
extern glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] bits)
extern glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] bits)
extern glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, [] img)
extern glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, [] bits)
extern glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, [] bits)
extern glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, [] bits)
extern glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] bits)
extern glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] bits)
extern glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] bits)
extern glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, [] img)
extern glMatrixLoadTransposefEXT(GLenum mode, [GLfloat] m)
extern glMatrixLoadTransposedEXT(GLenum mode, [GLdouble] m)
extern glMatrixMultTransposefEXT(GLenum mode, [GLfloat] m)
extern glMatrixMultTransposedEXT(GLenum mode, [GLdouble] m)
extern glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, [] data, GLenum usage)
extern glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data)
extern glMapNamedBufferEXT(GLuint buffer, GLenum access) => []
extern glUnmapNamedBufferEXT(GLuint buffer) => GLboolean
extern glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, [GLint] params)
extern glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, [[]] params)
extern glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data)
extern glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
extern glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
extern glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
extern glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
extern glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
extern glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
extern glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
extern glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
extern glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, [GLfloat] value)
extern glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, [GLfloat] value)
extern glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, [GLfloat] value)
extern glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, [GLfloat] value)
extern glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, [GLint] value)
extern glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, [GLint] value)
extern glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, [GLint] value)
extern glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, [GLint] value)
extern glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value)
extern glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
extern glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
extern glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, [GLint] params)
extern glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, [GLuint] params)
extern glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, [GLint] params)
extern glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, [GLuint] params)
extern glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params)
extern glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, [GLuint] params)
extern glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params)
extern glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, [GLuint] params)
extern glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
extern glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
extern glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
extern glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
extern glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, [GLuint] value)
extern glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, [GLuint] value)
extern glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, [GLuint] value)
extern glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, [GLuint] value)
extern glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, [GLfloat] params)
extern glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
extern glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, [GLint] params)
extern glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, [GLint] params)
extern glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
extern glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, [GLuint] params)
extern glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, [GLuint] params)
extern glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, [GLint] params)
extern glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, [GLuint] params)
extern glEnableClientStateiEXT(GLenum array, GLuint index)
extern glDisableClientStateiEXT(GLenum array, GLuint index)
extern glGetFloati_vEXT(GLenum pname, GLuint index, [GLfloat] params)
extern glGetDoublei_vEXT(GLenum pname, GLuint index, [GLdouble] params)
extern glGetPointeri_vEXT(GLenum pname, GLuint index, [[]] params)
extern glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, [] string)
extern glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
extern glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, [GLdouble] params)
extern glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
extern glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, [GLfloat] params)
extern glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, [GLdouble] params)
extern glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, [GLfloat] params)
extern glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, [GLint] params)
extern glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, [] string)
extern glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
extern glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, [GLint] params)
extern glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
extern glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
extern glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) => GLenum
extern glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
extern glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
extern glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
extern glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
extern glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, [GLint] params)
extern glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
extern glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
extern glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
extern glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, [GLenum] bufs)
extern glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
extern glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, [GLint] params)
extern glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
extern glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
extern glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
extern glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
extern glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
extern glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
extern glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
extern glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
extern glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
extern glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
extern glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
extern glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
extern glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
extern glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
extern glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
extern glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
extern glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
extern glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
extern glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
extern glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
extern glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
extern glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, [GLint] param)
extern glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, [[]] param)
extern glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, [GLint] param)
extern glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, [[]] param)
extern glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) => []
extern glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
extern glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, [] data, GLbitfield flags)
extern glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, [] data)
extern glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, [] data)
extern glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
extern glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, [GLint] params)
extern glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
extern glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
extern glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
extern glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
extern glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, [GLdouble] value)
extern glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, [GLdouble] value)
extern glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, [GLdouble] value)
extern glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, [GLdouble] value)
extern glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value)
extern glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
extern glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
extern glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
extern glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
extern glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
extern glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
extern glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
extern glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
extern glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
extern glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
extern glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
extern glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)
extern glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
extern glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
extern glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor)

type PFNGLDRAWARRAYSINSTANCEDEXTPROC = [(GLenum mode, GLint start, GLsizei count, GLsizei primcount)]
type PFNGLDRAWELEMENTSINSTANCEDEXTPROC = [(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei primcount)]

extern glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
extern glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei primcount)

export POLYGON_OFFSET_CLAMP_EXT() => u64       = 0x8E1B

type PFNGLPOLYGONOFFSETCLAMPEXTPROC = [(GLfloat factor, GLfloat units, GLfloat clamp)]

extern glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp)

export RASTER_MULTISAMPLE_EXT() => u64         = 0x9327
export RASTER_SAMPLES_EXT() => u64             = 0x9328
export MAX_RASTER_SAMPLES_EXT() => u64         = 0x9329
export RASTER_FIXED_SAMPLE_LOCATIONS_EXT() => u64 = 0x932A
export MULTISAMPLE_RASTERIZATION_ALLOWED_EXT() => u64 = 0x932B
export EFFECTIVE_RASTER_SAMPLES_EXT() => u64   = 0x932C

type PFNGLRASTERSAMPLESEXTPROC = [(GLuint samples, GLboolean fixedsamplelocations)]

extern glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations)

export ACTIVE_PROGRAM_EXT() => u64             = 0x8B8D

type PFNGLUSESHADERPROGRAMEXTPROC = [(GLenum type, GLuint program)]
type PFNGLACTIVEPROGRAMEXTPROC = [(GLuint program)]
type PFNGLCREATESHADERPROGRAMEXTPROC = [(GLenum type, [GLchar] string) => GLuint]

extern glUseShaderProgramEXT(GLenum type, GLuint program)
extern glActiveProgramEXT(GLuint program)
extern glCreateShaderProgramEXT(GLenum type, [GLchar] string) => GLuint

export FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT() => u64 = 0x8A52

type PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = [()]

extern glFramebufferFetchBarrierEXT()

export COMPRESSED_RGB_S3TC_DXT1_EXT() => u64   = 0x83F0
export COMPRESSED_RGBA_S3TC_DXT1_EXT() => u64  = 0x83F1
export COMPRESSED_RGBA_S3TC_DXT3_EXT() => u64  = 0x83F2
export COMPRESSED_RGBA_S3TC_DXT5_EXT() => u64  = 0x83F3

export TEXTURE_REDUCTION_MODE_EXT() => u64     = 0x9366
export WEIGHTED_AVERAGE_EXT() => u64           = 0x9367

export SR8_EXT() => u64                        = 0x8FBD

export SRG8_EXT() => u64                       = 0x8FBE

export TEXTURE_SRGB_DECODE_EXT() => u64        = 0x8A48
export DECODE_EXT() => u64                     = 0x8A49
export SKIP_DECODE_EXT() => u64                = 0x8A4A

export TEXTURE_IMMUTABLE_FORMAT_EXT() => u64   = 0x912F
export ALPHA8_EXT() => u64                     = 0x803C
export LUMINANCE8_EXT() => u64                 = 0x8040
export LUMINANCE8_ALPHA8_EXT() => u64          = 0x8045
export RGBA32F_EXT() => u64                    = 0x8814
export RGB32F_EXT() => u64                     = 0x8815
export ALPHA32F_EXT() => u64                   = 0x8816
export LUMINANCE32F_EXT() => u64               = 0x8818
export LUMINANCE_ALPHA32F_EXT() => u64         = 0x8819
export RGBA16F_EXT() => u64                    = 0x881A
export RGB16F_EXT() => u64                     = 0x881B
export ALPHA16F_EXT() => u64                   = 0x881C
export LUMINANCE16F_EXT() => u64               = 0x881E
export LUMINANCE_ALPHA16F_EXT() => u64         = 0x881F
export RGB10_A2_EXT() => u64                   = 0x8059
export RGB10_EXT() => u64                      = 0x8052
export BGRA8_EXT() => u64                      = 0x93A1
export R8_EXT() => u64                         = 0x8229
export RG8_EXT() => u64                        = 0x822B
export R32F_EXT() => u64                       = 0x822E
export RG32F_EXT() => u64                      = 0x8230
export R16F_EXT() => u64                       = 0x822D
export RG16F_EXT() => u64                      = 0x822F

type PFNGLTEXSTORAGE1DEXTPROC = [(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)]
type PFNGLTEXSTORAGE2DEXTPROC = [(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)]
type PFNGLTEXSTORAGE3DEXTPROC = [(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)]

extern glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
extern glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
extern glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)

export INCLUSIVE_EXT() => u64                  = 0x8F10
export EXCLUSIVE_EXT() => u64                  = 0x8F11
export WINDOW_RECTANGLE_EXT() => u64           = 0x8F12
export WINDOW_RECTANGLE_MODE_EXT() => u64      = 0x8F13
export MAX_WINDOW_RECTANGLES_EXT() => u64      = 0x8F14
export NUM_WINDOW_RECTANGLES_EXT() => u64      = 0x8F15

type PFNGLWINDOWRECTANGLESEXTPROC = [(GLenum mode, GLsizei count, [GLint] box)]

extern glWindowRectanglesEXT(GLenum mode, GLsizei count, [GLint] box)

export BLACKHOLE_RENDER_INTEL() => u64         = 0x83FC

export CONSERVATIVE_RASTERIZATION_INTEL() => u64 = 0x83FE

type PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = [()]

extern glApplyFramebufferAttachmentCMAAINTEL()

export PERFQUERY_SINGLE_CONTEXT_INTEL() => u64 = 0x00000000
export PERFQUERY_GLOBAL_CONTEXT_INTEL() => u64 = 0x00000001
export PERFQUERY_WAIT_INTEL() => u64           = 0x83FB
export PERFQUERY_FLUSH_INTEL() => u64          = 0x83FA
export PERFQUERY_DONOT_FLUSH_INTEL() => u64    = 0x83F9
export PERFQUERY_COUNTER_EVENT_INTEL() => u64  = 0x94F0
export PERFQUERY_COUNTER_DURATION_NORM_INTEL() => u64 = 0x94F1
export PERFQUERY_COUNTER_DURATION_RAW_INTEL() => u64 = 0x94F2
export PERFQUERY_COUNTER_THROUGHPUT_INTEL() => u64 = 0x94F3
export PERFQUERY_COUNTER_RAW_INTEL() => u64    = 0x94F4
export PERFQUERY_COUNTER_TIMESTAMP_INTEL() => u64 = 0x94F5
export PERFQUERY_COUNTER_DATA_UINT32_INTEL() => u64 = 0x94F8
export PERFQUERY_COUNTER_DATA_UINT64_INTEL() => u64 = 0x94F9
export PERFQUERY_COUNTER_DATA_FLOAT_INTEL() => u64 = 0x94FA
export PERFQUERY_COUNTER_DATA_DOUBLE_INTEL() => u64 = 0x94FB
export PERFQUERY_COUNTER_DATA_BOOL32_INTEL() => u64 = 0x94FC
export PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL() => u64 = 0x94FD
export PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL() => u64 = 0x94FE
export PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL() => u64 = 0x94FF
export PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL() => u64 = 0x9500

type PFNGLBEGINPERFQUERYINTELPROC = [(GLuint queryHandle)]
type PFNGLCREATEPERFQUERYINTELPROC = [(GLuint queryId, [GLuint] queryHandle)]
type PFNGLDELETEPERFQUERYINTELPROC = [(GLuint queryHandle)]
type PFNGLENDPERFQUERYINTELPROC = [(GLuint queryHandle)]
type PFNGLGETFIRSTPERFQUERYIDINTELPROC = [([GLuint] queryId)]
type PFNGLGETNEXTPERFQUERYIDINTELPROC = [(GLuint queryId, [GLuint] nextQueryId)]
type PFNGLGETPERFCOUNTERINFOINTELPROC = [(GLuint queryId, GLuint counterId, GLuint counterNameLength, [GLchar] counterName, GLuint counterDescLength, [GLchar] counterDesc, [GLuint] counterOffset, [GLuint] counterDataSize, [GLuint] counterTypeEnum, [GLuint] counterDataTypeEnum, [GLuint64] rawCounterMaxValue)]
type PFNGLGETPERFQUERYDATAINTELPROC = [(GLuint queryHandle, GLuint flags, GLsizei dataSize, [] data, [GLuint] bytesWritten)]
type PFNGLGETPERFQUERYIDBYNAMEINTELPROC = [([GLchar] queryName, [GLuint] queryId)]
type PFNGLGETPERFQUERYINFOINTELPROC = [(GLuint queryId, GLuint queryNameLength, [GLchar] queryName, [GLuint] dataSize, [GLuint] noCounters, [GLuint] noInstances, [GLuint] capsMask)]

extern glBeginPerfQueryINTEL(GLuint queryHandle)
extern glCreatePerfQueryINTEL(GLuint queryId, [GLuint] queryHandle)
extern glDeletePerfQueryINTEL(GLuint queryHandle)
extern glEndPerfQueryINTEL(GLuint queryHandle)
extern glGetFirstPerfQueryIdINTEL([GLuint] queryId)
extern glGetNextPerfQueryIdINTEL(GLuint queryId, [GLuint] nextQueryId)
extern glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, [GLchar] counterName, GLuint counterDescLength, [GLchar] counterDesc, [GLuint] counterOffset, [GLuint] counterDataSize, [GLuint] counterTypeEnum, [GLuint] counterDataTypeEnum, [GLuint64] rawCounterMaxValue)
extern glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, [] data, [GLuint] bytesWritten)
extern glGetPerfQueryIdByNameINTEL([GLchar] queryName, [GLuint] queryId)
extern glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, [GLchar] queryName, [GLuint] dataSize, [GLuint] noCounters, [GLuint] noInstances, [GLuint] capsMask)

export FRAMEBUFFER_FLIP_X_MESA() => u64        = 0x8BBC

export FRAMEBUFFER_FLIP_Y_MESA() => u64        = 0x8BBB

type PFNGLFRAMEBUFFERPARAMETERIMESAPROC = [(GLenum target, GLenum pname, GLint param)]
type PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = [(GLenum target, GLenum pname, [GLint] params)]

extern glFramebufferParameteriMESA(GLenum target, GLenum pname, GLint param)
extern glGetFramebufferParameterivMESA(GLenum target, GLenum pname, [GLint] params)

export FRAMEBUFFER_SWAP_XY_MESA() => u64       = 0x8BBD

type PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = [(GLenum mode, [] indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)]
type PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = [(GLenum mode, GLenum type, [] indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)]

extern glMultiDrawArraysIndirectBindlessNV(GLenum mode, [] indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
extern glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, [] indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)

type PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = [(GLenum mode, [] indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)]
type PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = [(GLenum mode, GLenum type, [] indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)]

extern glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, [] indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
extern glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, [] indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)

type PFNGLGETTEXTUREHANDLENVPROC = [(GLuint texture) => GLuint64]
type PFNGLGETTEXTURESAMPLERHANDLENVPROC = [(GLuint texture, GLuint sampler) => GLuint64]
type PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = [(GLuint64 handle)]
type PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = [(GLuint64 handle)]
type PFNGLGETIMAGEHANDLENVPROC = [(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) => GLuint64]
type PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = [(GLuint64 handle, GLenum access)]
type PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = [(GLuint64 handle)]
type PFNGLUNIFORMHANDLEUI64NVPROC = [(GLint location, GLuint64 value)]
type PFNGLUNIFORMHANDLEUI64VNVPROC = [(GLint location, GLsizei count, [GLuint64] value)]
type PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = [(GLuint program, GLint location, GLuint64 value)]
type PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64] values)]
type PFNGLISTEXTUREHANDLERESIDENTNVPROC = [(GLuint64 handle) => GLboolean]
type PFNGLISIMAGEHANDLERESIDENTNVPROC = [(GLuint64 handle) => GLboolean]

extern glGetTextureHandleNV(GLuint texture) => GLuint64
extern glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) => GLuint64
extern glMakeTextureHandleResidentNV(GLuint64 handle)
extern glMakeTextureHandleNonResidentNV(GLuint64 handle)
extern glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) => GLuint64
extern glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
extern glMakeImageHandleNonResidentNV(GLuint64 handle)
extern glUniformHandleui64NV(GLint location, GLuint64 value)
extern glUniformHandleui64vNV(GLint location, GLsizei count, [GLuint64] value)
extern glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
extern glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64] values)
extern glIsTextureHandleResidentNV(GLuint64 handle) => GLboolean
extern glIsImageHandleResidentNV(GLuint64 handle) => GLboolean

export BLEND_OVERLAP_NV() => u64               = 0x9281
export BLEND_PREMULTIPLIED_SRC_NV() => u64     = 0x9280
export BLUE_NV() => u64                        = 0x1905
export COLORBURN_NV() => u64                   = 0x929A
export COLORDODGE_NV() => u64                  = 0x9299
export CONJOINT_NV() => u64                    = 0x9284
export CONTRAST_NV() => u64                    = 0x92A1
export DARKEN_NV() => u64                      = 0x9297
export DIFFERENCE_NV() => u64                  = 0x929E
export DISJOINT_NV() => u64                    = 0x9283
export DST_ATOP_NV() => u64                    = 0x928F
export DST_IN_NV() => u64                      = 0x928B
export DST_NV() => u64                         = 0x9287
export DST_OUT_NV() => u64                     = 0x928D
export DST_OVER_NV() => u64                    = 0x9289
export EXCLUSION_NV() => u64                   = 0x92A0
export GREEN_NV() => u64                       = 0x1904
export HARDLIGHT_NV() => u64                   = 0x929B
export HARDMIX_NV() => u64                     = 0x92A9
export HSL_COLOR_NV() => u64                   = 0x92AF
export HSL_HUE_NV() => u64                     = 0x92AD
export HSL_LUMINOSITY_NV() => u64              = 0x92B0
export HSL_SATURATION_NV() => u64              = 0x92AE
export INVERT_OVG_NV() => u64                  = 0x92B4
export INVERT_RGB_NV() => u64                  = 0x92A3
export LIGHTEN_NV() => u64                     = 0x9298
export LINEARBURN_NV() => u64                  = 0x92A5
export LINEARDODGE_NV() => u64                 = 0x92A4
export LINEARLIGHT_NV() => u64                 = 0x92A7
export MINUS_CLAMPED_NV() => u64               = 0x92B3
export MINUS_NV() => u64                       = 0x929F
export MULTIPLY_NV() => u64                    = 0x9294
export OVERLAY_NV() => u64                     = 0x9296
export PINLIGHT_NV() => u64                    = 0x92A8
export PLUS_CLAMPED_ALPHA_NV() => u64          = 0x92B2
export PLUS_CLAMPED_NV() => u64                = 0x92B1
export PLUS_DARKER_NV() => u64                 = 0x9292
export PLUS_NV() => u64                        = 0x9291
export RED_NV() => u64                         = 0x1903
export SCREEN_NV() => u64                      = 0x9295
export SOFTLIGHT_NV() => u64                   = 0x929C
export SRC_ATOP_NV() => u64                    = 0x928E
export SRC_IN_NV() => u64                      = 0x928A
export SRC_NV() => u64                         = 0x9286
export SRC_OUT_NV() => u64                     = 0x928C
export SRC_OVER_NV() => u64                    = 0x9288
export UNCORRELATED_NV() => u64                = 0x9282
export VIVIDLIGHT_NV() => u64                  = 0x92A6
export XOR_NV() => u64                         = 0x1506

type PFNGLBLENDPARAMETERINVPROC = [(GLenum pname, GLint value)]
type PFNGLBLENDBARRIERNVPROC = [()]
extern glBlendParameteriNV(GLenum pname, GLint value)
extern glBlendBarrierNV()

export BLEND_ADVANCED_COHERENT_NV() => u64     = 0x9285

export FACTOR_MIN_AMD() => u64                 = 0x901C
export FACTOR_MAX_AMD() => u64                 = 0x901D

export VIEWPORT_POSITION_W_SCALE_NV() => u64   = 0x937C
export VIEWPORT_POSITION_W_SCALE_X_COEFF_NV() => u64 = 0x937D
export VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV() => u64 = 0x937E

type PFNGLVIEWPORTPOSITIONWSCALENVPROC = [(GLuint index, GLfloat xcoeff, GLfloat ycoeff)]

extern glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff)

export TERMINATE_SEQUENCE_COMMAND_NV() => u64  = 0x0000
export NOP_COMMAND_NV() => u64                 = 0x0001
export DRAW_ELEMENTS_COMMAND_NV() => u64       = 0x0002
export DRAW_ARRAYS_COMMAND_NV() => u64         = 0x0003
export DRAW_ELEMENTS_STRIP_COMMAND_NV() => u64 = 0x0004
export DRAW_ARRAYS_STRIP_COMMAND_NV() => u64   = 0x0005
export DRAW_ELEMENTS_INSTANCED_COMMAND_NV() => u64 = 0x0006
export DRAW_ARRAYS_INSTANCED_COMMAND_NV() => u64 = 0x0007
export ELEMENT_ADDRESS_COMMAND_NV() => u64     = 0x0008
export ATTRIBUTE_ADDRESS_COMMAND_NV() => u64   = 0x0009
export UNIFORM_ADDRESS_COMMAND_NV() => u64     = 0x000A
export BLEND_COLOR_COMMAND_NV() => u64         = 0x000B
export STENCIL_REF_COMMAND_NV() => u64         = 0x000C
export LINE_WIDTH_COMMAND_NV() => u64          = 0x000D
export POLYGON_OFFSET_COMMAND_NV() => u64      = 0x000E
export ALPHA_REF_COMMAND_NV() => u64           = 0x000F
export VIEWPORT_COMMAND_NV() => u64            = 0x0010
export SCISSOR_COMMAND_NV() => u64             = 0x0011
export FRONT_FACE_COMMAND_NV() => u64          = 0x0012

type PFNGLCREATESTATESNVPROC = [(GLsizei n, [GLuint] states)]
type PFNGLDELETESTATESNVPROC = [(GLsizei n, [GLuint] states)]
type PFNGLISSTATENVPROC = [(GLuint state) => GLboolean]
type PFNGLSTATECAPTURENVPROC = [(GLuint state, GLenum mode)]
type PFNGLGETCOMMANDHEADERNVPROC = [(GLenum tokenID, GLuint size) => GLuint]
type PFNGLGETSTAGEINDEXNVPROC = [(GLenum shadertype) => GLushort]
type PFNGLDRAWCOMMANDSNVPROC = [(GLenum primitiveMode, GLuint buffer, [GLintptr] indirects, [GLsizei] sizes, GLuint count)]
type PFNGLDRAWCOMMANDSADDRESSNVPROC = [(GLenum primitiveMode, [GLuint64] indirects, [GLsizei] sizes, GLuint count)]
type PFNGLDRAWCOMMANDSSTATESNVPROC = [(GLuint buffer, [GLintptr] indirects, [GLsizei] sizes, [GLuint] states, [GLuint] fbos, GLuint count)]
type PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = [([GLuint64] indirects, [GLsizei] sizes, [GLuint] states, [GLuint] fbos, GLuint count)]
type PFNGLCREATECOMMANDLISTSNVPROC = [(GLsizei n, [GLuint] lists)]
type PFNGLDELETECOMMANDLISTSNVPROC = [(GLsizei n, [GLuint] lists)]
type PFNGLISCOMMANDLISTNVPROC = [(GLuint list) => GLboolean]
type PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = [(GLuint list, GLuint segment, [[]] indirects, [GLsizei] sizes, [GLuint] states, [GLuint] fbos, GLuint count)]
type PFNGLCOMMANDLISTSEGMENTSNVPROC = [(GLuint list, GLuint segments)]
type PFNGLCOMPILECOMMANDLISTNVPROC = [(GLuint list)]
type PFNGLCALLCOMMANDLISTNVPROC = [(GLuint list)]

extern glCreateStatesNV(GLsizei n, [GLuint] states)
extern glDeleteStatesNV(GLsizei n, [GLuint] states)
extern glIsStateNV(GLuint state) => GLboolean
extern glStateCaptureNV(GLuint state, GLenum mode)
extern glGetCommandHeaderNV(GLenum tokenID, GLuint size) => GLuint
extern glGetStageIndexNV(GLenum shadertype) => GLushort
extern glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, [GLintptr] indirects, [GLsizei] sizes, GLuint count)
extern glDrawCommandsAddressNV(GLenum primitiveMode, [GLuint64] indirects, [GLsizei] sizes, GLuint count)
extern glDrawCommandsStatesNV(GLuint buffer, [GLintptr] indirects, [GLsizei] sizes, [GLuint] states, [GLuint] fbos, GLuint count)
extern glDrawCommandsStatesAddressNV([GLuint64] indirects, [GLsizei] sizes, [GLuint] states, [GLuint] fbos, GLuint count)
extern glCreateCommandListsNV(GLsizei n, [GLuint] lists)
extern glDeleteCommandListsNV(GLsizei n, [GLuint] lists)
extern glIsCommandListNV(GLuint list) => GLboolean
extern glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, [[]] indirects, [GLsizei] sizes, [GLuint] states, [GLuint] fbos, GLuint count)
extern glCommandListSegmentsNV(GLuint list, GLuint segments)
extern glCompileCommandListNV(GLuint list)
extern glCallCommandListNV(GLuint list)

export QUERY_WAIT_NV() => u64                  = 0x8E13
export QUERY_NO_WAIT_NV() => u64               = 0x8E14
export QUERY_BY_REGION_WAIT_NV() => u64        = 0x8E15
export QUERY_BY_REGION_NO_WAIT_NV() => u64     = 0x8E16

type PFNGLBEGINCONDITIONALRENDERNVPROC = [(GLuint id, GLenum mode)]
type PFNGLENDCONDITIONALRENDERNVPROC = [()]

extern glBeginConditionalRenderNV(GLuint id, GLenum mode)
extern glEndConditionalRenderNV()

export CONSERVATIVE_RASTERIZATION_NV() => u64  = 0x9346
export SUBPIXEL_PRECISION_BIAS_X_BITS_NV() => u64 = 0x9347
export SUBPIXEL_PRECISION_BIAS_Y_BITS_NV() => u64 = 0x9348
export MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV() => u64 = 0x9349

type PFNGLSUBPIXELPRECISIONBIASNVPROC = [(GLuint xbits, GLuint ybits)]

extern glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits)

export CONSERVATIVE_RASTER_DILATE_NV() => u64  = 0x9379
export CONSERVATIVE_RASTER_DILATE_RANGE_NV() => u64 = 0x937A
export CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV() => u64 = 0x937B

type PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = [(GLenum pname, GLfloat value)]

extern glConservativeRasterParameterfNV(GLenum pname, GLfloat value)

export CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV() => u64 = 0x9550

export CONSERVATIVE_RASTER_MODE_NV() => u64    = 0x954D
export CONSERVATIVE_RASTER_MODE_POST_SNAP_NV() => u64 = 0x954E
export CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV() => u64 = 0x954F

type PFNGLCONSERVATIVERASTERPARAMETERINVPROC = [(GLenum pname, GLint param)]

extern glConservativeRasterParameteriNV(GLenum pname, GLint param)

export DEPTH_COMPONENT32F_NV() => u64          = 0x8DAB
export DEPTH32F_STENCIL8_NV() => u64           = 0x8DAC
export FLOAT_32_UNSIGNED_INT_24_8_REV_NV() => u64 = 0x8DAD
export DEPTH_BUFFER_FLOAT_MODE_NV() => u64     = 0x8DAF

type PFNGLDEPTHRANGEDNVPROC = [(GLdouble zNear, GLdouble zFar)]
type PFNGLCLEARDEPTHDNVPROC = [(GLdouble depth)]
type PFNGLDEPTHBOUNDSDNVPROC = [(GLdouble zmin, GLdouble zmax)]

extern glDepthRangedNV(GLdouble zNear, GLdouble zFar)
extern glClearDepthdNV(GLdouble depth)
extern glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)

type GLVULKANPROCNV = [()]
type PFNGLDRAWVKIMAGENVPROC = [(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)]
type PFNGLGETVKPROCADDRNVPROC = [([GLchar] name) => GLVULKANPROCNV]
type PFNGLWAITVKSEMAPHORENVPROC = [(GLuint64 vkSemaphore)]
type PFNGLSIGNALVKSEMAPHORENVPROC = [(GLuint64 vkSemaphore)]
type PFNGLSIGNALVKFENCENVPROC = [(GLuint64 vkFence)]

extern glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
extern glGetVkProcAddrNV([GLchar] name) => GLVULKANPROCNV
extern glWaitVkSemaphoreNV(GLuint64 vkSemaphore)
extern glSignalVkSemaphoreNV(GLuint64 vkSemaphore)
extern glSignalVkFenceNV(GLuint64 vkFence)

export FILL_RECTANGLE_NV() => u64              = 0x933C

export FRAGMENT_COVERAGE_TO_COLOR_NV() => u64  = 0x92DD
export FRAGMENT_COVERAGE_COLOR_NV() => u64     = 0x92DE

type PFNGLFRAGMENTCOVERAGECOLORNVPROC = [(GLuint color)]

extern glFragmentCoverageColorNV(GLuint color)

export COVERAGE_MODULATION_TABLE_NV() => u64   = 0x9331
export COLOR_SAMPLES_NV() => u64               = 0x8E20
export DEPTH_SAMPLES_NV() => u64               = 0x932D
export STENCIL_SAMPLES_NV() => u64             = 0x932E
export MIXED_DEPTH_SAMPLES_SUPPORTED_NV() => u64 = 0x932F
export MIXED_STENCIL_SAMPLES_SUPPORTED_NV() => u64 = 0x9330
export COVERAGE_MODULATION_NV() => u64         = 0x9332
export COVERAGE_MODULATION_TABLE_SIZE_NV() => u64 = 0x9333

type PFNGLCOVERAGEMODULATIONTABLENVPROC = [(GLsizei n, [GLfloat] v)]
type PFNGLGETCOVERAGEMODULATIONTABLENVPROC = [(GLsizei bufSize, [GLfloat] v)]
type PFNGLCOVERAGEMODULATIONNVPROC = [(GLenum components)]

extern glCoverageModulationTableNV(GLsizei n, [GLfloat] v)
extern glGetCoverageModulationTableNV(GLsizei bufSize, [GLfloat] v)
extern glCoverageModulationNV(GLenum components)

export RENDERBUFFER_COVERAGE_SAMPLES_NV() => u64 = 0x8CAB
export RENDERBUFFER_COLOR_SAMPLES_NV() => u64  = 0x8E10
export MAX_MULTISAMPLE_COVERAGE_MODES_NV() => u64 = 0x8E11
export MULTISAMPLE_COVERAGE_MODES_NV() => u64  = 0x8E12

type PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = [(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)]

extern glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)

type GLint64EXT = i64

export INT64_NV() => u64                       = 0x140E
export UNSIGNED_INT64_NV() => u64              = 0x140F
export INT8_NV() => u64                        = 0x8FE0
export INT8_VEC2_NV() => u64                   = 0x8FE1
export INT8_VEC3_NV() => u64                   = 0x8FE2
export INT8_VEC4_NV() => u64                   = 0x8FE3
export INT16_NV() => u64                       = 0x8FE4
export INT16_VEC2_NV() => u64                  = 0x8FE5
export INT16_VEC3_NV() => u64                  = 0x8FE6
export INT16_VEC4_NV() => u64                  = 0x8FE7
export INT64_VEC2_NV() => u64                  = 0x8FE9
export INT64_VEC3_NV() => u64                  = 0x8FEA
export INT64_VEC4_NV() => u64                  = 0x8FEB
export UNSIGNED_INT8_NV() => u64               = 0x8FEC
export UNSIGNED_INT8_VEC2_NV() => u64          = 0x8FED
export UNSIGNED_INT8_VEC3_NV() => u64          = 0x8FEE
export UNSIGNED_INT8_VEC4_NV() => u64          = 0x8FEF
export UNSIGNED_INT16_NV() => u64              = 0x8FF0
export UNSIGNED_INT16_VEC2_NV() => u64         = 0x8FF1
export UNSIGNED_INT16_VEC3_NV() => u64         = 0x8FF2
export UNSIGNED_INT16_VEC4_NV() => u64         = 0x8FF3
export UNSIGNED_INT64_VEC2_NV() => u64         = 0x8FF5
export UNSIGNED_INT64_VEC3_NV() => u64         = 0x8FF6
export UNSIGNED_INT64_VEC4_NV() => u64         = 0x8FF7
export FLOAT16_NV() => u64                     = 0x8FF8
export FLOAT16_VEC2_NV() => u64                = 0x8FF9
export FLOAT16_VEC3_NV() => u64                = 0x8FFA
export FLOAT16_VEC4_NV() => u64                = 0x8FFB

type PFNGLUNIFORM1I64NVPROC = [(GLint location, GLint64EXT x)]
type PFNGLUNIFORM2I64NVPROC = [(GLint location, GLint64EXT x, GLint64EXT y)]
type PFNGLUNIFORM3I64NVPROC = [(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)]
type PFNGLUNIFORM4I64NVPROC = [(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)]
type PFNGLUNIFORM1I64VNVPROC = [(GLint location, GLsizei count, [GLint64EXT] value)]
type PFNGLUNIFORM2I64VNVPROC = [(GLint location, GLsizei count, [GLint64EXT] value)]
type PFNGLUNIFORM3I64VNVPROC = [(GLint location, GLsizei count, [GLint64EXT] value)]
type PFNGLUNIFORM4I64VNVPROC = [(GLint location, GLsizei count, [GLint64EXT] value)]
type PFNGLUNIFORM1UI64NVPROC = [(GLint location, GLuint64EXT x)]
type PFNGLUNIFORM2UI64NVPROC = [(GLint location, GLuint64EXT x, GLuint64EXT y)]
type PFNGLUNIFORM3UI64NVPROC = [(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)]
type PFNGLUNIFORM4UI64NVPROC = [(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)]
type PFNGLUNIFORM1UI64VNVPROC = [(GLint location, GLsizei count, [GLuint64EXT] value)]
type PFNGLUNIFORM2UI64VNVPROC = [(GLint location, GLsizei count, [GLuint64EXT] value)]
type PFNGLUNIFORM3UI64VNVPROC = [(GLint location, GLsizei count, [GLuint64EXT] value)]
type PFNGLUNIFORM4UI64VNVPROC = [(GLint location, GLsizei count, [GLuint64EXT] value)]
type PFNGLGETUNIFORMI64VNVPROC = [(GLuint program, GLint location, [GLint64EXT] params)]
type PFNGLPROGRAMUNIFORM1I64NVPROC = [(GLuint program, GLint location, GLint64EXT x)]
type PFNGLPROGRAMUNIFORM2I64NVPROC = [(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)]
type PFNGLPROGRAMUNIFORM3I64NVPROC = [(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)]
type PFNGLPROGRAMUNIFORM4I64NVPROC = [(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)]
type PFNGLPROGRAMUNIFORM1I64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLint64EXT] value)]
type PFNGLPROGRAMUNIFORM2I64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLint64EXT] value)]
type PFNGLPROGRAMUNIFORM3I64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLint64EXT] value)]
type PFNGLPROGRAMUNIFORM4I64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLint64EXT] value)]
type PFNGLPROGRAMUNIFORM1UI64NVPROC = [(GLuint program, GLint location, GLuint64EXT x)]
type PFNGLPROGRAMUNIFORM2UI64NVPROC = [(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)]
type PFNGLPROGRAMUNIFORM3UI64NVPROC = [(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)]
type PFNGLPROGRAMUNIFORM4UI64NVPROC = [(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)]
type PFNGLPROGRAMUNIFORM1UI64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)]
type PFNGLPROGRAMUNIFORM2UI64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)]
type PFNGLPROGRAMUNIFORM3UI64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)]
type PFNGLPROGRAMUNIFORM4UI64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)]

extern glUniform1i64NV(GLint location, GLint64EXT x)
extern glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
extern glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
extern glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
extern glUniform1i64vNV(GLint location, GLsizei count, [GLint64EXT] value)
extern glUniform2i64vNV(GLint location, GLsizei count, [GLint64EXT] value)
extern glUniform3i64vNV(GLint location, GLsizei count, [GLint64EXT] value)
extern glUniform4i64vNV(GLint location, GLsizei count, [GLint64EXT] value)
extern glUniform1ui64NV(GLint location, GLuint64EXT x)
extern glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
extern glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
extern glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
extern glUniform1ui64vNV(GLint location, GLsizei count, [GLuint64EXT] value)
extern glUniform2ui64vNV(GLint location, GLsizei count, [GLuint64EXT] value)
extern glUniform3ui64vNV(GLint location, GLsizei count, [GLuint64EXT] value)
extern glUniform4ui64vNV(GLint location, GLsizei count, [GLuint64EXT] value)
extern glGetUniformi64vNV(GLuint program, GLint location, [GLint64EXT] params)
extern glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
extern glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
extern glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
extern glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
extern glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, [GLint64EXT] value)
extern glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, [GLint64EXT] value)
extern glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, [GLint64EXT] value)
extern glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, [GLint64EXT] value)
extern glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
extern glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
extern glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
extern glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
extern glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)
extern glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)
extern glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)
extern glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)

export MULTISAMPLES_NV() => u64                = 0x9371
export SUPERSAMPLE_SCALE_X_NV() => u64         = 0x9372
export SUPERSAMPLE_SCALE_Y_NV() => u64         = 0x9373
export CONFORMANT_NV() => u64                  = 0x9374

type PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = [(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, [GLint] params)]

extern glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, [GLint] params)

export ATTACHED_MEMORY_OBJECT_NV() => u64      = 0x95A4
export ATTACHED_MEMORY_OFFSET_NV() => u64      = 0x95A5
export MEMORY_ATTACHABLE_ALIGNMENT_NV() => u64 = 0x95A6
export MEMORY_ATTACHABLE_SIZE_NV() => u64      = 0x95A7
export MEMORY_ATTACHABLE_NV() => u64           = 0x95A8
export DETACHED_MEMORY_INCARNATION_NV() => u64 = 0x95A9
export DETACHED_TEXTURES_NV() => u64           = 0x95AA
export DETACHED_BUFFERS_NV() => u64            = 0x95AB
export MAX_DETACHED_TEXTURES_NV() => u64       = 0x95AC
export MAX_DETACHED_BUFFERS_NV() => u64        = 0x95AD

type PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = [(GLuint memory, GLenum pname, GLint first, GLsizei count, [GLuint] params)]
type PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = [(GLuint memory, GLenum pname)]
type PFNGLTEXATTACHMEMORYNVPROC = [(GLenum target, GLuint memory, GLuint64 offset)]
type PFNGLBUFFERATTACHMEMORYNVPROC = [(GLenum target, GLuint memory, GLuint64 offset)]
type PFNGLTEXTUREATTACHMEMORYNVPROC = [(GLuint texture, GLuint memory, GLuint64 offset)]
type PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = [(GLuint buffer, GLuint memory, GLuint64 offset)]

extern glGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, [GLuint] params)
extern glResetMemoryObjectParameterNV(GLuint memory, GLenum pname)
extern glTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset)
extern glBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset)
extern glTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset)
extern glNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset)

type PFNGLBUFFERPAGECOMMITMENTMEMNVPROC = [(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)]
type PFNGLTEXPAGECOMMITMENTMEMNVPROC = [(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)]
type PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC = [(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)]
type PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC = [(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)]

extern glBufferPageCommitmentMemNV(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)
extern glTexPageCommitmentMemNV(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)
extern glNamedBufferPageCommitmentMemNV(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit)
extern glTexturePageCommitmentMemNV(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit)

export MESH_SHADER_NV() => u64                 = 0x9559
export TASK_SHADER_NV() => u64                 = 0x955A
export MAX_MESH_UNIFORM_BLOCKS_NV() => u64     = 0x8E60
export MAX_MESH_TEXTURE_IMAGE_UNITS_NV() => u64 = 0x8E61
export MAX_MESH_IMAGE_UNIFORMS_NV() => u64     = 0x8E62
export MAX_MESH_UNIFORM_COMPONENTS_NV() => u64 = 0x8E63
export MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV() => u64 = 0x8E64
export MAX_MESH_ATOMIC_COUNTERS_NV() => u64    = 0x8E65
export MAX_MESH_SHADER_STORAGE_BLOCKS_NV() => u64 = 0x8E66
export MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV() => u64 = 0x8E67
export MAX_TASK_UNIFORM_BLOCKS_NV() => u64     = 0x8E68
export MAX_TASK_TEXTURE_IMAGE_UNITS_NV() => u64 = 0x8E69
export MAX_TASK_IMAGE_UNIFORMS_NV() => u64     = 0x8E6A
export MAX_TASK_UNIFORM_COMPONENTS_NV() => u64 = 0x8E6B
export MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV() => u64 = 0x8E6C
export MAX_TASK_ATOMIC_COUNTERS_NV() => u64    = 0x8E6D
export MAX_TASK_SHADER_STORAGE_BLOCKS_NV() => u64 = 0x8E6E
export MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV() => u64 = 0x8E6F
export MAX_MESH_WORK_GROUP_INVOCATIONS_NV() => u64 = 0x95A2
export MAX_TASK_WORK_GROUP_INVOCATIONS_NV() => u64 = 0x95A3
export MAX_MESH_TOTAL_MEMORY_SIZE_NV() => u64  = 0x9536
export MAX_TASK_TOTAL_MEMORY_SIZE_NV() => u64  = 0x9537
export MAX_MESH_OUTPUT_VERTICES_NV() => u64    = 0x9538
export MAX_MESH_OUTPUT_PRIMITIVES_NV() => u64  = 0x9539
export MAX_TASK_OUTPUT_COUNT_NV() => u64       = 0x953A
export MAX_DRAW_MESH_TASKS_COUNT_NV() => u64   = 0x953D
export MAX_MESH_VIEWS_NV() => u64              = 0x9557
export MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV() => u64 = 0x92DF
export MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV() => u64 = 0x9543
export MAX_MESH_WORK_GROUP_SIZE_NV() => u64    = 0x953B
export MAX_TASK_WORK_GROUP_SIZE_NV() => u64    = 0x953C
export MESH_WORK_GROUP_SIZE_NV() => u64        = 0x953E
export TASK_WORK_GROUP_SIZE_NV() => u64        = 0x953F
export MESH_VERTICES_OUT_NV() => u64           = 0x9579
export MESH_PRIMITIVES_OUT_NV() => u64         = 0x957A
export MESH_OUTPUT_TYPE_NV() => u64            = 0x957B
export UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV() => u64 = 0x959C
export UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV() => u64 = 0x959D
export REFERENCED_BY_MESH_SHADER_NV() => u64   = 0x95A0
export REFERENCED_BY_TASK_SHADER_NV() => u64   = 0x95A1
export MESH_SHADER_BIT_NV() => u64             = 0x00000040
export TASK_SHADER_BIT_NV() => u64             = 0x00000080
export MESH_SUBROUTINE_NV() => u64             = 0x957C
export TASK_SUBROUTINE_NV() => u64             = 0x957D
export MESH_SUBROUTINE_UNIFORM_NV() => u64     = 0x957E
export TASK_SUBROUTINE_UNIFORM_NV() => u64     = 0x957F
export ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV() => u64 = 0x959E
export ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV() => u64 = 0x959F

type PFNGLDRAWMESHTASKSNVPROC = [(GLuint first, GLuint count)]
type PFNGLDRAWMESHTASKSINDIRECTNVPROC = [(GLintptr indirect)]
type PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = [(GLintptr indirect, GLsizei drawcount, GLsizei stride)]
type PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = [(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)]

extern glDrawMeshTasksNV(GLuint first, GLuint count)
extern glDrawMeshTasksIndirectNV(GLintptr indirect)
extern glMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride)
extern glMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)

export PATH_FORMAT_SVG_NV() => u64             = 0x9070
export PATH_FORMAT_PS_NV() => u64              = 0x9071
export STANDARD_FONT_NAME_NV() => u64          = 0x9072
export SYSTEM_FONT_NAME_NV() => u64            = 0x9073
export FILE_NAME_NV() => u64                   = 0x9074
export PATH_STROKE_WIDTH_NV() => u64           = 0x9075
export PATH_END_CAPS_NV() => u64               = 0x9076
export PATH_INITIAL_END_CAP_NV() => u64        = 0x9077
export PATH_TERMINAL_END_CAP_NV() => u64       = 0x9078
export PATH_JOIN_STYLE_NV() => u64             = 0x9079
export PATH_MITER_LIMIT_NV() => u64            = 0x907A
export PATH_DASH_CAPS_NV() => u64              = 0x907B
export PATH_INITIAL_DASH_CAP_NV() => u64       = 0x907C
export PATH_TERMINAL_DASH_CAP_NV() => u64      = 0x907D
export PATH_DASH_OFFSET_NV() => u64            = 0x907E
export PATH_CLIENT_LENGTH_NV() => u64          = 0x907F
export PATH_FILL_MODE_NV() => u64              = 0x9080
export PATH_FILL_MASK_NV() => u64              = 0x9081
export PATH_FILL_COVER_MODE_NV() => u64        = 0x9082
export PATH_STROKE_COVER_MODE_NV() => u64      = 0x9083
export PATH_STROKE_MASK_NV() => u64            = 0x9084
export COUNT_UP_NV() => u64                    = 0x9088
export COUNT_DOWN_NV() => u64                  = 0x9089
export PATH_OBJECT_BOUNDING_BOX_NV() => u64    = 0x908A
export CONVEX_HULL_NV() => u64                 = 0x908B
export BOUNDING_BOX_NV() => u64                = 0x908D
export TRANSLATE_X_NV() => u64                 = 0x908E
export TRANSLATE_Y_NV() => u64                 = 0x908F
export TRANSLATE_2D_NV() => u64                = 0x9090
export TRANSLATE_3D_NV() => u64                = 0x9091
export AFFINE_2D_NV() => u64                   = 0x9092
export AFFINE_3D_NV() => u64                   = 0x9094
export TRANSPOSE_AFFINE_2D_NV() => u64         = 0x9096
export TRANSPOSE_AFFINE_3D_NV() => u64         = 0x9098
export UTF8_NV() => u64                        = 0x909A
export UTF16_NV() => u64                       = 0x909B
export BOUNDING_BOX_OF_BOUNDING_BOXES_NV() => u64 = 0x909C
export PATH_COMMAND_COUNT_NV() => u64          = 0x909D
export PATH_COORD_COUNT_NV() => u64            = 0x909E
export PATH_DASH_ARRAY_COUNT_NV() => u64       = 0x909F
export PATH_COMPUTED_LENGTH_NV() => u64        = 0x90A0
export PATH_FILL_BOUNDING_BOX_NV() => u64      = 0x90A1
export PATH_STROKE_BOUNDING_BOX_NV() => u64    = 0x90A2
export SQUARE_NV() => u64                      = 0x90A3
export ROUND_NV() => u64                       = 0x90A4
export TRIANGULAR_NV() => u64                  = 0x90A5
export BEVEL_NV() => u64                       = 0x90A6
export MITER_REVERT_NV() => u64                = 0x90A7
export MITER_TRUNCATE_NV() => u64              = 0x90A8
export SKIP_MISSING_GLYPH_NV() => u64          = 0x90A9
export USE_MISSING_GLYPH_NV() => u64           = 0x90AA
export PATH_ERROR_POSITION_NV() => u64         = 0x90AB
export ACCUM_ADJACENT_PAIRS_NV() => u64        = 0x90AD
export ADJACENT_PAIRS_NV() => u64              = 0x90AE
export FIRST_TO_REST_NV() => u64               = 0x90AF
export PATH_GEN_MODE_NV() => u64               = 0x90B0
export PATH_GEN_COEFF_NV() => u64              = 0x90B1
export PATH_GEN_COMPONENTS_NV() => u64         = 0x90B3
export PATH_STENCIL_FUNC_NV() => u64           = 0x90B7
export PATH_STENCIL_REF_NV() => u64            = 0x90B8
export PATH_STENCIL_VALUE_MASK_NV() => u64     = 0x90B9
export PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV() => u64 = 0x90BD
export PATH_STENCIL_DEPTH_OFFSET_UNITS_NV() => u64 = 0x90BE
export PATH_COVER_DEPTH_FUNC_NV() => u64       = 0x90BF
export PATH_DASH_OFFSET_RESET_NV() => u64      = 0x90B4
export MOVE_TO_RESETS_NV() => u64              = 0x90B5
export MOVE_TO_CONTINUES_NV() => u64           = 0x90B6
export CLOSE_PATH_NV() => u64                  = 0x00
export MOVE_TO_NV() => u64                     = 0x02
export RELATIVE_MOVE_TO_NV() => u64            = 0x03
export LINE_TO_NV() => u64                     = 0x04
export RELATIVE_LINE_TO_NV() => u64            = 0x05
export HORIZONTAL_LINE_TO_NV() => u64          = 0x06
export RELATIVE_HORIZONTAL_LINE_TO_NV() => u64 = 0x07
export VERTICAL_LINE_TO_NV() => u64            = 0x08
export RELATIVE_VERTICAL_LINE_TO_NV() => u64   = 0x09
export QUADRATIC_CURVE_TO_NV() => u64          = 0x0A
export RELATIVE_QUADRATIC_CURVE_TO_NV() => u64 = 0x0B
export CUBIC_CURVE_TO_NV() => u64              = 0x0C
export RELATIVE_CUBIC_CURVE_TO_NV() => u64     = 0x0D
export SMOOTH_QUADRATIC_CURVE_TO_NV() => u64   = 0x0E
export RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV() => u64 = 0x0F
export SMOOTH_CUBIC_CURVE_TO_NV() => u64       = 0x10
export RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV() => u64 = 0x11
export SMALL_CCW_ARC_TO_NV() => u64            = 0x12
export RELATIVE_SMALL_CCW_ARC_TO_NV() => u64   = 0x13
export SMALL_CW_ARC_TO_NV() => u64             = 0x14
export RELATIVE_SMALL_CW_ARC_TO_NV() => u64    = 0x15
export LARGE_CCW_ARC_TO_NV() => u64            = 0x16
export RELATIVE_LARGE_CCW_ARC_TO_NV() => u64   = 0x17
export LARGE_CW_ARC_TO_NV() => u64             = 0x18
export RELATIVE_LARGE_CW_ARC_TO_NV() => u64    = 0x19
export RESTART_PATH_NV() => u64                = 0xF0
export DUP_FIRST_CUBIC_CURVE_TO_NV() => u64    = 0xF2
export DUP_LAST_CUBIC_CURVE_TO_NV() => u64     = 0xF4
export RECT_NV() => u64                        = 0xF6
export CIRCULAR_CCW_ARC_TO_NV() => u64         = 0xF8
export CIRCULAR_CW_ARC_TO_NV() => u64          = 0xFA
export CIRCULAR_TANGENT_ARC_TO_NV() => u64     = 0xFC
export ARC_TO_NV() => u64                      = 0xFE
export RELATIVE_ARC_TO_NV() => u64             = 0xFF
export BOLD_BIT_NV() => u64                    = 0x01
export ITALIC_BIT_NV() => u64                  = 0x02
export GLYPH_WIDTH_BIT_NV() => u64             = 0x01
export GLYPH_HEIGHT_BIT_NV() => u64            = 0x02
export GLYPH_HORIZONTAL_BEARING_X_BIT_NV() => u64 = 0x04
export GLYPH_HORIZONTAL_BEARING_Y_BIT_NV() => u64 = 0x08
export GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV() => u64 = 0x10
export GLYPH_VERTICAL_BEARING_X_BIT_NV() => u64 = 0x20
export GLYPH_VERTICAL_BEARING_Y_BIT_NV() => u64 = 0x40
export GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV() => u64 = 0x80
export GLYPH_HAS_KERNING_BIT_NV() => u64       = 0x100
export FONT_X_MIN_BOUNDS_BIT_NV() => u64       = 0x00010000
export FONT_Y_MIN_BOUNDS_BIT_NV() => u64       = 0x00020000
export FONT_X_MAX_BOUNDS_BIT_NV() => u64       = 0x00040000
export FONT_Y_MAX_BOUNDS_BIT_NV() => u64       = 0x00080000
export FONT_UNITS_PER_EM_BIT_NV() => u64       = 0x00100000
export FONT_ASCENDER_BIT_NV() => u64           = 0x00200000
export FONT_DESCENDER_BIT_NV() => u64          = 0x00400000
export FONT_HEIGHT_BIT_NV() => u64             = 0x00800000
export FONT_MAX_ADVANCE_WIDTH_BIT_NV() => u64  = 0x01000000
export FONT_MAX_ADVANCE_HEIGHT_BIT_NV() => u64 = 0x02000000
export FONT_UNDERLINE_POSITION_BIT_NV() => u64 = 0x04000000
export FONT_UNDERLINE_THICKNESS_BIT_NV() => u64 = 0x08000000
export FONT_HAS_KERNING_BIT_NV() => u64        = 0x10000000
export ROUNDED_RECT_NV() => u64                = 0xE8
export RELATIVE_ROUNDED_RECT_NV() => u64       = 0xE9
export ROUNDED_RECT2_NV() => u64               = 0xEA
export RELATIVE_ROUNDED_RECT2_NV() => u64      = 0xEB
export ROUNDED_RECT4_NV() => u64               = 0xEC
export RELATIVE_ROUNDED_RECT4_NV() => u64      = 0xED
export ROUNDED_RECT8_NV() => u64               = 0xEE
export RELATIVE_ROUNDED_RECT8_NV() => u64      = 0xEF
export RELATIVE_RECT_NV() => u64               = 0xF7
export FONT_GLYPHS_AVAILABLE_NV() => u64       = 0x9368
export FONT_TARGET_UNAVAILABLE_NV() => u64     = 0x9369
export FONT_UNAVAILABLE_NV() => u64            = 0x936A
export FONT_UNINTELLIGIBLE_NV() => u64         = 0x936B
export CONIC_CURVE_TO_NV() => u64              = 0x1A
export RELATIVE_CONIC_CURVE_TO_NV() => u64     = 0x1B
export FONT_NUM_GLYPH_INDICES_BIT_NV() => u64  = 0x20000000
export STANDARD_FONT_FORMAT_NV() => u64        = 0x936C
export PATH_PROJECTION_NV() => u64             = 0x1701
export PATH_MODELVIEW_NV() => u64              = 0x1700
export PATH_MODELVIEW_STACK_DEPTH_NV() => u64  = 0x0BA3
export PATH_MODELVIEW_MATRIX_NV() => u64       = 0x0BA6
export PATH_MAX_MODELVIEW_STACK_DEPTH_NV() => u64 = 0x0D36
export PATH_TRANSPOSE_MODELVIEW_MATRIX_NV() => u64 = 0x84E3
export PATH_PROJECTION_STACK_DEPTH_NV() => u64 = 0x0BA4
export PATH_PROJECTION_MATRIX_NV() => u64      = 0x0BA7
export PATH_MAX_PROJECTION_STACK_DEPTH_NV() => u64 = 0x0D38
export PATH_TRANSPOSE_PROJECTION_MATRIX_NV() => u64 = 0x84E4
export FRAGMENT_INPUT_NV() => u64              = 0x936D

type PFNGLGENPATHSNVPROC = [(GLsizei range) => GLuint]
type PFNGLDELETEPATHSNVPROC = [(GLuint path, GLsizei range)]
type PFNGLISPATHNVPROC = [(GLuint path) => GLboolean]
type PFNGLPATHCOMMANDSNVPROC = [(GLuint path, GLsizei numCommands, [GLubyte] commands, GLsizei numCoords, GLenum coordType, [] coords)]
type PFNGLPATHCOORDSNVPROC = [(GLuint path, GLsizei numCoords, GLenum coordType, [] coords)]
type PFNGLPATHSUBCOMMANDSNVPROC = [(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, [GLubyte] commands, GLsizei numCoords, GLenum coordType, [] coords)]
type PFNGLPATHSUBCOORDSNVPROC = [(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, [] coords)]
type PFNGLPATHSTRINGNVPROC = [(GLuint path, GLenum format, GLsizei length, [] pathString)]
type PFNGLPATHGLYPHSNVPROC = [(GLuint firstPathName, GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, [] charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)]
type PFNGLPATHGLYPHRANGENVPROC = [(GLuint firstPathName, GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)]
type PFNGLWEIGHTPATHSNVPROC = [(GLuint resultPath, GLsizei numPaths, [GLuint] paths, [GLfloat] weights)]
type PFNGLCOPYPATHNVPROC = [(GLuint resultPath, GLuint srcPath)]
type PFNGLINTERPOLATEPATHSNVPROC = [(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)]
type PFNGLTRANSFORMPATHNVPROC = [(GLuint resultPath, GLuint srcPath, GLenum transformType, [GLfloat] transformValues)]
type PFNGLPATHPARAMETERIVNVPROC = [(GLuint path, GLenum pname, [GLint] value)]
type PFNGLPATHPARAMETERINVPROC = [(GLuint path, GLenum pname, GLint value)]
type PFNGLPATHPARAMETERFVNVPROC = [(GLuint path, GLenum pname, [GLfloat] value)]
type PFNGLPATHPARAMETERFNVPROC = [(GLuint path, GLenum pname, GLfloat value)]
type PFNGLPATHDASHARRAYNVPROC = [(GLuint path, GLsizei dashCount, [GLfloat] dashArray)]
type PFNGLPATHSTENCILFUNCNVPROC = [(GLenum func, GLint ref, GLuint mask)]
type PFNGLPATHSTENCILDEPTHOFFSETNVPROC = [(GLfloat factor, GLfloat units)]
type PFNGLSTENCILFILLPATHNVPROC = [(GLuint path, GLenum fillMode, GLuint mask)]
type PFNGLSTENCILSTROKEPATHNVPROC = [(GLuint path, GLint reference, GLuint mask)]
type PFNGLSTENCILFILLPATHINSTANCEDNVPROC = [(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, [GLfloat] transformValues)]
type PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = [(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, [GLfloat] transformValues)]
type PFNGLPATHCOVERDEPTHFUNCNVPROC = [(GLenum func)]
type PFNGLCOVERFILLPATHNVPROC = [(GLuint path, GLenum coverMode)]
type PFNGLCOVERSTROKEPATHNVPROC = [(GLuint path, GLenum coverMode)]
type PFNGLCOVERFILLPATHINSTANCEDNVPROC = [(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum coverMode, GLenum transformType, [GLfloat] transformValues)]
type PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = [(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum coverMode, GLenum transformType, [GLfloat] transformValues)]
type PFNGLGETPATHPARAMETERIVNVPROC = [(GLuint path, GLenum pname, [GLint] value)]
type PFNGLGETPATHPARAMETERFVNVPROC = [(GLuint path, GLenum pname, [GLfloat] value)]
type PFNGLGETPATHCOMMANDSNVPROC = [(GLuint path, [GLubyte] commands)]
type PFNGLGETPATHCOORDSNVPROC = [(GLuint path, [GLfloat] coords)]
type PFNGLGETPATHDASHARRAYNVPROC = [(GLuint path, [GLfloat] dashArray)]
type PFNGLGETPATHMETRICSNVPROC = [(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLsizei stride, [GLfloat] metrics)]
type PFNGLGETPATHMETRICRANGENVPROC = [(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, [GLfloat] metrics)]
type PFNGLGETPATHSPACINGNVPROC = [(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, [GLfloat] returnedSpacing)]
type PFNGLISPOINTINFILLPATHNVPROC = [(GLuint path, GLuint mask, GLfloat x, GLfloat y) => GLboolean]
type PFNGLISPOINTINSTROKEPATHNVPROC = [(GLuint path, GLfloat x, GLfloat y) => GLboolean]
type PFNGLGETPATHLENGTHNVPROC = [(GLuint path, GLsizei startSegment, GLsizei numSegments) => GLfloat]
type PFNGLPOINTALONGPATHNVPROC = [(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, [GLfloat] x, [GLfloat] y, [GLfloat] tangentX, [GLfloat] tangentY) => GLboolean]
type PFNGLMATRIXLOAD3X2FNVPROC = [(GLenum matrixMode, [GLfloat] m)]
type PFNGLMATRIXLOAD3X3FNVPROC = [(GLenum matrixMode, [GLfloat] m)]
type PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = [(GLenum matrixMode, [GLfloat] m)]
type PFNGLMATRIXMULT3X2FNVPROC = [(GLenum matrixMode, [GLfloat] m)]
type PFNGLMATRIXMULT3X3FNVPROC = [(GLenum matrixMode, [GLfloat] m)]
type PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = [(GLenum matrixMode, [GLfloat] m)]
type PFNGLSTENCILTHENCOVERFILLPATHNVPROC = [(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)]
type PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = [(GLuint path, GLint reference, GLuint mask, GLenum coverMode)]
type PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = [(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, [GLfloat] transformValues)]
type PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = [(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, [GLfloat] transformValues)]
type PFNGLPATHGLYPHINDEXRANGENVPROC = [(GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, [GLuint] baseAndCount) => GLenum]
type PFNGLPATHGLYPHINDEXARRAYNVPROC = [(GLuint firstPathName, GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) => GLenum]
type PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = [(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, [] fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) => GLenum]
type PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = [(GLuint program, GLint location, GLenum genMode, GLint components, [GLfloat] coeffs)]
type PFNGLGETPROGRAMRESOURCEFVNVPROC = [(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, [GLenum] props, GLsizei count, [GLsizei] length, [GLfloat] params)]

extern glGenPathsNV(GLsizei range) => GLuint
extern glDeletePathsNV(GLuint path, GLsizei range)
extern glIsPathNV(GLuint path) => GLboolean
extern glPathCommandsNV(GLuint path, GLsizei numCommands, [GLubyte] commands, GLsizei numCoords, GLenum coordType, [] coords)
extern glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, [] coords)
extern glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, [GLubyte] commands, GLsizei numCoords, GLenum coordType, [] coords)
extern glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, [] coords)
extern glPathStringNV(GLuint path, GLenum format, GLsizei length, [] pathString)
extern glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, [] charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
extern glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
extern glWeightPathsNV(GLuint resultPath, GLsizei numPaths, [GLuint] paths, [GLfloat] weights)
extern glCopyPathNV(GLuint resultPath, GLuint srcPath)
extern glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
extern glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, [GLfloat] transformValues)
extern glPathParameterivNV(GLuint path, GLenum pname, [GLint] value)
extern glPathParameteriNV(GLuint path, GLenum pname, GLint value)
extern glPathParameterfvNV(GLuint path, GLenum pname, [GLfloat] value)
extern glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
extern glPathDashArrayNV(GLuint path, GLsizei dashCount, [GLfloat] dashArray)
extern glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
extern glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
extern glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
extern glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
extern glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, [GLfloat] transformValues)
extern glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, [GLfloat] transformValues)
extern glPathCoverDepthFuncNV(GLenum func)
extern glCoverFillPathNV(GLuint path, GLenum coverMode)
extern glCoverStrokePathNV(GLuint path, GLenum coverMode)
extern glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum coverMode, GLenum transformType, [GLfloat] transformValues)
extern glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum coverMode, GLenum transformType, [GLfloat] transformValues)
extern glGetPathParameterivNV(GLuint path, GLenum pname, [GLint] value)
extern glGetPathParameterfvNV(GLuint path, GLenum pname, [GLfloat] value)
extern glGetPathCommandsNV(GLuint path, [GLubyte] commands)
extern glGetPathCoordsNV(GLuint path, [GLfloat] coords)
extern glGetPathDashArrayNV(GLuint path, [GLfloat] dashArray)
extern glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLsizei stride, [GLfloat] metrics)
extern glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, [GLfloat] metrics)
extern glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, [GLfloat] returnedSpacing)
extern glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) => GLboolean
extern glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) => GLboolean
extern glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) => GLfloat
extern glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, [GLfloat] x, [GLfloat] y, [GLfloat] tangentX, [GLfloat] tangentY) => GLboolean
extern glMatrixLoad3x2fNV(GLenum matrixMode, [GLfloat] m)
extern glMatrixLoad3x3fNV(GLenum matrixMode, [GLfloat] m)
extern glMatrixLoadTranspose3x3fNV(GLenum matrixMode, [GLfloat] m)
extern glMatrixMult3x2fNV(GLenum matrixMode, [GLfloat] m)
extern glMatrixMult3x3fNV(GLenum matrixMode, [GLfloat] m)
extern glMatrixMultTranspose3x3fNV(GLenum matrixMode, [GLfloat] m)
extern glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
extern glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode)
extern glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, [GLfloat] transformValues)
extern glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, [GLfloat] transformValues)
extern glPathGlyphIndexRangeNV(GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, [GLuint] baseAndCount) => GLenum
extern glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) => GLenum
extern glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, [] fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) => GLenum
extern glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, [GLfloat] coeffs)
extern glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, [GLenum] props, GLsizei count, [GLsizei] length, [GLfloat] params)

export SHARED_EDGE_NV() => u64                 = 0xC0

export SHADING_RATE_IMAGE_PER_PRIMITIVE_NV() => u64 = 0x95B1
export SHADING_RATE_IMAGE_PALETTE_COUNT_NV() => u64 = 0x95B2

export REPRESENTATIVE_FRAGMENT_TEST_NV() => u64 = 0x937F

export SAMPLE_LOCATION_SUBPIXEL_BITS_NV() => u64 = 0x933D
export SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV() => u64 = 0x933E
export SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV() => u64 = 0x933F
export PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV() => u64 = 0x9340
export SAMPLE_LOCATION_NV() => u64             = 0x8E50
export PROGRAMMABLE_SAMPLE_LOCATION_NV() => u64 = 0x9341
export FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV() => u64 = 0x9342
export FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV() => u64 = 0x9343

type PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = [(GLenum target, GLuint start, GLsizei count, [GLfloat] v)]
type PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = [(GLuint framebuffer, GLuint start, GLsizei count, [GLfloat] v)]
type PFNGLRESOLVEDEPTHVALUESNVPROC = [()]
extern glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, [GLfloat] v)
extern glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, [GLfloat] v)
extern glResolveDepthValuesNV()

export SCISSOR_TEST_EXCLUSIVE_NV() => u64      = 0x9555
export SCISSOR_BOX_EXCLUSIVE_NV() => u64       = 0x9556

type PFNGLSCISSOREXCLUSIVENVPROC = [(GLint x, GLint y, GLsizei width, GLsizei height)]
type PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = [(GLuint first, GLsizei count, [GLint] v)]

extern glScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height)
extern glScissorExclusiveArrayvNV(GLuint first, GLsizei count, [GLint] v)

export BUFFER_GPU_ADDRESS_NV() => u64          = 0x8F1D
export GPU_ADDRESS_NV() => u64                 = 0x8F34
export MAX_SHADER_BUFFER_ADDRESS_NV() => u64   = 0x8F35

type PFNGLMAKEBUFFERRESIDENTNVPROC = [(GLenum target, GLenum access)]
type PFNGLMAKEBUFFERNONRESIDENTNVPROC = [(GLenum target)]
type PFNGLISBUFFERRESIDENTNVPROC = [(GLenum target) => GLboolean]
type PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = [(GLuint buffer, GLenum access)]
type PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = [(GLuint buffer)]
type PFNGLISNAMEDBUFFERRESIDENTNVPROC = [(GLuint buffer) => GLboolean]
type PFNGLGETBUFFERPARAMETERUI64VNVPROC = [(GLenum target, GLenum pname, [GLuint64EXT] params)]
type PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = [(GLuint buffer, GLenum pname, [GLuint64EXT] params)]
type PFNGLGETINTEGERUI64VNVPROC = [(GLenum value, [GLuint64EXT] result)]
type PFNGLUNIFORMUI64NVPROC = [(GLint location, GLuint64EXT value)]
type PFNGLUNIFORMUI64VNVPROC = [(GLint location, GLsizei count, [GLuint64EXT] value)]
type PFNGLGETUNIFORMUI64VNVPROC = [(GLuint program, GLint location, [GLuint64EXT] params)]
type PFNGLPROGRAMUNIFORMUI64NVPROC = [(GLuint program, GLint location, GLuint64EXT value)]
type PFNGLPROGRAMUNIFORMUI64VNVPROC = [(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)]

extern glMakeBufferResidentNV(GLenum target, GLenum access)
extern glMakeBufferNonResidentNV(GLenum target)
extern glIsBufferResidentNV(GLenum target) => GLboolean
extern glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
extern glMakeNamedBufferNonResidentNV(GLuint buffer)
extern glIsNamedBufferResidentNV(GLuint buffer) => GLboolean
extern glGetBufferParameterui64vNV(GLenum target, GLenum pname, [GLuint64EXT] params)
extern glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, [GLuint64EXT] params)
extern glGetIntegerui64vNV(GLenum value, [GLuint64EXT] result)
extern glUniformui64NV(GLint location, GLuint64EXT value)
extern glUniformui64vNV(GLint location, GLsizei count, [GLuint64EXT] value)
extern glGetUniformui64vNV(GLuint program, GLint location, [GLuint64EXT] params)
extern glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value)
extern glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value)

export SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV() => u64 = 0x00000010

export SUBGROUP_FEATURE_PARTITIONED_BIT_NV() => u64 = 0x00000100

export WARP_SIZE_NV() => u64                   = 0x9339
export WARPS_PER_SM_NV() => u64                = 0x933A
export SM_COUNT_NV() => u64                    = 0x933B

export SHADING_RATE_IMAGE_NV() => u64          = 0x9563
export SHADING_RATE_NO_INVOCATIONS_NV() => u64 = 0x9564
export SHADING_RATE_1_INVOCATION_PER_PIXEL_NV() => u64 = 0x9565
export SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV() => u64 = 0x9566
export SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV() => u64 = 0x9567
export SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV() => u64 = 0x9568
export SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV() => u64 = 0x9569
export SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV() => u64 = 0x956A
export SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV() => u64 = 0x956B
export SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV() => u64 = 0x956C
export SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV() => u64 = 0x956D
export SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV() => u64 = 0x956E
export SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV() => u64 = 0x956F
export SHADING_RATE_IMAGE_BINDING_NV() => u64  = 0x955B
export SHADING_RATE_IMAGE_TEXEL_WIDTH_NV() => u64 = 0x955C
export SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV() => u64 = 0x955D
export SHADING_RATE_IMAGE_PALETTE_SIZE_NV() => u64 = 0x955E
export MAX_COARSE_FRAGMENT_SAMPLES_NV() => u64 = 0x955F
export SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV() => u64 = 0x95AE
export SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV() => u64 = 0x95AF
export SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV() => u64 = 0x95B0

type PFNGLBINDSHADINGRATEIMAGENVPROC = [(GLuint texture)]
type PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = [(GLuint viewport, GLuint entry, [GLenum] rate)]
type PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = [(GLenum rate, GLuint samples, GLuint index, [GLint] location)]
type PFNGLSHADINGRATEIMAGEBARRIERNVPROC = [(GLboolean synchronize)]
type PFNGLSHADINGRATEIMAGEPALETTENVPROC = [(GLuint viewport, GLuint first, GLsizei count, [GLenum] rates)]
type PFNGLSHADINGRATESAMPLEORDERNVPROC = [(GLenum order)]
type PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = [(GLenum rate, GLuint samples, [GLint] locations)]

extern glBindShadingRateImageNV(GLuint texture)
extern glGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, [GLenum] rate)
extern glGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, [GLint] location)
extern glShadingRateImageBarrierNV(GLboolean synchronize)
extern glShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, [GLenum] rates)
extern glShadingRateSampleOrderNV(GLenum order)
extern glShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, [GLint] locations)

type PFNGLTEXTUREBARRIERNVPROC = [()]
extern glTextureBarrierNV()

export UNIFORM_BUFFER_UNIFIED_NV() => u64      = 0x936E
export UNIFORM_BUFFER_ADDRESS_NV() => u64      = 0x936F
export UNIFORM_BUFFER_LENGTH_NV() => u64       = 0x9370

type PFNGLVERTEXATTRIBL1I64NVPROC = [(GLuint index, GLint64EXT x)]
type PFNGLVERTEXATTRIBL2I64NVPROC = [(GLuint index, GLint64EXT x, GLint64EXT y)]
type PFNGLVERTEXATTRIBL3I64NVPROC = [(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)]
type PFNGLVERTEXATTRIBL4I64NVPROC = [(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)]
type PFNGLVERTEXATTRIBL1I64VNVPROC = [(GLuint index, [GLint64EXT] v)]
type PFNGLVERTEXATTRIBL2I64VNVPROC = [(GLuint index, [GLint64EXT] v)]
type PFNGLVERTEXATTRIBL3I64VNVPROC = [(GLuint index, [GLint64EXT] v)]
type PFNGLVERTEXATTRIBL4I64VNVPROC = [(GLuint index, [GLint64EXT] v)]
type PFNGLVERTEXATTRIBL1UI64NVPROC = [(GLuint index, GLuint64EXT x)]
type PFNGLVERTEXATTRIBL2UI64NVPROC = [(GLuint index, GLuint64EXT x, GLuint64EXT y)]
type PFNGLVERTEXATTRIBL3UI64NVPROC = [(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)]
type PFNGLVERTEXATTRIBL4UI64NVPROC = [(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)]
type PFNGLVERTEXATTRIBL1UI64VNVPROC = [(GLuint index, [GLuint64EXT] v)]
type PFNGLVERTEXATTRIBL2UI64VNVPROC = [(GLuint index, [GLuint64EXT] v)]
type PFNGLVERTEXATTRIBL3UI64VNVPROC = [(GLuint index, [GLuint64EXT] v)]
type PFNGLVERTEXATTRIBL4UI64VNVPROC = [(GLuint index, [GLuint64EXT] v)]
type PFNGLGETVERTEXATTRIBLI64VNVPROC = [(GLuint index, GLenum pname, [GLint64EXT] params)]
type PFNGLGETVERTEXATTRIBLUI64VNVPROC = [(GLuint index, GLenum pname, [GLuint64EXT] params)]
type PFNGLVERTEXATTRIBLFORMATNVPROC = [(GLuint index, GLint size, GLenum type, GLsizei stride)]

extern glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
extern glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
extern glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
extern glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
extern glVertexAttribL1i64vNV(GLuint index, [GLint64EXT] v)
extern glVertexAttribL2i64vNV(GLuint index, [GLint64EXT] v)
extern glVertexAttribL3i64vNV(GLuint index, [GLint64EXT] v)
extern glVertexAttribL4i64vNV(GLuint index, [GLint64EXT] v)
extern glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
extern glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
extern glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
extern glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
extern glVertexAttribL1ui64vNV(GLuint index, [GLuint64EXT] v)
extern glVertexAttribL2ui64vNV(GLuint index, [GLuint64EXT] v)
extern glVertexAttribL3ui64vNV(GLuint index, [GLuint64EXT] v)
extern glVertexAttribL4ui64vNV(GLuint index, [GLuint64EXT] v)
extern glGetVertexAttribLi64vNV(GLuint index, GLenum pname, [GLint64EXT] params)
extern glGetVertexAttribLui64vNV(GLuint index, GLenum pname, [GLuint64EXT] params)
extern glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)

export VERTEX_ATTRIB_ARRAY_UNIFIED_NV() => u64 = 0x8F1E
export ELEMENT_ARRAY_UNIFIED_NV() => u64       = 0x8F1F
export VERTEX_ATTRIB_ARRAY_ADDRESS_NV() => u64 = 0x8F20
export VERTEX_ARRAY_ADDRESS_NV() => u64        = 0x8F21
export NORMAL_ARRAY_ADDRESS_NV() => u64        = 0x8F22
export COLOR_ARRAY_ADDRESS_NV() => u64         = 0x8F23
export INDEX_ARRAY_ADDRESS_NV() => u64         = 0x8F24
export TEXTURE_COORD_ARRAY_ADDRESS_NV() => u64 = 0x8F25
export EDGE_FLAG_ARRAY_ADDRESS_NV() => u64     = 0x8F26
export SECONDARY_COLOR_ARRAY_ADDRESS_NV() => u64 = 0x8F27
export FOG_COORD_ARRAY_ADDRESS_NV() => u64     = 0x8F28
export ELEMENT_ARRAY_ADDRESS_NV() => u64       = 0x8F29
export VERTEX_ATTRIB_ARRAY_LENGTH_NV() => u64  = 0x8F2A
export VERTEX_ARRAY_LENGTH_NV() => u64         = 0x8F2B
export NORMAL_ARRAY_LENGTH_NV() => u64         = 0x8F2C
export COLOR_ARRAY_LENGTH_NV() => u64          = 0x8F2D
export INDEX_ARRAY_LENGTH_NV() => u64          = 0x8F2E
export TEXTURE_COORD_ARRAY_LENGTH_NV() => u64  = 0x8F2F
export EDGE_FLAG_ARRAY_LENGTH_NV() => u64      = 0x8F30
export SECONDARY_COLOR_ARRAY_LENGTH_NV() => u64 = 0x8F31
export FOG_COORD_ARRAY_LENGTH_NV() => u64      = 0x8F32
export ELEMENT_ARRAY_LENGTH_NV() => u64        = 0x8F33
export DRAW_INDIRECT_UNIFIED_NV() => u64       = 0x8F40
export DRAW_INDIRECT_ADDRESS_NV() => u64       = 0x8F41
export DRAW_INDIRECT_LENGTH_NV() => u64        = 0x8F42

type PFNGLBUFFERADDRESSRANGENVPROC = [(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)]
type PFNGLVERTEXFORMATNVPROC = [(GLint size, GLenum type, GLsizei stride)]
type PFNGLNORMALFORMATNVPROC = [(GLenum type, GLsizei stride)]
type PFNGLCOLORFORMATNVPROC = [(GLint size, GLenum type, GLsizei stride)]
type PFNGLINDEXFORMATNVPROC = [(GLenum type, GLsizei stride)]
type PFNGLTEXCOORDFORMATNVPROC = [(GLint size, GLenum type, GLsizei stride)]
type PFNGLEDGEFLAGFORMATNVPROC = [(GLsizei stride)]
type PFNGLSECONDARYCOLORFORMATNVPROC = [(GLint size, GLenum type, GLsizei stride)]
type PFNGLFOGCOORDFORMATNVPROC = [(GLenum type, GLsizei stride)]
type PFNGLVERTEXATTRIBFORMATNVPROC = [(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)]
type PFNGLVERTEXATTRIBIFORMATNVPROC = [(GLuint index, GLint size, GLenum type, GLsizei stride)]
type PFNGLGETINTEGERUI64I_VNVPROC = [(GLenum value, GLuint index, [GLuint64EXT] result)]

extern glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
extern glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
extern glNormalFormatNV(GLenum type, GLsizei stride)
extern glColorFormatNV(GLint size, GLenum type, GLsizei stride)
extern glIndexFormatNV(GLenum type, GLsizei stride)
extern glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
extern glEdgeFlagFormatNV(GLsizei stride)
extern glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
extern glFogCoordFormatNV(GLenum type, GLsizei stride)
extern glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
extern glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
extern glGetIntegerui64i_vNV(GLenum value, GLuint index, [GLuint64EXT] result)

export VIEWPORT_SWIZZLE_POSITIVE_X_NV() => u64 = 0x9350
export VIEWPORT_SWIZZLE_NEGATIVE_X_NV() => u64 = 0x9351
export VIEWPORT_SWIZZLE_POSITIVE_Y_NV() => u64 = 0x9352
export VIEWPORT_SWIZZLE_NEGATIVE_Y_NV() => u64 = 0x9353
export VIEWPORT_SWIZZLE_POSITIVE_Z_NV() => u64 = 0x9354
export VIEWPORT_SWIZZLE_NEGATIVE_Z_NV() => u64 = 0x9355
export VIEWPORT_SWIZZLE_POSITIVE_W_NV() => u64 = 0x9356
export VIEWPORT_SWIZZLE_NEGATIVE_W_NV() => u64 = 0x9357
export VIEWPORT_SWIZZLE_X_NV() => u64          = 0x9358
export VIEWPORT_SWIZZLE_Y_NV() => u64          = 0x9359
export VIEWPORT_SWIZZLE_Z_NV() => u64          = 0x935A
export VIEWPORT_SWIZZLE_W_NV() => u64          = 0x935B

type PFNGLVIEWPORTSWIZZLENVPROC = [(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)]

extern glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)

export FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR() => u64       = 0x9630
export FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR() => u64 = 0x9632
export MAX_VIEWS_OVR() => u64                                      = 0x9631
export FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR() => u64            = 0x9633

type PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = [(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)]
type PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = [(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)]

extern glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
extern glNamedFramebufferTextureMultiviewOVR(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)

export cullFace(GLenum mode) = glCullFace(mode)
export frontFace(GLenum mode) = glFrontFace(mode)
export hint(GLenum target, GLenum mode) = glHint(target, mode)
export lineWidth(GLfloat width) = glLineWidth(width)
export pointSize(GLfloat size) = glPointSize(size)
export polygonMode(GLenum face, GLenum mode) = glPolygonMode(face, mode)
export scissor(GLint x, GLint y, GLsizei width, GLsizei height) = glScissor(x, y, width, height)
export texParameterf(GLenum target, GLenum pname, GLfloat param) = glTexParameterf(target, pname, param)
export texParameterfv(GLenum target, GLenum pname, [GLfloat] params) = glTexParameterfv(target, pname, params)
export texParameteri(GLenum target, GLenum pname, GLint param) = glTexParameteri(target, pname, param)
export texParameteriv(GLenum target, GLenum pname, [GLint] params) = glTexParameteriv(target, pname, params)
export texImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, [] pixels) = glTexImage1D(target, level, internalformat, width, border, format, type, pixels)
export texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [] pixels) = glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels)
export drawBuffer(GLenum buf) = glDrawBuffer(buf)
export clear(GLbitfield mask) = glClear(mask)
export clearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = glClearColor(red, green, blue, alpha)
export clearStencil(GLint s) = glClearStencil(s)
export clearDepth(GLdouble depth) = glClearDepth(depth)
export stencilMask(GLuint mask) = glStencilMask(mask)
export colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) = glColorMask(red, green, blue, alpha)
export depthMask(GLboolean flag) = glDepthMask(flag)
export disable(GLenum cap) = glDisable(cap)
export enable(GLenum cap) = glEnable(cap)
export finish() = glFinish()
export flush() = glFlush()
export blendFunc(GLenum sfactor, GLenum dfactor) = glBlendFunc(sfactor, dfactor)
export logicOp(GLenum opcode) = glLogicOp(opcode)
export stencilFunc(GLenum func, GLint ref, GLuint mask) = glStencilFunc(func, ref, mask)
export stencilOp(GLenum fail, GLenum zfail, GLenum zpass) = glStencilOp(fail, zfail, zpass)
export depthFunc(GLenum func) = glDepthFunc(func)
export pixelStoref(GLenum pname, GLfloat param) = glPixelStoref(pname, param)
export pixelStorei(GLenum pname, GLint param) = glPixelStorei(pname, param)
export readBuffer(GLenum src) = glReadBuffer(src)
export readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels) = glReadPixels(x, y, width, height, format, type, pixels)
export getBooleanv(GLenum pname, [GLboolean] data) = glGetBooleanv(pname, data)
export getDoublev(GLenum pname, [GLdouble] data) = glGetDoublev(pname, data)
export getError() => GLenum = glGetError()
export getFloatv(GLenum pname, [GLfloat] data) = glGetFloatv(pname, data)
export getIntegerv(GLenum pname, [GLint] data) = glGetIntegerv(pname, data)
export getString(GLenum name) => [GLubyte] = glGetString(name)
export getTexImage(GLenum target, GLint level, GLenum format, GLenum type, [] pixels) = glGetTexImage(target, level, format, type, pixels)
export getTexParameterfv(GLenum target, GLenum pname, [GLfloat] params) = glGetTexParameterfv(target, pname, params)
export getTexParameteriv(GLenum target, GLenum pname, [GLint] params) = glGetTexParameteriv(target, pname, params)
export getTexLevelParameterfv(GLenum target, GLint level, GLenum pname, [GLfloat] params) = glGetTexLevelParameterfv(target, level, pname, params)
export getTexLevelParameteriv(GLenum target, GLint level, GLenum pname, [GLint] params) = glGetTexLevelParameteriv(target, level, pname, params)
export isEnabled(GLenum cap) => GLboolean = glIsEnabled(cap)
export depthRange(GLdouble n, GLdouble f) = glDepthRange(n, f)
export viewport(GLint x, GLint y, GLsizei width, GLsizei height) = glViewport(x, y, width, height)
export drawArrays(GLenum mode, GLint first, GLsizei count) = glDrawArrays(mode, first, count)
#export drawElements(GLenum mode, GLsizei count, GLenum type, [] indices) = glDrawElements()
#export getPointerv(GLenum pname, [[]] params) = glGetPointerv()
#export polygonOffset(GLfloat factor, GLfloat units) = glPolygonOffset()
#export copyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = glCopyTexImage1D()
#export copyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = glCopyTexImage2D()
#export copyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = glCopyTexSubImage1D()
#export copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = glCopyTexSubImage2D()
#export texSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels) = glTexSubImage1D()
#export texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels) = glTexSubImage2D()
#export bindTexture(GLenum target, GLuint texture) = glBindTexture()
#export deleteTextures(GLsizei n, [GLuint] textures) = glDeleteTextures()
#export genTextures(GLsizei n, [GLuint] textures) = glGenTextures()
#export isTexture(GLuint texture) => GLboolean = glIsTexture()
#export drawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, [] indices) = glDrawRangeElements()
#export texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [] pixels) = glTexImage3D()
#export texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels) = glTexSubImage3D()
#export copyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = glCopyTexSubImage3D()
#export activeTexture(GLenum texture) = glActiveTexture()
#export sampleCoverage(GLfloat value, GLboolean invert) = glSampleCoverage()
#export compressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, [] data) = glCompressedTexImage3D()
#export compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, [] data) = glCompressedTexImage2D()
#export compressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, [] data) = glCompressedTexImage1D()
#export compressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] data) = glCompressedTexSubImage3D()
#export compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] data) = glCompressedTexSubImage2D()
#export compressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] data) = glCompressedTexSubImage1D()
#export getCompressedTexImage(GLenum target, GLint level, [] img) = glGetCompressedTexImage()
#export blendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) = glBlendFuncSeparate()
#export multiDrawArrays(GLenum mode, [GLint] first, [GLsizei] count, GLsizei drawcount) = glMultiDrawArrays()
#export multiDrawElements(GLenum mode, [GLsizei] count, GLenum type, [[]] indices, GLsizei drawcount) = glMultiDrawElements()
#export pointParameterf(GLenum pname, GLfloat param) = glPointParameterf()
#export pointParameterfv(GLenum pname, [GLfloat] params) = glPointParameterfv()
#export pointParameteri(GLenum pname, GLint param) = glPointParameteri()
#export pointParameteriv(GLenum pname, [GLint] params) = glPointParameteriv()
#export blendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = glBlendColor()
#export blendEquation(GLenum mode) = glBlendEquation()
#export genQueries(GLsizei n, [GLuint] ids) = glGenQueries()
#export deleteQueries(GLsizei n, [GLuint] ids) = glDeleteQueries()
#export isQuery(GLuint id) => GLboolean = glIsQuery()
#export beginQuery(GLenum target, GLuint id) = glBeginQuery()
#export endQuery(GLenum target) = glEndQuery()
#export getQueryiv(GLenum target, GLenum pname, [GLint] params) = glGetQueryiv()
#export getQueryObjectiv(GLuint id, GLenum pname, [GLint] params) = glGetQueryObjectiv()
#export getQueryObjectuiv(GLuint id, GLenum pname, [GLuint] params) = glGetQueryObjectuiv()
#export bindBuffer(GLenum target, GLuint buffer) = glBindBuffer()
#export deleteBuffers(GLsizei n, [GLuint] buffers) = glDeleteBuffers()
#export genBuffers(GLsizei n, [GLuint] buffers) = glGenBuffers()
#export isBuffer(GLuint buffer) => GLboolean = glIsBuffer()
#export bufferData(GLenum target, GLsizeiptr size, [] data, GLenum usage) = glBufferData()
#export bufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, [] data) = glBufferSubData()
#export getBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, [] data) = glGetBufferSubData()
#export mapBuffer(GLenum target, GLenum access) => [] = glMapBuffer()
#export unmapBuffer(GLenum target) => GLboolean = glUnmapBuffer()
#export getBufferParameteriv(GLenum target, GLenum pname, [GLint] params) = glGetBufferParameteriv()
#export getBufferPointerv(GLenum target, GLenum pname, [[]] params) = glGetBufferPointerv()
#export blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) = glBlendEquationSeparate()
#export drawBuffers(GLsizei n, [GLenum] bufs) = glDrawBuffers()
#export stencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) = glStencilOpSeparate()
#export stencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) = glStencilFuncSeparate()
#export stencilMaskSeparate(GLenum face, GLuint mask) = glStencilMaskSeparate()
#export attachShader(GLuint program, GLuint shader) = glAttachShader()
#export bindAttribLocation(GLuint program, GLuint index, [GLchar] name) = glBindAttribLocation()
#export compileShader(GLuint shader) = glCompileShader()
#export createProgram() => GLuint = glCreateProgram()
#export createShader(GLenum type) => GLuint = glCreateShader()
#export deleteProgram(GLuint program) = glDeleteProgram()
#export deleteShader(GLuint shader) = glDeleteShader()
#export detachShader(GLuint program, GLuint shader) = glDetachShader()
#export disableVertexAttribArray(GLuint index) = glDisableVertexAttribArray()
#export enableVertexAttribArray(GLuint index) = glEnableVertexAttribArray()
#export getActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [GLsizei] length, [GLint] size, [GLenum] type, [GLchar] name) = glGetActiveAttrib()
#export getActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [GLsizei] length, [GLint] size, [GLenum] type, [GLchar] name) = glGetActiveUniform()
#export getAttachedShaders(GLuint program, GLsizei maxCount, [GLsizei] count, [GLuint] shaders) = glGetAttachedShaders()
#export getAttribLocation(GLuint program, [GLchar] name) => GLint = glGetAttribLocation()
#export getProgramiv(GLuint program, GLenum pname, [GLint] params) = glGetProgramiv()
#export getProgramInfoLog(GLuint program, GLsizei bufSize, [GLsizei] length, [GLchar] infoLog) = glGetProgramInfoLog()
#export getShaderiv(GLuint shader, GLenum pname, [GLint] params) = glGetShaderiv()
#export getShaderInfoLog(GLuint shader, GLsizei bufSize, [GLsizei] length, [GLchar] infoLog) = glGetShaderInfoLog()
#export getShaderSource(GLuint shader, GLsizei bufSize, [GLsizei] length, [GLchar] source) = glGetShaderSource()
#export getUniformLocation(GLuint program, [GLchar] name) => GLint = glGetUniformLocation()
#export getUniformfv(GLuint program, GLint location, [GLfloat] params) = glGetUniformfv()
#export getUniformiv(GLuint program, GLint location, [GLint] params) = glGetUniformiv()
#export getVertexAttribdv(GLuint index, GLenum pname, [GLdouble] params) = glGetVertexAttribdv()
#export getVertexAttribfv(GLuint index, GLenum pname, [GLfloat] params) = glGetVertexAttribfv()
#export getVertexAttribiv(GLuint index, GLenum pname, [GLint] params) = glGetVertexAttribiv()
#export getVertexAttribPointerv(GLuint index, GLenum pname, [[]] pointer) = glGetVertexAttribPointerv()
#export isProgram(GLuint program) => GLboolean = glIsProgram()
#export isShader(GLuint shader) => GLboolean = glIsShader()
#export linkProgram(GLuint program) = glLinkProgram()
#export shaderSource(GLuint shader, GLsizei count, [[GLchar]] string, [GLint] length) = glShaderSource()
#export useProgram(GLuint program) = glUseProgram()
#export uniform1f(GLint location, GLfloat v0) = glUniform1f()
#export uniform2f(GLint location, GLfloat v0, GLfloat v1) = glUniform2f()
#export uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = glUniform3f()
#export uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = glUniform4f()
#export uniform1i(GLint location, GLint v0) = glUniform1i()
#export uniform2i(GLint location, GLint v0, GLint v1) = glUniform2i()
#export uniform3i(GLint location, GLint v0, GLint v1, GLint v2) = glUniform3i()
#export uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = glUniform4i()
#export uniform1fv(GLint location, GLsizei count, [GLfloat] value) = glUniform1fv()
#export uniform2fv(GLint location, GLsizei count, [GLfloat] value) = glUniform2fv()
#export uniform3fv(GLint location, GLsizei count, [GLfloat] value) = glUniform3fv()
#export uniform4fv(GLint location, GLsizei count, [GLfloat] value) = glUniform4fv()
#export uniform1iv(GLint location, GLsizei count, [GLint] value) = glUniform1iv()
#export uniform2iv(GLint location, GLsizei count, [GLint] value) = glUniform2iv()
#export uniform3iv(GLint location, GLsizei count, [GLint] value) = glUniform3iv()
#export uniform4iv(GLint location, GLsizei count, [GLint] value) = glUniform4iv()
#export uniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glUniformMatrix2fv()
#export uniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glUniformMatrix3fv()
#export uniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glUniformMatrix4fv()
#export validateProgram(GLuint program) = glValidateProgram()
#export vertexAttrib1d(GLuint index, GLdouble x) = glVertexAttrib1d()
#export vertexAttrib1dv(GLuint index, [GLdouble] v) = glVertexAttrib1dv()
#export vertexAttrib1f(GLuint index, GLfloat x) = glVertexAttrib1f()
#export vertexAttrib1fv(GLuint index, [GLfloat] v) = glVertexAttrib1fv()
#export vertexAttrib1s(GLuint index, GLshort x) = glVertexAttrib1s()
#export vertexAttrib1sv(GLuint index, [GLshort] v) = glVertexAttrib1sv()
#export vertexAttrib2d(GLuint index, GLdouble x, GLdouble y) = glVertexAttrib2d()
#export vertexAttrib2dv(GLuint index, [GLdouble] v) = glVertexAttrib2dv()
#export vertexAttrib2f(GLuint index, GLfloat x, GLfloat y) = glVertexAttrib2f()
#export vertexAttrib2fv(GLuint index, [GLfloat] v) = glVertexAttrib2fv()
#export vertexAttrib2s(GLuint index, GLshort x, GLshort y) = glVertexAttrib2s()
#export vertexAttrib2sv(GLuint index, [GLshort] v) = glVertexAttrib2sv()
#export vertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) = glVertexAttrib3d()
#export vertexAttrib3dv(GLuint index, [GLdouble] v) = glVertexAttrib3dv()
#export vertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) = glVertexAttrib3f()
#export vertexAttrib3fv(GLuint index, [GLfloat] v) = glVertexAttrib3fv()
#export vertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) = glVertexAttrib3s()
#export vertexAttrib3sv(GLuint index, [GLshort] v) = glVertexAttrib3sv()
#export vertexAttrib4Nbv(GLuint index, [GLbyte] v) = glVertexAttrib4Nbv()
#export vertexAttrib4Niv(GLuint index, [GLint] v) = glVertexAttrib4Niv()
#export vertexAttrib4Nsv(GLuint index, [GLshort] v) = glVertexAttrib4Nsv()
#export vertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) = glVertexAttrib4Nub()
#export vertexAttrib4Nubv(GLuint index, [GLubyte] v) = glVertexAttrib4Nubv()
#export vertexAttrib4Nuiv(GLuint index, [GLuint] v) = glVertexAttrib4Nuiv()
#export vertexAttrib4Nusv(GLuint index, [GLushort] v) = glVertexAttrib4Nusv()
#export vertexAttrib4bv(GLuint index, [GLbyte] v) = glVertexAttrib4bv()
#export vertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = glVertexAttrib4d()
#export vertexAttrib4dv(GLuint index, [GLdouble] v) = glVertexAttrib4dv()
#export vertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = glVertexAttrib4f()
#export vertexAttrib4fv(GLuint index, [GLfloat] v) = glVertexAttrib4fv()
#export vertexAttrib4iv(GLuint index, [GLint] v) = glVertexAttrib4iv()
#export vertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) = glVertexAttrib4s()
#export vertexAttrib4sv(GLuint index, [GLshort] v) = glVertexAttrib4sv()
#export vertexAttrib4ubv(GLuint index, [GLubyte] v) = glVertexAttrib4ubv()
#export vertexAttrib4uiv(GLuint index, [GLuint] v) = glVertexAttrib4uiv()
#export vertexAttrib4usv(GLuint index, [GLushort] v) = glVertexAttrib4usv()
#export vertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, [] pointer) = glVertexAttribPointer()
#export uniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glUniformMatrix2x3fv()
#export uniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glUniformMatrix3x2fv()
#export uniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glUniformMatrix2x4fv()
#export uniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glUniformMatrix4x2fv()
#export uniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glUniformMatrix3x4fv()
#export uniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glUniformMatrix4x3fv()
#export colorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) = glColorMaski()
#export getBooleani_v(GLenum target, GLuint index, [GLboolean] data) = glGetBooleani_v()
#export getIntegeri_v(GLenum target, GLuint index, [GLint] data) = glGetIntegeri_v()
#export enablei(GLenum target, GLuint index) = glEnablei()
#export disablei(GLenum target, GLuint index) = glDisablei()
#export isEnabledi(GLenum target, GLuint index) => GLboolean = glIsEnabledi()
#export beginTransformFeedback(GLenum primitiveMode) = glBeginTransformFeedback()
#export endTransformFeedback() = glEndTransformFeedback()
#export bindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) = glBindBufferRange()
#export bindBufferBase(GLenum target, GLuint index, GLuint buffer) = glBindBufferBase()
#export transformFeedbackVaryings(GLuint program, GLsizei count, [[GLchar]] varyings, GLenum bufferMode) = glTransformFeedbackVaryings()
#export getTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, [GLsizei] length, [GLsizei] size, [GLenum] type, [GLchar] name) = glGetTransformFeedbackVarying()
#export clampColor(GLenum target, GLenum clamp) = glClampColor()
#export beginConditionalRender(GLuint id, GLenum mode) = glBeginConditionalRender()
#export endConditionalRender() = glEndConditionalRender()
#export vertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, [] pointer) = glVertexAttribIPointer()
#export getVertexAttribIiv(GLuint index, GLenum pname, [GLint] params) = glGetVertexAttribIiv()
#export getVertexAttribIuiv(GLuint index, GLenum pname, [GLuint] params) = glGetVertexAttribIuiv()
#export vertexAttribI1i(GLuint index, GLint x) = glVertexAttribI1i()
#export vertexAttribI2i(GLuint index, GLint x, GLint y) = glVertexAttribI2i()
#export vertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) = glVertexAttribI3i()
#export vertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) = glVertexAttribI4i()
#export vertexAttribI1ui(GLuint index, GLuint x) = glVertexAttribI1ui()
#export vertexAttribI2ui(GLuint index, GLuint x, GLuint y) = glVertexAttribI2ui()
#export vertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) = glVertexAttribI3ui()
#export vertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = glVertexAttribI4ui()
#export vertexAttribI1iv(GLuint index, [GLint] v) = glVertexAttribI1iv()
#export vertexAttribI2iv(GLuint index, [GLint] v) = glVertexAttribI2iv()
#export vertexAttribI3iv(GLuint index, [GLint] v) = glVertexAttribI3iv()
#export vertexAttribI4iv(GLuint index, [GLint] v) = glVertexAttribI4iv()
#export vertexAttribI1uiv(GLuint index, [GLuint] v) = glVertexAttribI1uiv()
#export vertexAttribI2uiv(GLuint index, [GLuint] v) = glVertexAttribI2uiv()
#export vertexAttribI3uiv(GLuint index, [GLuint] v) = glVertexAttribI3uiv()
#export vertexAttribI4uiv(GLuint index, [GLuint] v) = glVertexAttribI4uiv()
#export vertexAttribI4bv(GLuint index, [GLbyte] v) = glVertexAttribI4bv()
#export vertexAttribI4sv(GLuint index, [GLshort] v) = glVertexAttribI4sv()
#export vertexAttribI4ubv(GLuint index, [GLubyte] v) = glVertexAttribI4ubv()
#export vertexAttribI4usv(GLuint index, [GLushort] v) = glVertexAttribI4usv()
#export getUniformuiv(GLuint program, GLint location, [GLuint] params) = glGetUniformuiv()
#export bindFragDataLocation(GLuint program, GLuint color, [GLchar] name) = glBindFragDataLocation()
#export getFragDataLocation(GLuint program, [GLchar] name) => GLint = glGetFragDataLocation()
#export uniform1ui(GLint location, GLuint v0) = glUniform1ui()
#export uniform2ui(GLint location, GLuint v0, GLuint v1) = glUniform2ui()
#export uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) = glUniform3ui()
#export uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = glUniform4ui()
#export uniform1uiv(GLint location, GLsizei count, [GLuint] value) = glUniform1uiv()
#export uniform2uiv(GLint location, GLsizei count, [GLuint] value) = glUniform2uiv()
#export uniform3uiv(GLint location, GLsizei count, [GLuint] value) = glUniform3uiv()
#export uniform4uiv(GLint location, GLsizei count, [GLuint] value) = glUniform4uiv()
#export texParameterIiv(GLenum target, GLenum pname, [GLint] params) = glTexParameterIiv()
#export texParameterIuiv(GLenum target, GLenum pname, [GLuint] params) = glTexParameterIuiv()
#export getTexParameterIiv(GLenum target, GLenum pname, [GLint] params) = glGetTexParameterIiv()
#export getTexParameterIuiv(GLenum target, GLenum pname, [GLuint] params) = glGetTexParameterIuiv()
#export clearBufferiv(GLenum buffer, GLint drawbuffer, [GLint] value) = glClearBufferiv()
#export clearBufferuiv(GLenum buffer, GLint drawbuffer, [GLuint] value) = glClearBufferuiv()
#export clearBufferfv(GLenum buffer, GLint drawbuffer, [GLfloat] value) = glClearBufferfv()
#export clearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) = glClearBufferfi()
#export getStringi(GLenum name, GLuint index) => [GLubyte] = glGetStringi()
#export isRenderbuffer(GLuint renderbuffer) => GLboolean = glIsRenderbuffer()
#export bindRenderbuffer(GLenum target, GLuint renderbuffer) = glBindRenderbuffer()
#export deleteRenderbuffers(GLsizei n, [GLuint] renderbuffers) = glDeleteRenderbuffers()
#export genRenderbuffers(GLsizei n, [GLuint] renderbuffers) = glGenRenderbuffers()
#export renderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) = glRenderbufferStorage()
#export getRenderbufferParameteriv(GLenum target, GLenum pname, [GLint] params) = glGetRenderbufferParameteriv()
#export isFramebuffer(GLuint framebuffer) => GLboolean = glIsFramebuffer()
#export bindFramebuffer(GLenum target, GLuint framebuffer) = glBindFramebuffer()
#export deleteFramebuffers(GLsizei n, [GLuint] framebuffers) = glDeleteFramebuffers()
#export genFramebuffers(GLsizei n, [GLuint] framebuffers) = glGenFramebuffers()
#export checkFramebufferStatus(GLenum target) => GLenum = glCheckFramebufferStatus()
#export framebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = glFramebufferTexture1D()
#export framebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = glFramebufferTexture2D()
#export framebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) = glFramebufferTexture3D()
#export framebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = glFramebufferRenderbuffer()
#export getFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, [GLint] params) = glGetFramebufferAttachmentParameteriv()
#export generateMipmap(GLenum target) = glGenerateMipmap()
#export blitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = glBlitFramebuffer()
#export renderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = glRenderbufferStorageMultisample()
#export framebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) = glFramebufferTextureLayer()
#export mapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) => [] = glMapBufferRange()
#export flushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) = glFlushMappedBufferRange()
#export bindVertexArray(GLuint array) = glBindVertexArray()
#export deleteVertexArrays(GLsizei n, [GLuint] arrays) = glDeleteVertexArrays()
#export genVertexArrays(GLsizei n, [GLuint] arrays) = glGenVertexArrays()
#export isVertexArray(GLuint array) => GLboolean = glIsVertexArray()
#export drawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) = glDrawArraysInstanced()
#export drawElementsInstanced(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount) = glDrawElementsInstanced()
#export texBuffer(GLenum target, GLenum internalformat, GLuint buffer) = glTexBuffer()
#export primitiveRestartIndex(GLuint index) = glPrimitiveRestartIndex()
#export copyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = glCopyBufferSubData()
#export getUniformIndices(GLuint program, GLsizei uniformCount, [[GLchar]] uniformNames, [GLuint] uniformIndices) = glGetUniformIndices()
#export getActiveUniformsiv(GLuint program, GLsizei uniformCount, [GLuint] uniformIndices, GLenum pname, [GLint] params) = glGetActiveUniformsiv()
#export getActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, [GLsizei] length, [GLchar] uniformName) = glGetActiveUniformName()
#export getUniformBlockIndex(GLuint program, [GLchar] uniformBlockName) => GLuint = glGetUniformBlockIndex()
#export getActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, [GLint] params) = glGetActiveUniformBlockiv()
#export getActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, [GLsizei] length, [GLchar] uniformBlockName) = glGetActiveUniformBlockName()
#export uniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) = glUniformBlockBinding()
#export drawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, [] indices, GLint basevertex) = glDrawElementsBaseVertex()
#export drawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, [] indices, GLint basevertex) = glDrawRangeElementsBaseVertex()
#export drawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount, GLint basevertex) = glDrawElementsInstancedBaseVertex()
#export multiDrawElementsBaseVertex(GLenum mode, [GLsizei] count, GLenum type, [[]] indices, GLsizei drawcount, [GLint] basevertex) = glMultiDrawElementsBaseVertex()
#export provokingVertex(GLenum mode) = glProvokingVertex()
#export fenceSync(GLenum condition, GLbitfield flags) => GLsync = glFenceSync()
#export isSync(GLsync sync) => GLboolean = glIsSync()
#export deleteSync(GLsync sync) = glDeleteSync()
#export clientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) => GLenum = glClientWaitSync()
#export waitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) = glWaitSync()
#export getInteger64v(GLenum pname, [GLint64] data) = glGetInteger64v()
#export getSynciv(GLsync sync, GLenum pname, GLsizei count, [GLsizei] length, [GLint] values) = glGetSynciv()
#export getInteger64i_v(GLenum target, GLuint index, [GLint64] data) = glGetInteger64i_v()
#export getBufferParameteri64v(GLenum target, GLenum pname, [GLint64] params) = glGetBufferParameteri64v()
#export framebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) = glFramebufferTexture()
#export texImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = glTexImage2DMultisample()
#export texImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = glTexImage3DMultisample()
#export getMultisamplefv(GLenum pname, GLuint index, [GLfloat] val) = glGetMultisamplefv()
#export sampleMaski(GLuint maskNumber, GLbitfield mask) = glSampleMaski()
#export bindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, [GLchar] name) = glBindFragDataLocationIndexed()
#export getFragDataIndex(GLuint program, [GLchar] name) => GLint = glGetFragDataIndex()
#export genSamplers(GLsizei count, [GLuint] samplers) = glGenSamplers()
#export deleteSamplers(GLsizei count, [GLuint] samplers) = glDeleteSamplers()
#export isSampler(GLuint sampler) => GLboolean = glIsSampler()
#export bindSampler(GLuint unit, GLuint sampler) = glBindSampler()
#export samplerParameteri(GLuint sampler, GLenum pname, GLint param) = glSamplerParameteri()
#export samplerParameteriv(GLuint sampler, GLenum pname, [GLint] param) = glSamplerParameteriv()
#export samplerParameterf(GLuint sampler, GLenum pname, GLfloat param) = glSamplerParameterf()
#export samplerParameterfv(GLuint sampler, GLenum pname, [GLfloat] param) = glSamplerParameterfv()
#export samplerParameterIiv(GLuint sampler, GLenum pname, [GLint] param) = glSamplerParameterIiv()
#export samplerParameterIuiv(GLuint sampler, GLenum pname, [GLuint] param) = glSamplerParameterIuiv()
#export getSamplerParameteriv(GLuint sampler, GLenum pname, [GLint] params) = glGetSamplerParameteriv()
#export getSamplerParameterIiv(GLuint sampler, GLenum pname, [GLint] params) = glGetSamplerParameterIiv()
#export getSamplerParameterfv(GLuint sampler, GLenum pname, [GLfloat] params) = glGetSamplerParameterfv()
#export getSamplerParameterIuiv(GLuint sampler, GLenum pname, [GLuint] params) = glGetSamplerParameterIuiv()
#export queryCounter(GLuint id, GLenum target) = glQueryCounter()
#export getQueryObjecti64v(GLuint id, GLenum pname, [GLint64] params) = glGetQueryObjecti64v()
#export getQueryObjectui64v(GLuint id, GLenum pname, [GLuint64] params) = glGetQueryObjectui64v()
#export vertexAttribDivisor(GLuint index, GLuint divisor) = glVertexAttribDivisor()
#export vertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) = glVertexAttribP1ui()
#export vertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, [GLuint] value) = glVertexAttribP1uiv()
#export vertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) = glVertexAttribP2ui()
#export vertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, [GLuint] value) = glVertexAttribP2uiv()
#export vertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) = glVertexAttribP3ui()
#export vertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, [GLuint] value) = glVertexAttribP3uiv()
#export vertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) = glVertexAttribP4ui()
#export vertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, [GLuint] value) = glVertexAttribP4uiv()
#export minSampleShading(GLfloat value) = glMinSampleShading()
#export blendEquationi(GLuint buf, GLenum mode) = glBlendEquationi()
#export blendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) = glBlendEquationSeparatei()
#export blendFunci(GLuint buf, GLenum src, GLenum dst) = glBlendFunci()
#export blendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) = glBlendFuncSeparatei()
#export drawArraysIndirect(GLenum mode, [] indirect) = glDrawArraysIndirect()
#export drawElementsIndirect(GLenum mode, GLenum type, [] indirect) = glDrawElementsIndirect()
#export uniform1d(GLint location, GLdouble x) = glUniform1d()
#export uniform2d(GLint location, GLdouble x, GLdouble y) = glUniform2d()
#export uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) = glUniform3d()
#export uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = glUniform4d()
#export uniform1dv(GLint location, GLsizei count, [GLdouble] value) = glUniform1dv()
#export uniform2dv(GLint location, GLsizei count, [GLdouble] value) = glUniform2dv()
#export uniform3dv(GLint location, GLsizei count, [GLdouble] value) = glUniform3dv()
#export uniform4dv(GLint location, GLsizei count, [GLdouble] value) = glUniform4dv()
#export uniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glUniformMatrix2dv()
#export uniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glUniformMatrix3dv()
#export uniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glUniformMatrix4dv()
#export uniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glUniformMatrix2x3dv()
#export uniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glUniformMatrix2x4dv()
#export uniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glUniformMatrix3x2dv()
#export uniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glUniformMatrix3x4dv()
#export uniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glUniformMatrix4x2dv()
#export uniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glUniformMatrix4x3dv()
#export getUniformdv(GLuint program, GLint location, [GLdouble] params) = glGetUniformdv()
#export getSubroutineUniformLocation(GLuint program, GLenum shadertype, [GLchar] name) => GLint = glGetSubroutineUniformLocation()
#export getSubroutineIndex(GLuint program, GLenum shadertype, [GLchar] name) => GLuint = glGetSubroutineIndex()
#export getActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, [GLint] values) = glGetActiveSubroutineUniformiv()
#export getActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, [GLsizei] length, [GLchar] name) = glGetActiveSubroutineUniformName()
#export getActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, [GLsizei] length, [GLchar] name) = glGetActiveSubroutineName()
#export uniformSubroutinesuiv(GLenum shadertype, GLsizei count, [GLuint] indices) = glUniformSubroutinesuiv()
#export getUniformSubroutineuiv(GLenum shadertype, GLint location, [GLuint] params) = glGetUniformSubroutineuiv()
#export getProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, [GLint] values) = glGetProgramStageiv()
#export patchParameteri(GLenum pname, GLint value) = glPatchParameteri()
#export patchParameterfv(GLenum pname, [GLfloat] values) = glPatchParameterfv()
#export bindTransformFeedback(GLenum target, GLuint id) = glBindTransformFeedback()
#export deleteTransformFeedbacks(GLsizei n, [GLuint] ids) = glDeleteTransformFeedbacks()
#export genTransformFeedbacks(GLsizei n, [GLuint] ids) = glGenTransformFeedbacks()
#export isTransformFeedback(GLuint id) => GLboolean = glIsTransformFeedback()
#export pauseTransformFeedback() = glPauseTransformFeedback()
#export resumeTransformFeedback() = glResumeTransformFeedback()
#export drawTransformFeedback(GLenum mode, GLuint id) = glDrawTransformFeedback()
#export drawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) = glDrawTransformFeedbackStream()
#export beginQueryIndexed(GLenum target, GLuint index, GLuint id) = glBeginQueryIndexed()
#export endQueryIndexed(GLenum target, GLuint index) = glEndQueryIndexed()
#export getQueryIndexediv(GLenum target, GLuint index, GLenum pname, [GLint] params) = glGetQueryIndexediv()
#export releaseShaderCompiler() = glReleaseShaderCompiler()
#export shaderBinary(GLsizei count, [GLuint] shaders, GLenum binaryFormat, [] binary, GLsizei length) = glShaderBinary()
#export getShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, [GLint] range, [GLint] precision) = glGetShaderPrecisionFormat()
#export depthRangef(GLfloat n, GLfloat f) = glDepthRangef()
#export clearDepthf(GLfloat d) = glClearDepthf()
#export getProgramBinary(GLuint program, GLsizei bufSize, [GLsizei] length, [GLenum] binaryFormat, [] binary) = glGetProgramBinary()
#export programBinary(GLuint program, GLenum binaryFormat, [] binary, GLsizei length) = glProgramBinary()
#export programParameteri(GLuint program, GLenum pname, GLint value) = glProgramParameteri()
#export useProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) = glUseProgramStages()
#export activeShaderProgram(GLuint pipeline, GLuint program) = glActiveShaderProgram()
#export createShaderProgramv(GLenum type, GLsizei count, [[GLchar]] strings) => GLuint = glCreateShaderProgramv()
#export bindProgramPipeline(GLuint pipeline) = glBindProgramPipeline()
#export deleteProgramPipelines(GLsizei n, [GLuint] pipelines) = glDeleteProgramPipelines()
#export genProgramPipelines(GLsizei n, [GLuint] pipelines) = glGenProgramPipelines()
#export isProgramPipeline(GLuint pipeline) => GLboolean = glIsProgramPipeline()
#export getProgramPipelineiv(GLuint pipeline, GLenum pname, [GLint] params) = glGetProgramPipelineiv()
#export programUniform1i(GLuint program, GLint location, GLint v0) = glProgramUniform1i()
#export programUniform1iv(GLuint program, GLint location, GLsizei count, [GLint] value) = glProgramUniform1iv()
#export programUniform1f(GLuint program, GLint location, GLfloat v0) = glProgramUniform1f()
#export programUniform1fv(GLuint program, GLint location, GLsizei count, [GLfloat] value) = glProgramUniform1fv()
#export programUniform1d(GLuint program, GLint location, GLdouble v0) = glProgramUniform1d()
#export programUniform1dv(GLuint program, GLint location, GLsizei count, [GLdouble] value) = glProgramUniform1dv()
#export programUniform1ui(GLuint program, GLint location, GLuint v0) = glProgramUniform1ui()
#export programUniform1uiv(GLuint program, GLint location, GLsizei count, [GLuint] value) = glProgramUniform1uiv()
#export programUniform2i(GLuint program, GLint location, GLint v0, GLint v1) = glProgramUniform2i()
#export programUniform2iv(GLuint program, GLint location, GLsizei count, [GLint] value) = glProgramUniform2iv()
#export programUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) = glProgramUniform2f()
#export programUniform2fv(GLuint program, GLint location, GLsizei count, [GLfloat] value) = glProgramUniform2fv()
#export programUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) = glProgramUniform2d()
#export programUniform2dv(GLuint program, GLint location, GLsizei count, [GLdouble] value) = glProgramUniform2dv()
#export programUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) = glProgramUniform2ui()
#export programUniform2uiv(GLuint program, GLint location, GLsizei count, [GLuint] value) = glProgramUniform2uiv()
#export programUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) = glProgramUniform3i()
#export programUniform3iv(GLuint program, GLint location, GLsizei count, [GLint] value) = glProgramUniform3iv()
#export programUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = glProgramUniform3f()
#export programUniform3fv(GLuint program, GLint location, GLsizei count, [GLfloat] value) = glProgramUniform3fv()
#export programUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) = glProgramUniform3d()
#export programUniform3dv(GLuint program, GLint location, GLsizei count, [GLdouble] value) = glProgramUniform3dv()
#export programUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) = glProgramUniform3ui()
#export programUniform3uiv(GLuint program, GLint location, GLsizei count, [GLuint] value) = glProgramUniform3uiv()
#export programUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = glProgramUniform4i()
#export programUniform4iv(GLuint program, GLint location, GLsizei count, [GLint] value) = glProgramUniform4iv()
#export programUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = glProgramUniform4f()
#export programUniform4fv(GLuint program, GLint location, GLsizei count, [GLfloat] value) = glProgramUniform4fv()
#export programUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) = glProgramUniform4d()
#export programUniform4dv(GLuint program, GLint location, GLsizei count, [GLdouble] value) = glProgramUniform4dv()
#export programUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = glProgramUniform4ui()
#export programUniform4uiv(GLuint program, GLint location, GLsizei count, [GLuint] value) = glProgramUniform4uiv()
#export programUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix2fv()
#export programUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix3fv()
#export programUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix4fv()
#export programUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix2dv()
#export programUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix3dv()
#export programUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix4dv()
#export programUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix2x3fv()
#export programUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix3x2fv()
#export programUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix2x4fv()
#export programUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix4x2fv()
#export programUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix3x4fv()
#export programUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix4x3fv()
#export programUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix2x3dv()
#export programUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix3x2dv()
#export programUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix2x4dv()
#export programUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix4x2dv()
#export programUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix3x4dv()
#export programUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix4x3dv()
#export validateProgramPipeline(GLuint pipeline) = glValidateProgramPipeline()
#export getProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, [GLsizei] length, [GLchar] infoLog) = glGetProgramPipelineInfoLog()
#export vertexAttribL1d(GLuint index, GLdouble x) = glVertexAttribL1d()
#export vertexAttribL2d(GLuint index, GLdouble x, GLdouble y) = glVertexAttribL2d()
#export vertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) = glVertexAttribL3d()
#export vertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = glVertexAttribL4d()
#export vertexAttribL1dv(GLuint index, [GLdouble] v) = glVertexAttribL1dv()
#export vertexAttribL2dv(GLuint index, [GLdouble] v) = glVertexAttribL2dv()
#export vertexAttribL3dv(GLuint index, [GLdouble] v) = glVertexAttribL3dv()
#export vertexAttribL4dv(GLuint index, [GLdouble] v) = glVertexAttribL4dv()
#export vertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, [] pointer) = glVertexAttribLPointer()
#export getVertexAttribLdv(GLuint index, GLenum pname, [GLdouble] params) = glGetVertexAttribLdv()
#export viewportArrayv(GLuint first, GLsizei count, [GLfloat] v) = glViewportArrayv()
#export viewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) = glViewportIndexedf()
#export viewportIndexedfv(GLuint index, [GLfloat] v) = glViewportIndexedfv()
#export scissorArrayv(GLuint first, GLsizei count, [GLint] v) = glScissorArrayv()
#export scissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) = glScissorIndexed()
#export scissorIndexedv(GLuint index, [GLint] v) = glScissorIndexedv()
#export depthRangeArrayv(GLuint first, GLsizei count, [GLdouble] v) = glDepthRangeArrayv()
#export depthRangeIndexed(GLuint index, GLdouble n, GLdouble f) = glDepthRangeIndexed()
#export getFloati_v(GLenum target, GLuint index, [GLfloat] data) = glGetFloati_v()
#export getDoublei_v(GLenum target, GLuint index, [GLdouble] data) = glGetDoublei_v()
#export drawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) = glDrawArraysInstancedBaseInstance()
#export drawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount, GLuint baseinstance) = glDrawElementsInstancedBaseInstance()
#export drawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) = glDrawElementsInstancedBaseVertexBaseInstance()
#export getInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, [GLint] params) = glGetInternalformativ()
#export getActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, [GLint] params) = glGetActiveAtomicCounterBufferiv()
#export bindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) = glBindImageTexture()
#export memoryBarrier(GLbitfield barriers) = glMemoryBarrier()
#export texStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) = glTexStorage1D()
#export texStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) = glTexStorage2D()
#export texStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) = glTexStorage3D()
#export drawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) = glDrawTransformFeedbackInstanced()
#export drawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) = glDrawTransformFeedbackStreamInstanced()
#export clearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, [] data) = glClearBufferData()
#export clearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, [] data) = glClearBufferSubData()
#export dispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) = glDispatchCompute()
#export dispatchComputeIndirect(GLintptr indirect) = glDispatchComputeIndirect()
#export copyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) = glCopyImageSubData()
#export framebufferParameteri(GLenum target, GLenum pname, GLint param) = glFramebufferParameteri()
#export getFramebufferParameteriv(GLenum target, GLenum pname, [GLint] params) = glGetFramebufferParameteriv()
#export getInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, [GLint64] params) = glGetInternalformati64v()
#export invalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) = glInvalidateTexSubImage()
#export invalidateTexImage(GLuint texture, GLint level) = glInvalidateTexImage()
#export invalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) = glInvalidateBufferSubData()
#export invalidateBufferData(GLuint buffer) = glInvalidateBufferData()
#export invalidateFramebuffer(GLenum target, GLsizei numAttachments, [GLenum] attachments) = glInvalidateFramebuffer()
#export invalidateSubFramebuffer(GLenum target, GLsizei numAttachments, [GLenum] attachments, GLint x, GLint y, GLsizei width, GLsizei height) = glInvalidateSubFramebuffer()
#export multiDrawArraysIndirect(GLenum mode, [] indirect, GLsizei drawcount, GLsizei stride) = glMultiDrawArraysIndirect()
#export multiDrawElementsIndirect(GLenum mode, GLenum type, [] indirect, GLsizei drawcount, GLsizei stride) = glMultiDrawElementsIndirect()
#export getProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, [GLint] params) = glGetProgramInterfaceiv()
#export getProgramResourceIndex(GLuint program, GLenum programInterface, [GLchar] name) => GLuint = glGetProgramResourceIndex()
#export getProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, [GLsizei] length, [GLchar] name) = glGetProgramResourceName()
#export getProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, [GLenum] props, GLsizei count, [GLsizei] length, [GLint] params) = glGetProgramResourceiv()
#export getProgramResourceLocation(GLuint program, GLenum programInterface, [GLchar] name) => GLint = glGetProgramResourceLocation()
#export getProgramResourceLocationIndex(GLuint program, GLenum programInterface, [GLchar] name) => GLint = glGetProgramResourceLocationIndex()
#export shaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) = glShaderStorageBlockBinding()
#export texBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) = glTexBufferRange()
#export texStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = glTexStorage2DMultisample()
#export texStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = glTexStorage3DMultisample()
#export textureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) = glTextureView()
#export bindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) = glBindVertexBuffer()
#export vertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) = glVertexAttribFormat()
#export vertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = glVertexAttribIFormat()
#export vertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = glVertexAttribLFormat()
#export vertexAttribBinding(GLuint attribindex, GLuint bindingindex) = glVertexAttribBinding()
#export vertexBindingDivisor(GLuint bindingindex, GLuint divisor) = glVertexBindingDivisor()
#export debugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, [GLuint] ids, GLboolean enabled) = glDebugMessageControl()
#export debugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, [GLchar] buf) = glDebugMessageInsert()
#export debugMessageCallback(GLDEBUGPROC callback, [] userParam) = glDebugMessageCallback()
#export getDebugMessageLog(GLuint count, GLsizei bufSize, [GLenum] sources, [GLenum] types, [GLuint] ids, [GLenum] severities, [GLsizei] lengths, [GLchar] messageLog) => GLuint = glGetDebugMessageLog()
#export pushDebugGroup(GLenum source, GLuint id, GLsizei length, [GLchar] message) = glPushDebugGroup()
#export popDebugGroup() = glPopDebugGroup()
#export objectLabel(GLenum identifier, GLuint name, GLsizei length, [GLchar] label) = glObjectLabel()
#export getObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, [GLsizei] length, [GLchar] label) = glGetObjectLabel()
#export objectPtrLabel([] ptr, GLsizei length, [GLchar] label) = glObjectPtrLabel()
#export getObjectPtrLabel([] ptr, GLsizei bufSize, [GLsizei] length, [GLchar] label) = glGetObjectPtrLabel()
#export bufferStorage(GLenum target, GLsizeiptr size, [] data, GLbitfield flags) = glBufferStorage()
#export clearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, [] data) = glClearTexImage()
#export clearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] data) = glClearTexSubImage()
#export bindBuffersBase(GLenum target, GLuint first, GLsizei count, [GLuint] buffers) = glBindBuffersBase()
#export bindBuffersRange(GLenum target, GLuint first, GLsizei count, [GLuint] buffers, [GLintptr] offsets, [GLsizeiptr] sizes) = glBindBuffersRange()
#export bindTextures(GLuint first, GLsizei count, [GLuint] textures) = glBindTextures()
#export bindSamplers(GLuint first, GLsizei count, [GLuint] samplers) = glBindSamplers()
#export bindImageTextures(GLuint first, GLsizei count, [GLuint] textures) = glBindImageTextures()
#export bindVertexBuffers(GLuint first, GLsizei count, [GLuint] buffers, [GLintptr] offsets, [GLsizei] strides) = glBindVertexBuffers()
#export clipControl(GLenum origin, GLenum depth) = glClipControl()
#export createTransformFeedbacks(GLsizei n, [GLuint] ids) = glCreateTransformFeedbacks()
#export transformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) = glTransformFeedbackBufferBase()
#export transformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) = glTransformFeedbackBufferRange()
#export getTransformFeedbackiv(GLuint xfb, GLenum pname, [GLint] param) = glGetTransformFeedbackiv()
#export getTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, [GLint] param) = glGetTransformFeedbacki_v()
#export getTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, [GLint64] param) = glGetTransformFeedbacki64_v()
#export createBuffers(GLsizei n, [GLuint] buffers) = glCreateBuffers()
#export namedBufferStorage(GLuint buffer, GLsizeiptr size, [] data, GLbitfield flags) = glNamedBufferStorage()
#export namedBufferData(GLuint buffer, GLsizeiptr size, [] data, GLenum usage) = glNamedBufferData()
#export namedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data) = glNamedBufferSubData()
#export copyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = glCopyNamedBufferSubData()
#export clearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, [] data) = glClearNamedBufferData()
#export clearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, [] data) = glClearNamedBufferSubData()
#export mapNamedBuffer(GLuint buffer, GLenum access) => [] = glMapNamedBuffer()
#export mapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) => [] = glMapNamedBufferRange()
#export unmapNamedBuffer(GLuint buffer) => GLboolean = glUnmapNamedBuffer()
#export flushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) = glFlushMappedNamedBufferRange()
#export getNamedBufferParameteriv(GLuint buffer, GLenum pname, [GLint] params) = glGetNamedBufferParameteriv()
#export getNamedBufferParameteri64v(GLuint buffer, GLenum pname, [GLint64] params) = glGetNamedBufferParameteri64v()
#export getNamedBufferPointerv(GLuint buffer, GLenum pname, [[]] params) = glGetNamedBufferPointerv()
#export getNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data) = glGetNamedBufferSubData()
#export createFramebuffers(GLsizei n, [GLuint] framebuffers) = glCreateFramebuffers()
#export namedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = glNamedFramebufferRenderbuffer()
#export namedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) = glNamedFramebufferParameteri()
#export namedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) = glNamedFramebufferTexture()
#export namedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) = glNamedFramebufferTextureLayer()
#export namedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) = glNamedFramebufferDrawBuffer()
#export namedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, [GLenum] bufs) = glNamedFramebufferDrawBuffers()
#export namedFramebufferReadBuffer(GLuint framebuffer, GLenum src) = glNamedFramebufferReadBuffer()
#export invalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, [GLenum] attachments) = glInvalidateNamedFramebufferData()
#export invalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, [GLenum] attachments, GLint x, GLint y, GLsizei width, GLsizei height) = glInvalidateNamedFramebufferSubData()
#export clearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, [GLint] value) = glClearNamedFramebufferiv()
#export clearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, [GLuint] value) = glClearNamedFramebufferuiv()
#export clearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, [GLfloat] value) = glClearNamedFramebufferfv()
#export clearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) = glClearNamedFramebufferfi()
#export blitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = glBlitNamedFramebuffer()
#export checkNamedFramebufferStatus(GLuint framebuffer, GLenum target) => GLenum = glCheckNamedFramebufferStatus()
#export getNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, [GLint] param) = glGetNamedFramebufferParameteriv()
#export getNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, [GLint] params) = glGetNamedFramebufferAttachmentParameteriv()
#export createRenderbuffers(GLsizei n, [GLuint] renderbuffers) = glCreateRenderbuffers()
#export namedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) = glNamedRenderbufferStorage()
#export namedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = glNamedRenderbufferStorageMultisample()
#export getNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, [GLint] params) = glGetNamedRenderbufferParameteriv()
#export createTextures(GLenum target, GLsizei n, [GLuint] textures) = glCreateTextures()
#export textureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) = glTextureBuffer()
#export textureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) = glTextureBufferRange()
#export textureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) = glTextureStorage1D()
#export textureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) = glTextureStorage2D()
#export textureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) = glTextureStorage3D()
#export textureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = glTextureStorage2DMultisample()
#export textureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = glTextureStorage3DMultisample()
#export textureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels) = glTextureSubImage1D()
#export textureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels) = glTextureSubImage2D()
#export textureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels) = glTextureSubImage3D()
#export compressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] data) = glCompressedTextureSubImage1D()
#export compressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] data) = glCompressedTextureSubImage2D()
#export compressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] data) = glCompressedTextureSubImage3D()
#export copyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = glCopyTextureSubImage1D()
#export copyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = glCopyTextureSubImage2D()
#export copyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = glCopyTextureSubImage3D()
#export textureParameterf(GLuint texture, GLenum pname, GLfloat param) = glTextureParameterf()
#export textureParameterfv(GLuint texture, GLenum pname, [GLfloat] param) = glTextureParameterfv()
#export textureParameteri(GLuint texture, GLenum pname, GLint param) = glTextureParameteri()
#export textureParameterIiv(GLuint texture, GLenum pname, [GLint] params) = glTextureParameterIiv()
#export textureParameterIuiv(GLuint texture, GLenum pname, [GLuint] params) = glTextureParameterIuiv()
#export textureParameteriv(GLuint texture, GLenum pname, [GLint] param) = glTextureParameteriv()
#export generateTextureMipmap(GLuint texture) = glGenerateTextureMipmap()
#export bindTextureUnit(GLuint unit, GLuint texture) = glBindTextureUnit()
#export getTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, [] pixels) = glGetTextureImage()
#export getCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, [] pixels) = glGetCompressedTextureImage()
#export getTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, [GLfloat] params) = glGetTextureLevelParameterfv()
#export getTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, [GLint] params) = glGetTextureLevelParameteriv()
#export getTextureParameterfv(GLuint texture, GLenum pname, [GLfloat] params) = glGetTextureParameterfv()
#export getTextureParameterIiv(GLuint texture, GLenum pname, [GLint] params) = glGetTextureParameterIiv()
#export getTextureParameterIuiv(GLuint texture, GLenum pname, [GLuint] params) = glGetTextureParameterIuiv()
#export getTextureParameteriv(GLuint texture, GLenum pname, [GLint] params) = glGetTextureParameteriv()
#export createVertexArrays(GLsizei n, [GLuint] arrays) = glCreateVertexArrays()
#export disableVertexArrayAttrib(GLuint vaobj, GLuint index) = glDisableVertexArrayAttrib()
#export enableVertexArrayAttrib(GLuint vaobj, GLuint index) = glEnableVertexArrayAttrib()
#export vertexArrayElementBuffer(GLuint vaobj, GLuint buffer) = glVertexArrayElementBuffer()
#export vertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) = glVertexArrayVertexBuffer()
#export vertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, [GLuint] buffers, [GLintptr] offsets, [GLsizei] strides) = glVertexArrayVertexBuffers()
#export vertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) = glVertexArrayAttribBinding()
#export vertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) = glVertexArrayAttribFormat()
#export vertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = glVertexArrayAttribIFormat()
#export vertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = glVertexArrayAttribLFormat()
#export vertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) = glVertexArrayBindingDivisor()
#export getVertexArrayiv(GLuint vaobj, GLenum pname, [GLint] param) = glGetVertexArrayiv()
#export getVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, [GLint] param) = glGetVertexArrayIndexediv()
#export getVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, [GLint64] param) = glGetVertexArrayIndexed64iv()
#export createSamplers(GLsizei n, [GLuint] samplers) = glCreateSamplers()
#export createProgramPipelines(GLsizei n, [GLuint] pipelines) = glCreateProgramPipelines()
#export createQueries(GLenum target, GLsizei n, [GLuint] ids) = glCreateQueries()
#export getQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = glGetQueryBufferObjecti64v()
#export getQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = glGetQueryBufferObjectiv()
#export getQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = glGetQueryBufferObjectui64v()
#export getQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = glGetQueryBufferObjectuiv()
#export memoryBarrierByRegion(GLbitfield barriers) = glMemoryBarrierByRegion()
#export getTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, [] pixels) = glGetTextureSubImage()
#export getCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, [] pixels) = glGetCompressedTextureSubImage()
#export getGraphicsResetStatus() => GLenum = glGetGraphicsResetStatus()
#export getnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, [] pixels) = glGetnCompressedTexImage()
#export getnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, [] pixels) = glGetnTexImage()
#export getnUniformdv(GLuint program, GLint location, GLsizei bufSize, [GLdouble] params) = glGetnUniformdv()
#export getnUniformfv(GLuint program, GLint location, GLsizei bufSize, [GLfloat] params) = glGetnUniformfv()
#export getnUniformiv(GLuint program, GLint location, GLsizei bufSize, [GLint] params) = glGetnUniformiv()
#export getnUniformuiv(GLuint program, GLint location, GLsizei bufSize, [GLuint] params) = glGetnUniformuiv()
#export readnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, [] data) = glReadnPixels()
#export textureBarrier() = glTextureBarrier()
#export specializeShader(GLuint shader, [GLchar] pEntryPoint, GLuint numSpecializationConstants, [GLuint] pConstantIndex, [GLuint] pConstantValue) = glSpecializeShader()
#export multiDrawArraysIndirectCount(GLenum mode, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = glMultiDrawArraysIndirectCount()
#export multiDrawElementsIndirectCount(GLenum mode, GLenum type, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = glMultiDrawElementsIndirectCount()
#export polygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) = glPolygonOffsetClamp()
#export primitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) = glPrimitiveBoundingBoxARB()
#export getTextureHandleARB(GLuint texture) => GLuint64 = glGetTextureHandleARB()
#export getTextureSamplerHandleARB(GLuint texture, GLuint sampler) => GLuint64 = glGetTextureSamplerHandleARB()
#export makeTextureHandleResidentARB(GLuint64 handle) = glMakeTextureHandleResidentARB()
#export makeTextureHandleNonResidentARB(GLuint64 handle) = glMakeTextureHandleNonResidentARB()
#export getImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) => GLuint64 = glGetImageHandleARB()
#export makeImageHandleResidentARB(GLuint64 handle, GLenum access) = glMakeImageHandleResidentARB()
#export makeImageHandleNonResidentARB(GLuint64 handle) = glMakeImageHandleNonResidentARB()
#export uniformHandleui64ARB(GLint location, GLuint64 value) = glUniformHandleui64ARB()
#export uniformHandleui64vARB(GLint location, GLsizei count, [GLuint64] value) = glUniformHandleui64vARB()
#export programUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) = glProgramUniformHandleui64ARB()
#export programUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] values) = glProgramUniformHandleui64vARB()
#export isTextureHandleResidentARB(GLuint64 handle) => GLboolean = glIsTextureHandleResidentARB()
#export isImageHandleResidentARB(GLuint64 handle) => GLboolean = glIsImageHandleResidentARB()
#export vertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) = glVertexAttribL1ui64ARB()
#export vertexAttribL1ui64vARB(GLuint index, [GLuint64EXT] v) = glVertexAttribL1ui64vARB()
#export getVertexAttribLui64vARB(GLuint index, GLenum pname, [GLuint64EXT] params) = glGetVertexAttribLui64vARB()
#export createSyncFromCLeventARB([_cl_context] context, [_cl_event] event, GLbitfield flags) => GLsync = glCreateSyncFromCLeventARB()
#export dispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) = glDispatchComputeGroupSizeARB()
#export debugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, [GLuint] ids, GLboolean enabled) = glDebugMessageControlARB()
#export debugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, [GLchar] buf) = glDebugMessageInsertARB()
#export debugMessageCallbackARB(GLDEBUGPROCARB callback, [] userParam) = glDebugMessageCallbackARB()
#export getDebugMessageLogARB(GLuint count, GLsizei bufSize, [GLenum] sources, [GLenum] types, [GLuint] ids, [GLenum] severities, [GLsizei] lengths, [GLchar] messageLog) => GLuint = glGetDebugMessageLogARB()
#export blendEquationiARB(GLuint buf, GLenum mode) = glBlendEquationiARB()
#export blendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) = glBlendEquationSeparateiARB()
#export blendFunciARB(GLuint buf, GLenum src, GLenum dst) = glBlendFunciARB()
#export blendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) = glBlendFuncSeparateiARB()
#export drawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) = glDrawArraysInstancedARB()
#export drawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei primcount) = glDrawElementsInstancedARB()
#export programParameteriARB(GLuint program, GLenum pname, GLint value) = glProgramParameteriARB()
#export framebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) = glFramebufferTextureARB()
#export framebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) = glFramebufferTextureLayerARB()
#export framebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) = glFramebufferTextureFaceARB()
#export specializeShaderARB(GLuint shader, [GLchar] pEntryPoint, GLuint numSpecializationConstants, [GLuint] pConstantIndex, [GLuint] pConstantValue) = glSpecializeShaderARB()
#export uniform1i64ARB(GLint location, GLint64 x) = glUniform1i64ARB()
#export uniform2i64ARB(GLint location, GLint64 x, GLint64 y) = glUniform2i64ARB()
#export uniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) = glUniform3i64ARB()
#export uniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) = glUniform4i64ARB()
#export uniform1i64vARB(GLint location, GLsizei count, [GLint64] value) = glUniform1i64vARB()
#export uniform2i64vARB(GLint location, GLsizei count, [GLint64] value) = glUniform2i64vARB()
#export uniform3i64vARB(GLint location, GLsizei count, [GLint64] value) = glUniform3i64vARB()
#export uniform4i64vARB(GLint location, GLsizei count, [GLint64] value) = glUniform4i64vARB()
#export uniform1ui64ARB(GLint location, GLuint64 x) = glUniform1ui64ARB()
#export uniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) = glUniform2ui64ARB()
#export uniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) = glUniform3ui64ARB()
#export uniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) = glUniform4ui64ARB()
#export uniform1ui64vARB(GLint location, GLsizei count, [GLuint64] value) = glUniform1ui64vARB()
#export uniform2ui64vARB(GLint location, GLsizei count, [GLuint64] value) = glUniform2ui64vARB()
#export uniform3ui64vARB(GLint location, GLsizei count, [GLuint64] value) = glUniform3ui64vARB()
#export uniform4ui64vARB(GLint location, GLsizei count, [GLuint64] value) = glUniform4ui64vARB()
#export getUniformi64vARB(GLuint program, GLint location, [GLint64] params) = glGetUniformi64vARB()
#export getUniformui64vARB(GLuint program, GLint location, [GLuint64] params) = glGetUniformui64vARB()
#export getnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, [GLint64] params) = glGetnUniformi64vARB()
#export getnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, [GLuint64] params) = glGetnUniformui64vARB()
#export programUniform1i64ARB(GLuint program, GLint location, GLint64 x) = glProgramUniform1i64ARB()
#export programUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) = glProgramUniform2i64ARB()
#export programUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) = glProgramUniform3i64ARB()
#export programUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) = glProgramUniform4i64ARB()
#export programUniform1i64vARB(GLuint program, GLint location, GLsizei count, [GLint64] value) = glProgramUniform1i64vARB()
#export programUniform2i64vARB(GLuint program, GLint location, GLsizei count, [GLint64] value) = glProgramUniform2i64vARB()
#export programUniform3i64vARB(GLuint program, GLint location, GLsizei count, [GLint64] value) = glProgramUniform3i64vARB()
#export programUniform4i64vARB(GLuint program, GLint location, GLsizei count, [GLint64] value) = glProgramUniform4i64vARB()
#export programUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) = glProgramUniform1ui64ARB()
#export programUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) = glProgramUniform2ui64ARB()
#export programUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) = glProgramUniform3ui64ARB()
#export programUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) = glProgramUniform4ui64ARB()
#export programUniform1ui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] value) = glProgramUniform1ui64vARB()
#export programUniform2ui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] value) = glProgramUniform2ui64vARB()
#export programUniform3ui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] value) = glProgramUniform3ui64vARB()
#export programUniform4ui64vARB(GLuint program, GLint location, GLsizei count, [GLuint64] value) = glProgramUniform4ui64vARB()
#export multiDrawArraysIndirectCountARB(GLenum mode, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = glMultiDrawArraysIndirectCountARB()
#export multiDrawElementsIndirectCountARB(GLenum mode, GLenum type, [] indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = glMultiDrawElementsIndirectCountARB()
#export vertexAttribDivisorARB(GLuint index, GLuint divisor) = glVertexAttribDivisorARB()
#export maxShaderCompilerThreadsARB(GLuint count) = glMaxShaderCompilerThreadsARB()
#export getGraphicsResetStatusARB() => GLenum = glGetGraphicsResetStatusARB()
#export getnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, [] img) = glGetnTexImageARB()
#export readnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, [] data) = glReadnPixelsARB()
#export getnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, [] img) = glGetnCompressedTexImageARB()
#export getnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, [GLfloat] params) = glGetnUniformfvARB()
#export getnUniformivARB(GLuint program, GLint location, GLsizei bufSize, [GLint] params) = glGetnUniformivARB()
#export getnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, [GLuint] params) = glGetnUniformuivARB()
#export getnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, [GLdouble] params) = glGetnUniformdvARB()
#export framebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, [GLfloat] v) = glFramebufferSampleLocationsfvARB()
#export namedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, [GLfloat] v) = glNamedFramebufferSampleLocationsfvARB()
#export evaluateDepthValuesARB() = glEvaluateDepthValuesARB()
#export minSampleShadingARB(GLfloat value) = glMinSampleShadingARB()
#export namedStringARB(GLenum type, GLint namelen, [GLchar] name, GLint stringlen, [GLchar] string) = glNamedStringARB()
#export deleteNamedStringARB(GLint namelen, [GLchar] name) = glDeleteNamedStringARB()
#export compileShaderIncludeARB(GLuint shader, GLsizei count, [[GLchar]] path, [GLint] length) = glCompileShaderIncludeARB()
#export isNamedStringARB(GLint namelen, [GLchar] name) => GLboolean = glIsNamedStringARB()
#export getNamedStringARB(GLint namelen, [GLchar] name, GLsizei bufSize, [GLint] stringlen, [GLchar] string) = glGetNamedStringARB()
#export getNamedStringivARB(GLint namelen, [GLchar] name, GLenum pname, [GLint] params) = glGetNamedStringivARB()
#export bufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) = glBufferPageCommitmentARB()
#export namedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) = glNamedBufferPageCommitmentEXT()
#export namedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) = glNamedBufferPageCommitmentARB()
#export texPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) = glTexPageCommitmentARB()
#export texBufferARB(GLenum target, GLenum internalformat, GLuint buffer) = glTexBufferARB()
#export depthRangeArraydvNV(GLuint first, GLsizei count, [GLdouble] v) = glDepthRangeArraydvNV()
#export depthRangeIndexeddNV(GLuint index, GLdouble n, GLdouble f) = glDepthRangeIndexeddNV()
#export blendBarrierKHR() = glBlendBarrierKHR()
#export maxShaderCompilerThreadsKHR(GLuint count) = glMaxShaderCompilerThreadsKHR()
#export renderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) = glRenderbufferStorageMultisampleAdvancedAMD()
#export namedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) = glNamedRenderbufferStorageMultisampleAdvancedAMD()
#export getPerfMonitorGroupsAMD([GLint] numGroups, GLsizei groupsSize, [GLuint] groups) = glGetPerfMonitorGroupsAMD()
#export getPerfMonitorCountersAMD(GLuint group, [GLint] numCounters, [GLint] maxActiveCounters, GLsizei counterSize, [GLuint] counters) = glGetPerfMonitorCountersAMD()
#export getPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, [GLsizei] length, [GLchar] groupString) = glGetPerfMonitorGroupStringAMD()
#export getPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, [GLsizei] length, [GLchar] counterString) = glGetPerfMonitorCounterStringAMD()
#export getPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, [] data) = glGetPerfMonitorCounterInfoAMD()
#export genPerfMonitorsAMD(GLsizei n, [GLuint] monitors) = glGenPerfMonitorsAMD()
#export deletePerfMonitorsAMD(GLsizei n, [GLuint] monitors) = glDeletePerfMonitorsAMD()
#export selectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, [GLuint] counterList) = glSelectPerfMonitorCountersAMD()
#export beginPerfMonitorAMD(GLuint monitor) = glBeginPerfMonitorAMD()
#export endPerfMonitorAMD(GLuint monitor) = glEndPerfMonitorAMD()
#export getPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, [GLuint] data, [GLint] bytesWritten) = glGetPerfMonitorCounterDataAMD()
#export eGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, [GLint] attrib_list) = glEGLImageTargetTexStorageEXT()
#export eGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, [GLint] attrib_list) = glEGLImageTargetTextureStorageEXT()
#export labelObjectEXT(GLenum type, GLuint object, GLsizei length, [GLchar] label) = glLabelObjectEXT()
#export getObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, [GLsizei] length, [GLchar] label) = glGetObjectLabelEXT()
#export insertEventMarkerEXT(GLsizei length, [GLchar] marker) = glInsertEventMarkerEXT()
#export pushGroupMarkerEXT(GLsizei length, [GLchar] marker) = glPushGroupMarkerEXT()
#export popGroupMarkerEXT() = glPopGroupMarkerEXT()
#export matrixLoadfEXT(GLenum mode, [GLfloat] m) = glMatrixLoadfEXT()
#export matrixLoaddEXT(GLenum mode, [GLdouble] m) = glMatrixLoaddEXT()
#export matrixMultfEXT(GLenum mode, [GLfloat] m) = glMatrixMultfEXT()
#export matrixMultdEXT(GLenum mode, [GLdouble] m) = glMatrixMultdEXT()
#export matrixLoadIdentityEXT(GLenum mode) = glMatrixLoadIdentityEXT()
#export matrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) = glMatrixRotatefEXT()
#export matrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) = glMatrixRotatedEXT()
#export matrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) = glMatrixScalefEXT()
#export matrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) = glMatrixScaledEXT()
#export matrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) = glMatrixTranslatefEXT()
#export matrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) = glMatrixTranslatedEXT()
#export matrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = glMatrixFrustumEXT()
#export matrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = glMatrixOrthoEXT()
#export matrixPopEXT(GLenum mode) = glMatrixPopEXT()
#export matrixPushEXT(GLenum mode) = glMatrixPushEXT()
#export clientAttribDefaultEXT(GLbitfield mask) = glClientAttribDefaultEXT()
#export pushClientAttribDefaultEXT(GLbitfield mask) = glPushClientAttribDefaultEXT()
#export textureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) = glTextureParameterfEXT()
#export textureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, [GLfloat] params) = glTextureParameterfvEXT()
#export textureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) = glTextureParameteriEXT()
#export textureParameterivEXT(GLuint texture, GLenum target, GLenum pname, [GLint] params) = glTextureParameterivEXT()
#export textureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, [] pixels) = glTextureImage1DEXT()
#export textureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [] pixels) = glTextureImage2DEXT()
#export textureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels) = glTextureSubImage1DEXT()
#export textureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels) = glTextureSubImage2DEXT()
#export copyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = glCopyTextureImage1DEXT()
#export copyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = glCopyTextureImage2DEXT()
#export copyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = glCopyTextureSubImage1DEXT()
#export copyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = glCopyTextureSubImage2DEXT()
#export getTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, [] pixels) = glGetTextureImageEXT()
#export getTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, [GLfloat] params) = glGetTextureParameterfvEXT()
#export getTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, [GLint] params) = glGetTextureParameterivEXT()
#export getTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, [GLfloat] params) = glGetTextureLevelParameterfvEXT()
#export getTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, [GLint] params) = glGetTextureLevelParameterivEXT()
#export textureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [] pixels) = glTextureImage3DEXT()
#export textureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels) = glTextureSubImage3DEXT()
#export copyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = glCopyTextureSubImage3DEXT()
#export bindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) = glBindMultiTextureEXT()
#export multiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, [] pointer) = glMultiTexCoordPointerEXT()
#export multiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) = glMultiTexEnvfEXT()
#export multiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params) = glMultiTexEnvfvEXT()
#export multiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) = glMultiTexEnviEXT()
#export multiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params) = glMultiTexEnvivEXT()
#export multiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) = glMultiTexGendEXT()
#export multiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, [GLdouble] params) = glMultiTexGendvEXT()
#export multiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) = glMultiTexGenfEXT()
#export multiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, [GLfloat] params) = glMultiTexGenfvEXT()
#export multiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) = glMultiTexGeniEXT()
#export multiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, [GLint] params) = glMultiTexGenivEXT()
#export getMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params) = glGetMultiTexEnvfvEXT()
#export getMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params) = glGetMultiTexEnvivEXT()
#export getMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, [GLdouble] params) = glGetMultiTexGendvEXT()
#export getMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, [GLfloat] params) = glGetMultiTexGenfvEXT()
#export getMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, [GLint] params) = glGetMultiTexGenivEXT()
#export multiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) = glMultiTexParameteriEXT()
#export multiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params) = glMultiTexParameterivEXT()
#export multiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) = glMultiTexParameterfEXT()
#export multiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params) = glMultiTexParameterfvEXT()
#export multiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, [] pixels) = glMultiTexImage1DEXT()
#export multiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [] pixels) = glMultiTexImage2DEXT()
#export multiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, [] pixels) = glMultiTexSubImage1DEXT()
#export multiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [] pixels) = glMultiTexSubImage2DEXT()
#export copyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = glCopyMultiTexImage1DEXT()
#export copyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = glCopyMultiTexImage2DEXT()
#export copyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = glCopyMultiTexSubImage1DEXT()
#export copyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = glCopyMultiTexSubImage2DEXT()
#export getMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, [] pixels) = glGetMultiTexImageEXT()
#export getMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, [GLfloat] params) = glGetMultiTexParameterfvEXT()
#export getMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params) = glGetMultiTexParameterivEXT()
#export getMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, [GLfloat] params) = glGetMultiTexLevelParameterfvEXT()
#export getMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, [GLint] params) = glGetMultiTexLevelParameterivEXT()
#export multiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [] pixels) = glMultiTexImage3DEXT()
#export multiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [] pixels) = glMultiTexSubImage3DEXT()
#export copyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = glCopyMultiTexSubImage3DEXT()
#export enableClientStateIndexedEXT(GLenum array, GLuint index) = glEnableClientStateIndexedEXT()
#export disableClientStateIndexedEXT(GLenum array, GLuint index) = glDisableClientStateIndexedEXT()
#export getFloatIndexedvEXT(GLenum target, GLuint index, [GLfloat] data) = glGetFloatIndexedvEXT()
#export getDoubleIndexedvEXT(GLenum target, GLuint index, [GLdouble] data) = glGetDoubleIndexedvEXT()
#export getPointerIndexedvEXT(GLenum target, GLuint index, [[]] data) = glGetPointerIndexedvEXT()
#export enableIndexedEXT(GLenum target, GLuint index) = glEnableIndexedEXT()
#export disableIndexedEXT(GLenum target, GLuint index) = glDisableIndexedEXT()
#export isEnabledIndexedEXT(GLenum target, GLuint index) => GLboolean = glIsEnabledIndexedEXT()
#export getIntegerIndexedvEXT(GLenum target, GLuint index, [GLint] data) = glGetIntegerIndexedvEXT()
#export getBooleanIndexedvEXT(GLenum target, GLuint index, [GLboolean] data) = glGetBooleanIndexedvEXT()
#export compressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, [] bits) = glCompressedTextureImage3DEXT()
#export compressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, [] bits) = glCompressedTextureImage2DEXT()
#export compressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, [] bits) = glCompressedTextureImage1DEXT()
#export compressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] bits) = glCompressedTextureSubImage3DEXT()
#export compressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] bits) = glCompressedTextureSubImage2DEXT()
#export compressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] bits) = glCompressedTextureSubImage1DEXT()
#export getCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, [] img) = glGetCompressedTextureImageEXT()
#export compressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, [] bits) = glCompressedMultiTexImage3DEXT()
#export compressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, [] bits) = glCompressedMultiTexImage2DEXT()
#export compressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, [] bits) = glCompressedMultiTexImage1DEXT()
#export compressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, [] bits) = glCompressedMultiTexSubImage3DEXT()
#export compressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, [] bits) = glCompressedMultiTexSubImage2DEXT()
#export compressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, [] bits) = glCompressedMultiTexSubImage1DEXT()
#export getCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, [] img) = glGetCompressedMultiTexImageEXT()
#export matrixLoadTransposefEXT(GLenum mode, [GLfloat] m) = glMatrixLoadTransposefEXT()
#export matrixLoadTransposedEXT(GLenum mode, [GLdouble] m) = glMatrixLoadTransposedEXT()
#export matrixMultTransposefEXT(GLenum mode, [GLfloat] m) = glMatrixMultTransposefEXT()
#export matrixMultTransposedEXT(GLenum mode, [GLdouble] m) = glMatrixMultTransposedEXT()
#export namedBufferDataEXT(GLuint buffer, GLsizeiptr size, [] data, GLenum usage) = glNamedBufferDataEXT()
#export namedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data) = glNamedBufferSubDataEXT()
#export mapNamedBufferEXT(GLuint buffer, GLenum access) => [] = glMapNamedBufferEXT()
#export unmapNamedBufferEXT(GLuint buffer) => GLboolean = glUnmapNamedBufferEXT()
#export getNamedBufferParameterivEXT(GLuint buffer, GLenum pname, [GLint] params) = glGetNamedBufferParameterivEXT()
#export getNamedBufferPointervEXT(GLuint buffer, GLenum pname, [[]] params) = glGetNamedBufferPointervEXT()
#export getNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, [] data) = glGetNamedBufferSubDataEXT()
#export programUniform1fEXT(GLuint program, GLint location, GLfloat v0) = glProgramUniform1fEXT()
#export programUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) = glProgramUniform2fEXT()
#export programUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = glProgramUniform3fEXT()
#export programUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = glProgramUniform4fEXT()
#export programUniform1iEXT(GLuint program, GLint location, GLint v0) = glProgramUniform1iEXT()
#export programUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) = glProgramUniform2iEXT()
#export programUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) = glProgramUniform3iEXT()
#export programUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = glProgramUniform4iEXT()
#export programUniform1fvEXT(GLuint program, GLint location, GLsizei count, [GLfloat] value) = glProgramUniform1fvEXT()
#export programUniform2fvEXT(GLuint program, GLint location, GLsizei count, [GLfloat] value) = glProgramUniform2fvEXT()
#export programUniform3fvEXT(GLuint program, GLint location, GLsizei count, [GLfloat] value) = glProgramUniform3fvEXT()
#export programUniform4fvEXT(GLuint program, GLint location, GLsizei count, [GLfloat] value) = glProgramUniform4fvEXT()
#export programUniform1ivEXT(GLuint program, GLint location, GLsizei count, [GLint] value) = glProgramUniform1ivEXT()
#export programUniform2ivEXT(GLuint program, GLint location, GLsizei count, [GLint] value) = glProgramUniform2ivEXT()
#export programUniform3ivEXT(GLuint program, GLint location, GLsizei count, [GLint] value) = glProgramUniform3ivEXT()
#export programUniform4ivEXT(GLuint program, GLint location, GLsizei count, [GLint] value) = glProgramUniform4ivEXT()
#export programUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix2fvEXT()
#export programUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix3fvEXT()
#export programUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix4fvEXT()
#export programUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix2x3fvEXT()
#export programUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix3x2fvEXT()
#export programUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix2x4fvEXT()
#export programUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix4x2fvEXT()
#export programUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix3x4fvEXT()
#export programUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLfloat] value) = glProgramUniformMatrix4x3fvEXT()
#export textureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) = glTextureBufferEXT()
#export multiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) = glMultiTexBufferEXT()
#export textureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, [GLint] params) = glTextureParameterIivEXT()
#export textureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, [GLuint] params) = glTextureParameterIuivEXT()
#export getTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, [GLint] params) = glGetTextureParameterIivEXT()
#export getTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, [GLuint] params) = glGetTextureParameterIuivEXT()
#export multiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params) = glMultiTexParameterIivEXT()
#export multiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, [GLuint] params) = glMultiTexParameterIuivEXT()
#export getMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, [GLint] params) = glGetMultiTexParameterIivEXT()
#export getMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, [GLuint] params) = glGetMultiTexParameterIuivEXT()
#export programUniform1uiEXT(GLuint program, GLint location, GLuint v0) = glProgramUniform1uiEXT()
#export programUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) = glProgramUniform2uiEXT()
#export programUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) = glProgramUniform3uiEXT()
#export programUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = glProgramUniform4uiEXT()
#export programUniform1uivEXT(GLuint program, GLint location, GLsizei count, [GLuint] value) = glProgramUniform1uivEXT()
#export programUniform2uivEXT(GLuint program, GLint location, GLsizei count, [GLuint] value) = glProgramUniform2uivEXT()
#export programUniform3uivEXT(GLuint program, GLint location, GLsizei count, [GLuint] value) = glProgramUniform3uivEXT()
#export programUniform4uivEXT(GLuint program, GLint location, GLsizei count, [GLuint] value) = glProgramUniform4uivEXT()
#export namedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, [GLfloat] params) = glNamedProgramLocalParameters4fvEXT()
#export namedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) = glNamedProgramLocalParameterI4iEXT()
#export namedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, [GLint] params) = glNamedProgramLocalParameterI4ivEXT()
#export namedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, [GLint] params) = glNamedProgramLocalParametersI4ivEXT()
#export namedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = glNamedProgramLocalParameterI4uiEXT()
#export namedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, [GLuint] params) = glNamedProgramLocalParameterI4uivEXT()
#export namedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, [GLuint] params) = glNamedProgramLocalParametersI4uivEXT()
#export getNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, [GLint] params) = glGetNamedProgramLocalParameterIivEXT()
#export getNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, [GLuint] params) = glGetNamedProgramLocalParameterIuivEXT()
#export enableClientStateiEXT(GLenum array, GLuint index) = glEnableClientStateiEXT()
#export disableClientStateiEXT(GLenum array, GLuint index) = glDisableClientStateiEXT()
#export getFloati_vEXT(GLenum pname, GLuint index, [GLfloat] params) = glGetFloati_vEXT()
#export getDoublei_vEXT(GLenum pname, GLuint index, [GLdouble] params) = glGetDoublei_vEXT()
#export getPointeri_vEXT(GLenum pname, GLuint index, [[]] params) = glGetPointeri_vEXT()
#export namedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, [] string) = glNamedProgramStringEXT()
#export namedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = glNamedProgramLocalParameter4dEXT()
#export namedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, [GLdouble] params) = glNamedProgramLocalParameter4dvEXT()
#export namedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = glNamedProgramLocalParameter4fEXT()
#export namedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, [GLfloat] params) = glNamedProgramLocalParameter4fvEXT()
#export getNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, [GLdouble] params) = glGetNamedProgramLocalParameterdvEXT()
#export getNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, [GLfloat] params) = glGetNamedProgramLocalParameterfvEXT()
#export getNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, [GLint] params) = glGetNamedProgramivEXT()
#export getNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, [] string) = glGetNamedProgramStringEXT()
#export namedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) = glNamedRenderbufferStorageEXT()
#export getNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, [GLint] params) = glGetNamedRenderbufferParameterivEXT()
#export namedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = glNamedRenderbufferStorageMultisampleEXT()
#export namedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) = glNamedRenderbufferStorageMultisampleCoverageEXT()
#export checkNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) => GLenum = glCheckNamedFramebufferStatusEXT()
#export namedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = glNamedFramebufferTexture1DEXT()
#export namedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = glNamedFramebufferTexture2DEXT()
#export namedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) = glNamedFramebufferTexture3DEXT()
#export namedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = glNamedFramebufferRenderbufferEXT()
#export getNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, [GLint] params) = glGetNamedFramebufferAttachmentParameterivEXT()
#export generateTextureMipmapEXT(GLuint texture, GLenum target) = glGenerateTextureMipmapEXT()
#export generateMultiTexMipmapEXT(GLenum texunit, GLenum target) = glGenerateMultiTexMipmapEXT()
#export framebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) = glFramebufferDrawBufferEXT()
#export framebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, [GLenum] bufs) = glFramebufferDrawBuffersEXT()
#export framebufferReadBufferEXT(GLuint framebuffer, GLenum mode) = glFramebufferReadBufferEXT()
#export getFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, [GLint] params) = glGetFramebufferParameterivEXT()
#export namedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = glNamedCopyBufferSubDataEXT()
#export namedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) = glNamedFramebufferTextureEXT()
#export namedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) = glNamedFramebufferTextureLayerEXT()
#export namedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) = glNamedFramebufferTextureFaceEXT()
#export textureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) = glTextureRenderbufferEXT()
#export multiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) = glMultiTexRenderbufferEXT()
#export vertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = glVertexArrayVertexOffsetEXT()
#export vertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = glVertexArrayColorOffsetEXT()
#export vertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) = glVertexArrayEdgeFlagOffsetEXT()
#export vertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) = glVertexArrayIndexOffsetEXT()
#export vertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) = glVertexArrayNormalOffsetEXT()
#export vertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = glVertexArrayTexCoordOffsetEXT()
#export vertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) = glVertexArrayMultiTexCoordOffsetEXT()
#export vertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) = glVertexArrayFogCoordOffsetEXT()
#export vertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = glVertexArraySecondaryColorOffsetEXT()
#export vertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) = glVertexArrayVertexAttribOffsetEXT()
#export vertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) = glVertexArrayVertexAttribIOffsetEXT()
#export enableVertexArrayEXT(GLuint vaobj, GLenum array) = glEnableVertexArrayEXT()
#export disableVertexArrayEXT(GLuint vaobj, GLenum array) = glDisableVertexArrayEXT()
#export enableVertexArrayAttribEXT(GLuint vaobj, GLuint index) = glEnableVertexArrayAttribEXT()
#export disableVertexArrayAttribEXT(GLuint vaobj, GLuint index) = glDisableVertexArrayAttribEXT()
#export getVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, [GLint] param) = glGetVertexArrayIntegervEXT()
#export getVertexArrayPointervEXT(GLuint vaobj, GLenum pname, [[]] param) = glGetVertexArrayPointervEXT()
#export getVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, [GLint] param) = glGetVertexArrayIntegeri_vEXT()
#export getVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, [[]] param) = glGetVertexArrayPointeri_vEXT()
#export mapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) => [] = glMapNamedBufferRangeEXT()
#export flushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) = glFlushMappedNamedBufferRangeEXT()
#export namedBufferStorageEXT(GLuint buffer, GLsizeiptr size, [] data, GLbitfield flags) = glNamedBufferStorageEXT()
#export clearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, [] data) = glClearNamedBufferDataEXT()
#export clearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, [] data) = glClearNamedBufferSubDataEXT()
#export namedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) = glNamedFramebufferParameteriEXT()
#export getNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, [GLint] params) = glGetNamedFramebufferParameterivEXT()
#export programUniform1dEXT(GLuint program, GLint location, GLdouble x) = glProgramUniform1dEXT()
#export programUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) = glProgramUniform2dEXT()
#export programUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) = glProgramUniform3dEXT()
#export programUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = glProgramUniform4dEXT()
#export programUniform1dvEXT(GLuint program, GLint location, GLsizei count, [GLdouble] value) = glProgramUniform1dvEXT()
#export programUniform2dvEXT(GLuint program, GLint location, GLsizei count, [GLdouble] value) = glProgramUniform2dvEXT()
#export programUniform3dvEXT(GLuint program, GLint location, GLsizei count, [GLdouble] value) = glProgramUniform3dvEXT()
#export programUniform4dvEXT(GLuint program, GLint location, GLsizei count, [GLdouble] value) = glProgramUniform4dvEXT()
#export programUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix2dvEXT()
#export programUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix3dvEXT()
#export programUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix4dvEXT()
#export programUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix2x3dvEXT()
#export programUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix2x4dvEXT()
#export programUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix3x2dvEXT()
#export programUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix3x4dvEXT()
#export programUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix4x2dvEXT()
#export programUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, [GLdouble] value) = glProgramUniformMatrix4x3dvEXT()
#export textureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) = glTextureBufferRangeEXT()
#export textureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) = glTextureStorage1DEXT()
#export textureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) = glTextureStorage2DEXT()
#export textureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) = glTextureStorage3DEXT()
#export textureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = glTextureStorage2DMultisampleEXT()
#export textureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = glTextureStorage3DMultisampleEXT()
#export vertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) = glVertexArrayBindVertexBufferEXT()
#export vertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) = glVertexArrayVertexAttribFormatEXT()
#export vertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = glVertexArrayVertexAttribIFormatEXT()
#export vertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = glVertexArrayVertexAttribLFormatEXT()
#export vertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) = glVertexArrayVertexAttribBindingEXT()
#export vertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) = glVertexArrayVertexBindingDivisorEXT()
#export vertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) = glVertexArrayVertexAttribLOffsetEXT()
#export texturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) = glTexturePageCommitmentEXT()
#export vertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) = glVertexArrayVertexAttribDivisorEXT()
#export drawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) = glDrawArraysInstancedEXT()
#export drawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, [] indices, GLsizei primcount) = glDrawElementsInstancedEXT()
#export polygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) = glPolygonOffsetClampEXT()
#export rasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) = glRasterSamplesEXT()
#export useShaderProgramEXT(GLenum type, GLuint program) = glUseShaderProgramEXT()
#export activeProgramEXT(GLuint program) = glActiveProgramEXT()
#export createShaderProgramEXT(GLenum type, [GLchar] string) => GLuint = glCreateShaderProgramEXT()
#export framebufferFetchBarrierEXT() = glFramebufferFetchBarrierEXT()
#export texStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) = glTexStorage1DEXT()
#export texStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) = glTexStorage2DEXT()
#export texStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) = glTexStorage3DEXT()
#export windowRectanglesEXT(GLenum mode, GLsizei count, [GLint] box) = glWindowRectanglesEXT()
#export applyFramebufferAttachmentCMAAINTEL() = glApplyFramebufferAttachmentCMAAINTEL()
#export beginPerfQueryINTEL(GLuint queryHandle) = glBeginPerfQueryINTEL()
#export createPerfQueryINTEL(GLuint queryId, [GLuint] queryHandle) = glCreatePerfQueryINTEL()
#export deletePerfQueryINTEL(GLuint queryHandle) = glDeletePerfQueryINTEL()
#export endPerfQueryINTEL(GLuint queryHandle) = glEndPerfQueryINTEL()
#export getFirstPerfQueryIdINTEL([GLuint] queryId) = glGetFirstPerfQueryIdINTEL()
#export getNextPerfQueryIdINTEL(GLuint queryId, [GLuint] nextQueryId) = glGetNextPerfQueryIdINTEL()
#export getPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, [GLchar] counterName, GLuint counterDescLength, [GLchar] counterDesc, [GLuint] counterOffset, [GLuint] counterDataSize, [GLuint] counterTypeEnum, [GLuint] counterDataTypeEnum, [GLuint64] rawCounterMaxValue) = glGetPerfCounterInfoINTEL()
#export getPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, [] data, [GLuint] bytesWritten) = glGetPerfQueryDataINTEL()
#export getPerfQueryIdByNameINTEL([GLchar] queryName, [GLuint] queryId) = glGetPerfQueryIdByNameINTEL()
#export getPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, [GLchar] queryName, [GLuint] dataSize, [GLuint] noCounters, [GLuint] noInstances, [GLuint] capsMask) = glGetPerfQueryInfoINTEL()
#export framebufferParameteriMESA(GLenum target, GLenum pname, GLint param) = glFramebufferParameteriMESA()
#export getFramebufferParameterivMESA(GLenum target, GLenum pname, [GLint] params) = glGetFramebufferParameterivMESA()
#export multiDrawArraysIndirectBindlessNV(GLenum mode, [] indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) = glMultiDrawArraysIndirectBindlessNV()
#export multiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, [] indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) = glMultiDrawElementsIndirectBindlessNV()
#export multiDrawArraysIndirectBindlessCountNV(GLenum mode, [] indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) = glMultiDrawArraysIndirectBindlessCountNV()
#export multiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, [] indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) = glMultiDrawElementsIndirectBindlessCountNV()
#export getTextureHandleNV(GLuint texture) => GLuint64 = glGetTextureHandleNV()
#export getTextureSamplerHandleNV(GLuint texture, GLuint sampler) => GLuint64 = glGetTextureSamplerHandleNV()
#export makeTextureHandleResidentNV(GLuint64 handle) = glMakeTextureHandleResidentNV()
#export makeTextureHandleNonResidentNV(GLuint64 handle) = glMakeTextureHandleNonResidentNV()
#export getImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) => GLuint64 = glGetImageHandleNV()
#export makeImageHandleResidentNV(GLuint64 handle, GLenum access) = glMakeImageHandleResidentNV()
#export makeImageHandleNonResidentNV(GLuint64 handle) = glMakeImageHandleNonResidentNV()
#export uniformHandleui64NV(GLint location, GLuint64 value) = glUniformHandleui64NV()
#export uniformHandleui64vNV(GLint location, GLsizei count, [GLuint64] value) = glUniformHandleui64vNV()
#export programUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) = glProgramUniformHandleui64NV()
#export programUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64] values) = glProgramUniformHandleui64vNV()
#export isTextureHandleResidentNV(GLuint64 handle) => GLboolean = glIsTextureHandleResidentNV()
#export isImageHandleResidentNV(GLuint64 handle) => GLboolean = glIsImageHandleResidentNV()
#export blendParameteriNV(GLenum pname, GLint value) = glBlendParameteriNV()
#export blendBarrierNV() = glBlendBarrierNV()
#export viewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) = glViewportPositionWScaleNV()
#export createStatesNV(GLsizei n, [GLuint] states) = glCreateStatesNV()
#export deleteStatesNV(GLsizei n, [GLuint] states) = glDeleteStatesNV()
#export isStateNV(GLuint state) => GLboolean = glIsStateNV()
#export stateCaptureNV(GLuint state, GLenum mode) = glStateCaptureNV()
#export getCommandHeaderNV(GLenum tokenID, GLuint size) => GLuint = glGetCommandHeaderNV()
#export getStageIndexNV(GLenum shadertype) => GLushort = glGetStageIndexNV()
#export drawCommandsNV(GLenum primitiveMode, GLuint buffer, [GLintptr] indirects, [GLsizei] sizes, GLuint count) = glDrawCommandsNV()
#export drawCommandsAddressNV(GLenum primitiveMode, [GLuint64] indirects, [GLsizei] sizes, GLuint count) = glDrawCommandsAddressNV()
#export drawCommandsStatesNV(GLuint buffer, [GLintptr] indirects, [GLsizei] sizes, [GLuint] states, [GLuint] fbos, GLuint count) = glDrawCommandsStatesNV()
#export drawCommandsStatesAddressNV([GLuint64] indirects, [GLsizei] sizes, [GLuint] states, [GLuint] fbos, GLuint count) = glDrawCommandsStatesAddressNV()
#export createCommandListsNV(GLsizei n, [GLuint] lists) = glCreateCommandListsNV()
#export deleteCommandListsNV(GLsizei n, [GLuint] lists) = glDeleteCommandListsNV()
#export isCommandListNV(GLuint list) => GLboolean = glIsCommandListNV()
#export listDrawCommandsStatesClientNV(GLuint list, GLuint segment, [[]] indirects, [GLsizei] sizes, [GLuint] states, [GLuint] fbos, GLuint count) = glListDrawCommandsStatesClientNV()
#export commandListSegmentsNV(GLuint list, GLuint segments) = glCommandListSegmentsNV()
#export compileCommandListNV(GLuint list) = glCompileCommandListNV()
#export callCommandListNV(GLuint list) = glCallCommandListNV()
#export beginConditionalRenderNV(GLuint id, GLenum mode) = glBeginConditionalRenderNV()
#export endConditionalRenderNV() = glEndConditionalRenderNV()
#export subpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) = glSubpixelPrecisionBiasNV()
#export conservativeRasterParameterfNV(GLenum pname, GLfloat value) = glConservativeRasterParameterfNV()
#export conservativeRasterParameteriNV(GLenum pname, GLint param) = glConservativeRasterParameteriNV()
#export depthRangedNV(GLdouble zNear, GLdouble zFar) = glDepthRangedNV()
#export clearDepthdNV(GLdouble depth) = glClearDepthdNV()
#export depthBoundsdNV(GLdouble zmin, GLdouble zmax) = glDepthBoundsdNV()
#export drawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) = glDrawVkImageNV()
#export getVkProcAddrNV([GLchar] name) => GLVULKANPROCNV = glGetVkProcAddrNV()
#export waitVkSemaphoreNV(GLuint64 vkSemaphore) = glWaitVkSemaphoreNV()
#export signalVkSemaphoreNV(GLuint64 vkSemaphore) = glSignalVkSemaphoreNV()
#export signalVkFenceNV(GLuint64 vkFence) = glSignalVkFenceNV()
#export fragmentCoverageColorNV(GLuint color) = glFragmentCoverageColorNV()
#export coverageModulationTableNV(GLsizei n, [GLfloat] v) = glCoverageModulationTableNV()
#export getCoverageModulationTableNV(GLsizei bufSize, [GLfloat] v) = glGetCoverageModulationTableNV()
#export coverageModulationNV(GLenum components) = glCoverageModulationNV()
#export renderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) = glRenderbufferStorageMultisampleCoverageNV()
#export uniform1i64NV(GLint location, GLint64EXT x) = glUniform1i64NV()
#export uniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) = glUniform2i64NV()
#export uniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) = glUniform3i64NV()
#export uniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) = glUniform4i64NV()
#export uniform1i64vNV(GLint location, GLsizei count, [GLint64EXT] value) = glUniform1i64vNV()
#export uniform2i64vNV(GLint location, GLsizei count, [GLint64EXT] value) = glUniform2i64vNV()
#export uniform3i64vNV(GLint location, GLsizei count, [GLint64EXT] value) = glUniform3i64vNV()
#export uniform4i64vNV(GLint location, GLsizei count, [GLint64EXT] value) = glUniform4i64vNV()
#export uniform1ui64NV(GLint location, GLuint64EXT x) = glUniform1ui64NV()
#export uniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) = glUniform2ui64NV()
#export uniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) = glUniform3ui64NV()
#export uniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) = glUniform4ui64NV()
#export uniform1ui64vNV(GLint location, GLsizei count, [GLuint64EXT] value) = glUniform1ui64vNV()
#export uniform2ui64vNV(GLint location, GLsizei count, [GLuint64EXT] value) = glUniform2ui64vNV()
#export uniform3ui64vNV(GLint location, GLsizei count, [GLuint64EXT] value) = glUniform3ui64vNV()
#export uniform4ui64vNV(GLint location, GLsizei count, [GLuint64EXT] value) = glUniform4ui64vNV()
#export getUniformi64vNV(GLuint program, GLint location, [GLint64EXT] params) = glGetUniformi64vNV()
#export programUniform1i64NV(GLuint program, GLint location, GLint64EXT x) = glProgramUniform1i64NV()
#export programUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) = glProgramUniform2i64NV()
#export programUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) = glProgramUniform3i64NV()
#export programUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) = glProgramUniform4i64NV()
#export programUniform1i64vNV(GLuint program, GLint location, GLsizei count, [GLint64EXT] value) = glProgramUniform1i64vNV()
#export programUniform2i64vNV(GLuint program, GLint location, GLsizei count, [GLint64EXT] value) = glProgramUniform2i64vNV()
#export programUniform3i64vNV(GLuint program, GLint location, GLsizei count, [GLint64EXT] value) = glProgramUniform3i64vNV()
#export programUniform4i64vNV(GLuint program, GLint location, GLsizei count, [GLint64EXT] value) = glProgramUniform4i64vNV()
#export programUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) = glProgramUniform1ui64NV()
#export programUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) = glProgramUniform2ui64NV()
#export programUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) = glProgramUniform3ui64NV()
#export programUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) = glProgramUniform4ui64NV()
#export programUniform1ui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value) = glProgramUniform1ui64vNV()
#export programUniform2ui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value) = glProgramUniform2ui64vNV()
#export programUniform3ui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value) = glProgramUniform3ui64vNV()
#export programUniform4ui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value) = glProgramUniform4ui64vNV()
#export getInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, [GLint] params) = glGetInternalformatSampleivNV()
#export getMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, [GLuint] params) = glGetMemoryObjectDetachedResourcesuivNV()
#export resetMemoryObjectParameterNV(GLuint memory, GLenum pname) = glResetMemoryObjectParameterNV()
#export texAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) = glTexAttachMemoryNV()
#export bufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) = glBufferAttachMemoryNV()
#export textureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset) = glTextureAttachMemoryNV()
#export namedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset) = glNamedBufferAttachMemoryNV()
#export bufferPageCommitmentMemNV(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit) = glBufferPageCommitmentMemNV()
#export texPageCommitmentMemNV(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit) = glTexPageCommitmentMemNV()
#export namedBufferPageCommitmentMemNV(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit) = glNamedBufferPageCommitmentMemNV()
#export texturePageCommitmentMemNV(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit) = glTexturePageCommitmentMemNV()
#export drawMeshTasksNV(GLuint first, GLuint count) = glDrawMeshTasksNV()
#export drawMeshTasksIndirectNV(GLintptr indirect) = glDrawMeshTasksIndirectNV()
#export multiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride) = glMultiDrawMeshTasksIndirectNV()
#export multiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = glMultiDrawMeshTasksIndirectCountNV()
#export genPathsNV(GLsizei range) => GLuint = glGenPathsNV()
#export deletePathsNV(GLuint path, GLsizei range) = glDeletePathsNV()
#export isPathNV(GLuint path) => GLboolean = glIsPathNV()
#export pathCommandsNV(GLuint path, GLsizei numCommands, [GLubyte] commands, GLsizei numCoords, GLenum coordType, [] coords) = glPathCommandsNV()
#export pathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, [] coords) = glPathCoordsNV()
#export pathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, [GLubyte] commands, GLsizei numCoords, GLenum coordType, [] coords) = glPathSubCommandsNV()
#export pathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, [] coords) = glPathSubCoordsNV()
#export pathStringNV(GLuint path, GLenum format, GLsizei length, [] pathString) = glPathStringNV()
#export pathGlyphsNV(GLuint firstPathName, GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, [] charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = glPathGlyphsNV()
#export pathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = glPathGlyphRangeNV()
#export weightPathsNV(GLuint resultPath, GLsizei numPaths, [GLuint] paths, [GLfloat] weights) = glWeightPathsNV()
#export copyPathNV(GLuint resultPath, GLuint srcPath) = glCopyPathNV()
#export interpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) = glInterpolatePathsNV()
#export transformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, [GLfloat] transformValues) = glTransformPathNV()
#export pathParameterivNV(GLuint path, GLenum pname, [GLint] value) = glPathParameterivNV()
#export pathParameteriNV(GLuint path, GLenum pname, GLint value) = glPathParameteriNV()
#export pathParameterfvNV(GLuint path, GLenum pname, [GLfloat] value) = glPathParameterfvNV()
#export pathParameterfNV(GLuint path, GLenum pname, GLfloat value) = glPathParameterfNV()
#export pathDashArrayNV(GLuint path, GLsizei dashCount, [GLfloat] dashArray) = glPathDashArrayNV()
#export pathStencilFuncNV(GLenum func, GLint ref, GLuint mask) = glPathStencilFuncNV()
#export pathStencilDepthOffsetNV(GLfloat factor, GLfloat units) = glPathStencilDepthOffsetNV()
#export stencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) = glStencilFillPathNV()
#export stencilStrokePathNV(GLuint path, GLint reference, GLuint mask) = glStencilStrokePathNV()
#export stencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, [GLfloat] transformValues) = glStencilFillPathInstancedNV()
#export stencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, [GLfloat] transformValues) = glStencilStrokePathInstancedNV()
#export pathCoverDepthFuncNV(GLenum func) = glPathCoverDepthFuncNV()
#export coverFillPathNV(GLuint path, GLenum coverMode) = glCoverFillPathNV()
#export coverStrokePathNV(GLuint path, GLenum coverMode) = glCoverStrokePathNV()
#export coverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum coverMode, GLenum transformType, [GLfloat] transformValues) = glCoverFillPathInstancedNV()
#export coverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum coverMode, GLenum transformType, [GLfloat] transformValues) = glCoverStrokePathInstancedNV()
#export getPathParameterivNV(GLuint path, GLenum pname, [GLint] value) = glGetPathParameterivNV()
#export getPathParameterfvNV(GLuint path, GLenum pname, [GLfloat] value) = glGetPathParameterfvNV()
#export getPathCommandsNV(GLuint path, [GLubyte] commands) = glGetPathCommandsNV()
#export getPathCoordsNV(GLuint path, [GLfloat] coords) = glGetPathCoordsNV()
#export getPathDashArrayNV(GLuint path, [GLfloat] dashArray) = glGetPathDashArrayNV()
#export getPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLsizei stride, [GLfloat] metrics) = glGetPathMetricsNV()
#export getPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, [GLfloat] metrics) = glGetPathMetricRangeNV()
#export getPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, [GLfloat] returnedSpacing) = glGetPathSpacingNV()
#export isPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) => GLboolean = glIsPointInFillPathNV()
#export isPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) => GLboolean = glIsPointInStrokePathNV()
#export getPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) => GLfloat = glGetPathLengthNV()
#export pointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, [GLfloat] x, [GLfloat] y, [GLfloat] tangentX, [GLfloat] tangentY) => GLboolean = glPointAlongPathNV()
#export matrixLoad3x2fNV(GLenum matrixMode, [GLfloat] m) = glMatrixLoad3x2fNV()
#export matrixLoad3x3fNV(GLenum matrixMode, [GLfloat] m) = glMatrixLoad3x3fNV()
#export matrixLoadTranspose3x3fNV(GLenum matrixMode, [GLfloat] m) = glMatrixLoadTranspose3x3fNV()
#export matrixMult3x2fNV(GLenum matrixMode, [GLfloat] m) = glMatrixMult3x2fNV()
#export matrixMult3x3fNV(GLenum matrixMode, [GLfloat] m) = glMatrixMult3x3fNV()
#export matrixMultTranspose3x3fNV(GLenum matrixMode, [GLfloat] m) = glMatrixMultTranspose3x3fNV()
#export stencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) = glStencilThenCoverFillPathNV()
#export stencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) = glStencilThenCoverStrokePathNV()
#export stencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, [GLfloat] transformValues) = glStencilThenCoverFillPathInstancedNV()
#export stencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, [] paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, [GLfloat] transformValues) = glStencilThenCoverStrokePathInstancedNV()
#export pathGlyphIndexRangeNV(GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, [GLuint] baseAndCount) => GLenum = glPathGlyphIndexRangeNV()
#export pathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, [] fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) => GLenum = glPathGlyphIndexArrayNV()
#export pathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, [] fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) => GLenum = glPathMemoryGlyphIndexArrayNV()
#export programPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, [GLfloat] coeffs) = glProgramPathFragmentInputGenNV()
#export getProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, [GLenum] props, GLsizei count, [GLsizei] length, [GLfloat] params) = glGetProgramResourcefvNV()
#export framebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, [GLfloat] v) = glFramebufferSampleLocationsfvNV()
#export namedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, [GLfloat] v) = glNamedFramebufferSampleLocationsfvNV()
#export resolveDepthValuesNV() = glResolveDepthValuesNV()
#export scissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height) = glScissorExclusiveNV()
#export scissorExclusiveArrayvNV(GLuint first, GLsizei count, [GLint] v) = glScissorExclusiveArrayvNV()
#export makeBufferResidentNV(GLenum target, GLenum access) = glMakeBufferResidentNV()
#export makeBufferNonResidentNV(GLenum target) = glMakeBufferNonResidentNV()
#export isBufferResidentNV(GLenum target) => GLboolean = glIsBufferResidentNV()
#export makeNamedBufferResidentNV(GLuint buffer, GLenum access) = glMakeNamedBufferResidentNV()
#export makeNamedBufferNonResidentNV(GLuint buffer) = glMakeNamedBufferNonResidentNV()
#export isNamedBufferResidentNV(GLuint buffer) => GLboolean = glIsNamedBufferResidentNV()
#export getBufferParameterui64vNV(GLenum target, GLenum pname, [GLuint64EXT] params) = glGetBufferParameterui64vNV()
#export getNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, [GLuint64EXT] params) = glGetNamedBufferParameterui64vNV()
#export getIntegerui64vNV(GLenum value, [GLuint64EXT] result) = glGetIntegerui64vNV()
#export uniformui64NV(GLint location, GLuint64EXT value) = glUniformui64NV()
#export uniformui64vNV(GLint location, GLsizei count, [GLuint64EXT] value) = glUniformui64vNV()
#export getUniformui64vNV(GLuint program, GLint location, [GLuint64EXT] params) = glGetUniformui64vNV()
#export programUniformui64NV(GLuint program, GLint location, GLuint64EXT value) = glProgramUniformui64NV()
#export programUniformui64vNV(GLuint program, GLint location, GLsizei count, [GLuint64EXT] value) = glProgramUniformui64vNV()
#export bindShadingRateImageNV(GLuint texture) = glBindShadingRateImageNV()
#export getShadingRateImagePaletteNV(GLuint viewport, GLuint entry, [GLenum] rate) = glGetShadingRateImagePaletteNV()
#export getShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, [GLint] location) = glGetShadingRateSampleLocationivNV()
#export shadingRateImageBarrierNV(GLboolean synchronize) = glShadingRateImageBarrierNV()
#export shadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, [GLenum] rates) = glShadingRateImagePaletteNV()
#export shadingRateSampleOrderNV(GLenum order) = glShadingRateSampleOrderNV()
#export shadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, [GLint] locations) = glShadingRateSampleOrderCustomNV()
#export textureBarrierNV() = glTextureBarrierNV()
#export vertexAttribL1i64NV(GLuint index, GLint64EXT x) = glVertexAttribL1i64NV()
#export vertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) = glVertexAttribL2i64NV()
#export vertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) = glVertexAttribL3i64NV()
#export vertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) = glVertexAttribL4i64NV()
#export vertexAttribL1i64vNV(GLuint index, [GLint64EXT] v) = glVertexAttribL1i64vNV()
#export vertexAttribL2i64vNV(GLuint index, [GLint64EXT] v) = glVertexAttribL2i64vNV()
#export vertexAttribL3i64vNV(GLuint index, [GLint64EXT] v) = glVertexAttribL3i64vNV()
#export vertexAttribL4i64vNV(GLuint index, [GLint64EXT] v) = glVertexAttribL4i64vNV()
#export vertexAttribL1ui64NV(GLuint index, GLuint64EXT x) = glVertexAttribL1ui64NV()
#export vertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) = glVertexAttribL2ui64NV()
#export vertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) = glVertexAttribL3ui64NV()
#export vertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) = glVertexAttribL4ui64NV()
#export vertexAttribL1ui64vNV(GLuint index, [GLuint64EXT] v) = glVertexAttribL1ui64vNV()
#export vertexAttribL2ui64vNV(GLuint index, [GLuint64EXT] v) = glVertexAttribL2ui64vNV()
#export vertexAttribL3ui64vNV(GLuint index, [GLuint64EXT] v) = glVertexAttribL3ui64vNV()
#export vertexAttribL4ui64vNV(GLuint index, [GLuint64EXT] v) = glVertexAttribL4ui64vNV()
#export getVertexAttribLi64vNV(GLuint index, GLenum pname, [GLint64EXT] params) = glGetVertexAttribLi64vNV()
#export getVertexAttribLui64vNV(GLuint index, GLenum pname, [GLuint64EXT] params) = glGetVertexAttribLui64vNV()
#export vertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) = glVertexAttribLFormatNV()
#export bufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) = glBufferAddressRangeNV()
#export vertexFormatNV(GLint size, GLenum type, GLsizei stride) = glVertexFormatNV()
#export normalFormatNV(GLenum type, GLsizei stride) = glNormalFormatNV()
#export colorFormatNV(GLint size, GLenum type, GLsizei stride) = glColorFormatNV()
#export indexFormatNV(GLenum type, GLsizei stride) = glIndexFormatNV()
#export texCoordFormatNV(GLint size, GLenum type, GLsizei stride) = glTexCoordFormatNV()
#export edgeFlagFormatNV(GLsizei stride) = glEdgeFlagFormatNV()
#export secondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) = glSecondaryColorFormatNV()
#export fogCoordFormatNV(GLenum type, GLsizei stride) = glFogCoordFormatNV()
#export vertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) = glVertexAttribFormatNV()
#export vertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) = glVertexAttribIFormatNV()
#export getIntegerui64i_vNV(GLenum value, GLuint index, [GLuint64EXT] result) = glGetIntegerui64i_vNV()
#export viewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) = glViewportSwizzleNV()
#export framebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) = glFramebufferTextureMultiviewOVR()
#export namedFramebufferTextureMultiviewOVR(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) = glNamedFramebufferTextureMultiviewOVR()
