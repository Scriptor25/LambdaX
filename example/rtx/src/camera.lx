import "hittable.lx" as hittable
import "interval.lx" as interval
import "material.lx" as material
import "ppm.lx" as ppm
import "ray.lx" as ray
import "record.lx"
import "std.lx" as std
import "util.lx" as util
import "vec3.lx" as vec3

type camera {
    f64 aspect_ratio,
    u32 image_width,
    u32 samples_per_pixel,
    u32 max_depth,

    u32 image_height,
    f64 pixel_samples_scale,
    point center,
    point pixel00_loc,
    vec3 pixel_delta_u,
    vec3 pixel_delta_v,
}

initialize(mut camera self) = (
    self.image_height = self.image_width / self.aspect_ratio,
    self.image_height = self.image_height < 1 ? 1 : self.image_height,

    self.pixel_samples_scale = 1.0 / self.samples_per_pixel,

    self.center = vec3.empty(),

    focal_length := 1.0,
    viewport_height := 2.0,
    viewport_width := viewport_height * self.image_width / self.image_height,

    viewport_u := vec3.create(viewport_width, 0.0, 0.0),
    viewport_v := vec3.create(0.0, -viewport_height, 0.0),

    self.pixel_delta_u = vec3.div(viewport_u, self.image_width),
    self.pixel_delta_v = vec3.div(viewport_v, self.image_height),

    viewport_upper_left := vec3.sub(vec3.sub(vec3.sub(self.center, vec3.create(0.0, 0.0, focal_length)), vec3.div(viewport_u, 2)), vec3.div(viewport_v, 2)),
    self.pixel00_loc = vec3.add(viewport_upper_left, vec3.mul(vec3.add(self.pixel_delta_u, self.pixel_delta_v), 0.5))
)

mix_color(color a, color b, f64 t) => color = vec3.add(vec3.mul(a, 1 - t), vec3.mul(b, t))

ray_color(ray r, u32 depth, [hittable] world) => color = depth <= 0 ? vec3.empty() : (
    mut rec => record,
    world!hit(world, r, interval.create(1e-3, util.inf()), rec)
        ? (
            mut attenuation => color,
            mut scattered => ray,
            rec.mat!scatter(rec.mat, r, rec, attenuation, scattered)
                ? vec3.mulv(attenuation, ray_color(scattered, depth - 1, world))
                : vec3.empty()
        ) : (
            a := r.direction.y * 0.5 + 0.5,
            mix_color(vec3.scalar(1), vec3.create(0.5, 0.7, 1.0), a)
        )
)

sample_square() => vec3 = vec3.create(util.random() - 0.5, util.random() - 0.5, 0.0)

get_ray(camera self, u32 i, u32 j) => ray = (
    offset := sample_square(),
    pixel_sample := vec3.add(vec3.add(self.pixel00_loc, vec3.mul(self.pixel_delta_u, i + offset.x)), vec3.mul(self.pixel_delta_v, j + offset.y)),

    ray_origin := self.center,
    ray_direction := vec3.sub(pixel_sample, ray_origin),

    ray.create(ray_origin, ray_direction)
)

per_sample(camera self, [hittable] world, u64 j, u64 i, u64 s) => color = s < self.samples_per_pixel ?? (
    r := get_ray(self, i, j),
    pixel_color := ray_color(r, self.max_depth, world),
    vec3.add(pixel_color, per_sample(self, world, j, i, s + 1))
)

per_col(camera self, [hittable] world, u64 j, u64 i) = i < self.image_width ?? (
    pixel_color := per_sample(self, world, j, i, 0),
    ppm.print_color(vec3.mul(pixel_color, self.pixel_samples_scale)),
    per_col(self, world, j, i + 1)
)

per_row(camera self, [hittable] world, u64 j) = j < self.image_height ?? (
    per_col(self, world, j, 0),
    per_row(self, world, j + 1)
)

export render(mut camera self, [hittable] world) = (
    initialize(self),

    ppm.print_header(self.image_width, self.image_height, 255),

    per_row(self, world, 0)
)
