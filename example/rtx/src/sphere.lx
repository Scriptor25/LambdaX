import "interval.lx" as interval
import "ray.lx" as ray
import "record.lx" as record
import "std.lx" as std
import "vec3.lx" as vec3

type sphere {
    [([], ray, interval, mut record&) => u1] hit,

    point center,
    f64 radius,
    [material] mat,
}

hit(sphere self, ray r, interval ray_t, mut record& rec) => u1 = (
    oc := vec3.sub(self.center, r.origin),
    a := vec3.length_squared(r.direction),
    b := vec3.dot(r.direction, oc),
    c := vec3.length_squared(oc) - self.radius * self.radius,
    discriminant := b * b - a * c,
    discriminant >= 0 ?? (
        sqrtd := std.sqrt(discriminant),
        inva := 1.0 / a,
        t1 := (b - sqrtd) * inva,
        t2 := (b + sqrtd) * inva,
        v1 := interval.surrounds(ray_t, t1),
        v2 := interval.surrounds(ray_t, t2),
        v1 || v2 ?? (
            rec.t = v1 ? t1 : t2,
            rec.p = ray.at(r, rec.t),
            on := vec3.div(vec3.sub(rec.p, self.center), self.radius),
            record.set_normal(rec, r, on),
            rec.mat = self.mat,
            1
        )
    )
)

export create(point center, f64 radius, [material] mat) => sphere = {
    $([] ptr, ray r, interval ray_t, mut record& rec) => u1 = hit(*(ptr as [sphere]), r, ray_t, rec),

    center,
    radius,
    mat,
} sphere
