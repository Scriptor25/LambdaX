import "std.lx" as std

type vec3 = { f64 x, f64 y, f64 z }
type point = vec3
type color = vec3

export empty() => vec3 = { 0.0, 0.0, 0.0 }
export scalar(f64 t) => vec3 = { t, t, t }
export create(f64 x, f64 y, f64 z) => vec3 = { x, y, z }

export neg(vec3 v) => vec3 = { -v.x, -v.y, -v.z }
export add(vec3 u, vec3 v) => vec3 = { u.x + v.x, u.y + v.y, u.z + v.z }
export sub(vec3 u, vec3 v) => vec3 = { u.x - v.x, u.y - v.y, u.z - v.z }
export mul(vec3 v, f64 t) => vec3 = { v.x * t, v.y * t, v.z * t }
export div(vec3 v, f64 t) => vec3 = mul(v, 1 / t)

export length_squared(vec3 v) => f64 = v.x * v.x + v.y * v.y + v.z * v.z
export length(vec3 v) => f64 = std.sqrt(length_squared(v))

export normalize(vec3 v) => vec3 = div(v, length(v))

export dot(vec3 u, vec3 v) => f64 = u.x * v.x + u.y * v.y + u.z * v.z

export cross(vec3 u, vec3 v) => vec3 = {
    u.y * v.z - u.z * v.y,
    u.z * v.x - u.x * v.z,
    u.x * v.y - u.y * v.x,
}
